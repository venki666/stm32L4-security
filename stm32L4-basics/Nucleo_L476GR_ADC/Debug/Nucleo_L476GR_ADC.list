
Nucleo_L476GR_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007160  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080072f0  080072f0  000172f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b8  080075b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c0  080075c0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080075c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001dc  080077a4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080077a4  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e129  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bd1  00000000  00000000  0002e335  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  0002ff08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c18  00000000  00000000  000316f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009fe0  00000000  00000000  00059308  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc7b4  00000000  00000000  000632e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015fa9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  0015fb18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072d8 	.word	0x080072d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080072d8 	.word	0x080072d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fb71 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f887 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 f9b3 	bl	80012c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f5a:	f000 f981 	bl	8001260 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f5e:	f000 f909 	bl	8001174 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize all configured peripherals */
    MX_ADC1_Init();
 8000f62:	f000 f907 	bl	8001174 <MX_ADC1_Init>

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f66:	217f      	movs	r1, #127	; 0x7f
 8000f68:	4835      	ldr	r0, [pc, #212]	; (8001040 <main+0xf8>)
 8000f6a:	f001 fdc8 	bl	8002afe <HAL_ADCEx_Calibration_Start>

    HAL_ADC_Start(&hadc1);
 8000f6e:	4834      	ldr	r0, [pc, #208]	; (8001040 <main+0xf8>)
 8000f70:	f000 ff3a 	bl	8001de8 <HAL_ADC_Start>
    while (1) {
      char msg[20];
      uint16_t rawValue;
      float temp;

      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f78:	4831      	ldr	r0, [pc, #196]	; (8001040 <main+0xf8>)
 8000f7a:	f000 ffef 	bl	8001f5c <HAL_ADC_PollForConversion>

      rawValue = HAL_ADC_GetValue(&hadc1);
 8000f7e:	4830      	ldr	r0, [pc, #192]	; (8001040 <main+0xf8>)
 8000f80:	f001 f8bc 	bl	80020fc <HAL_ADC_GetValue>
 8000f84:	4603      	mov	r3, r0
 8000f86:	83fb      	strh	r3, [r7, #30]
      temp = ((float)rawValue) / 4095 * 3300;
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f92:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001044 <main+0xfc>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001048 <main+0x100>
 8000f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa2:	edc7 7a06 	vstr	s15, [r7, #24]
      temp = ((temp - 760.0) / 2.5) + 30;
 8000fa6:	69b8      	ldr	r0, [r7, #24]
 8000fa8:	f7ff face 	bl	8000548 <__aeabi_f2d>
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <main+0x104>)
 8000fb2:	f7ff f969 	bl	8000288 <__aeabi_dsub>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460c      	mov	r4, r1
 8000fba:	4618      	mov	r0, r3
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <main+0x108>)
 8000fc4:	f7ff fc42 	bl	800084c <__aeabi_ddiv>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	460c      	mov	r4, r1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	4621      	mov	r1, r4
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <main+0x10c>)
 8000fd6:	f7ff f959 	bl	800028c <__adddf3>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	f7ff fde1 	bl	8000ba8 <__aeabi_d2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	61bb      	str	r3, [r7, #24]

      sprintf(msg, "rawValue: %hu\r\n", rawValue);
 8000fea:	8bfa      	ldrh	r2, [r7, #30]
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	491a      	ldr	r1, [pc, #104]	; (8001058 <main+0x110>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fd91 	bl	8005b18 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8e9 	bl	80001d0 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	1d39      	adds	r1, r7, #4
 8001004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001008:	4814      	ldr	r0, [pc, #80]	; (800105c <main+0x114>)
 800100a:	f003 fc77 	bl	80048fc <HAL_UART_Transmit>

      sprintf(msg, "Temperature: %f\r\n", temp);
 800100e:	69b8      	ldr	r0, [r7, #24]
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	4603      	mov	r3, r0
 8001016:	460c      	mov	r4, r1
 8001018:	1d38      	adds	r0, r7, #4
 800101a:	461a      	mov	r2, r3
 800101c:	4623      	mov	r3, r4
 800101e:	4910      	ldr	r1, [pc, #64]	; (8001060 <main+0x118>)
 8001020:	f004 fd7a 	bl	8005b18 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f8d2 	bl	80001d0 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	1d39      	adds	r1, r7, #4
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <main+0x114>)
 8001038:	f003 fc60 	bl	80048fc <HAL_UART_Transmit>
    while (1) {
 800103c:	e79a      	b.n	8000f74 <main+0x2c>
 800103e:	bf00      	nop
 8001040:	20000204 	.word	0x20000204
 8001044:	457ff000 	.word	0x457ff000
 8001048:	454e4000 	.word	0x454e4000
 800104c:	4087c000 	.word	0x4087c000
 8001050:	40040000 	.word	0x40040000
 8001054:	403e0000 	.word	0x403e0000
 8001058:	080072f0 	.word	0x080072f0
 800105c:	20000268 	.word	0x20000268
 8001060:	08007300 	.word	0x08007300

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0b8      	sub	sp, #224	; 0xe0
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800106e:	2244      	movs	r2, #68	; 0x44
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f004 f8ec 	bl	8005250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2288      	movs	r2, #136	; 0x88
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f004 f8de 	bl	8005250 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a2:	2310      	movs	r3, #16
 80010a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010ba:	230a      	movs	r3, #10
 80010bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f928 	bl	800332c <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010e2:	f000 f955 	bl	8001390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001104:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001108:	2104      	movs	r1, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fcf4 	bl	8003af8 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001116:	f000 f93b 	bl	8001390 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800111a:	f244 0302 	movw	r3, #16386	; 0x4002
 800111e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001128:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800112a:	2302      	movs	r3, #2
 800112c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001132:	2308      	movs	r3, #8
 8001134:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001136:	2307      	movs	r3, #7
 8001138:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001146:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fed8 	bl	8003f00 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001156:	f000 f91b 	bl	8001390 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800115a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115e:	f002 f88f 	bl	8003280 <HAL_PWREx_ControlVoltageScaling>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001168:	f000 f912 	bl	8001390 <Error_Handler>
  }
}
 800116c:	bf00      	nop
 800116e:	37e0      	adds	r7, #224	; 0xe0
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <MX_ADC1_Init+0xe0>)
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <MX_ADC1_Init+0xe4>)
 800119a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <MX_ADC1_Init+0xe0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011b6:	2204      	movs	r2, #4
 80011b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f6:	4817      	ldr	r0, [pc, #92]	; (8001254 <MX_ADC1_Init+0xe0>)
 80011f8:	f000 fca2 	bl	8001b40 <HAL_ADC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001202:	f000 f8c5 	bl	8001390 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4810      	ldr	r0, [pc, #64]	; (8001254 <MX_ADC1_Init+0xe0>)
 8001212:	f001 fcd5 	bl	8002bc0 <HAL_ADCEx_MultiModeConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800121c:	f000 f8b8 	bl	8001390 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_ADC1_Init+0xe8>)
 8001222:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001224:	2306      	movs	r3, #6
 8001226:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122c:	237f      	movs	r3, #127	; 0x7f
 800122e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001230:	2304      	movs	r3, #4
 8001232:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_ADC1_Init+0xe0>)
 800123e:	f000 ff6b 	bl	8002118 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001248:	f000 f8a2 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000204 	.word	0x20000204
 8001258:	50040000 	.word	0x50040000
 800125c:	c7520000 	.word	0xc7520000

08001260 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_USART2_UART_Init+0x5c>)
 8001268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 80012a4:	f003 fadc 	bl	8004860 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012ae:	f000 f86f 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000268 	.word	0x20000268
 80012bc:	40004400 	.word	0x40004400

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a2a      	ldr	r2, [pc, #168]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a24      	ldr	r2, [pc, #144]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_GPIO_Init+0xc4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_GPIO_Init+0xc4>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <MX_GPIO_Init+0xc4>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_GPIO_Init+0xc4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_GPIO_Init+0xc4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_GPIO_Init+0xc4>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_GPIO_Init+0xc4>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2120      	movs	r1, #32
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f001 ff79 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_GPIO_Init+0xc8>)
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_GPIO_Init+0xcc>)
 8001358:	f001 fdc4 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800135c:	2320      	movs	r3, #32
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f001 fdb5 	bl	8002ee4 <HAL_GPIO_Init>

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	10210000 	.word	0x10210000
 800138c:	48000800 	.word	0x48000800

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_MspInit+0x44>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_MspInit+0x44>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6613      	str	r3, [r2, #96]	; 0x60
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_MspInit+0x44>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x44>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x44>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x44>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_ADC_MspInit+0x38>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10b      	bne.n	8001412 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_ADC_MspInit+0x3c>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_ADC_MspInit+0x3c>)
 8001400:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <HAL_ADC_MspInit+0x3c>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	50040000 	.word	0x50040000
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_UART_MspInit+0x7c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d128      	bne.n	800149c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_UART_MspInit+0x80>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <HAL_UART_MspInit+0x80>)
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	6593      	str	r3, [r2, #88]	; 0x58
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_UART_MspInit+0x80>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0x80>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_UART_MspInit+0x80>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_UART_MspInit+0x80>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800147a:	230c      	movs	r3, #12
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800148a:	2307      	movs	r3, #7
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001498:	f001 fd24 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40004400 	.word	0x40004400
 80014a8:	40021000 	.word	0x40021000

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f8f4 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f003 fe60 	bl	80051fc <__errno>
 800153c:	4602      	mov	r2, r0
 800153e:	230c      	movs	r3, #12
 8001540:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20018000 	.word	0x20018000
 8001568:	00000400 	.word	0x00000400
 800156c:	200001f8 	.word	0x200001f8
 8001570:	200002f0 	.word	0x200002f0

08001574 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <SystemInit+0x64>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <SystemInit+0x64>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <SystemInit+0x68>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <SystemInit+0x68>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <SystemInit+0x68>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <SystemInit+0x68>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <SystemInit+0x68>)
 80015a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <SystemInit+0x68>)
 80015ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <SystemInit+0x68>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <SystemInit+0x68>)
 80015b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <SystemInit+0x68>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <SystemInit+0x64>)
 80015c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ca:	609a      	str	r2, [r3, #8]
#endif
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	40021000 	.word	0x40021000

080015e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e4:	f7ff ffc6 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015ea:	e003      	b.n	80015f4 <LoopCopyDataInit>

080015ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015f2:	3104      	adds	r1, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015fc:	d3f6      	bcc.n	80015ec <CopyDataInit>
	ldr	r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001600:	e002      	b.n	8001608 <LoopFillZerobss>

08001602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001602:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001604:	f842 3b04 	str.w	r3, [r2], #4

08001608 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <LoopForever+0x16>)
	cmp	r2, r3
 800160a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800160c:	d3f9      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160e:	f003 fdfb 	bl	8005208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001612:	f7ff fc99 	bl	8000f48 <main>

08001616 <LoopForever>:

LoopForever:
    b LoopForever
 8001616:	e7fe      	b.n	8001616 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001618:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800161c:	080075c8 	.word	0x080075c8
	ldr	r0, =_sdata
 8001620:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001624:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001628:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 800162c:	200002f0 	.word	0x200002f0

08001630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_2_IRQHandler>
	...

08001634 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_Init+0x3c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x3c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164a:	2003      	movs	r0, #3
 800164c:	f001 fc16 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001650:	2000      	movs	r0, #0
 8001652:	f000 f80f 	bl	8001674 <HAL_InitTick>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	e001      	b.n	8001666 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001662:	f7ff fe9d 	bl	80013a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001666:	79fb      	ldrb	r3, [r7, #7]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_InitTick+0x6c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d023      	beq.n	80016d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_InitTick+0x70>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_InitTick+0x6c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f001 fc13 	bl	8002eca <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d809      	bhi.n	80016c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b8:	f001 fbeb 	bl	8002e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_InitTick+0x74>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e007      	b.n	80016d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e004      	b.n	80016d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e001      	b.n	80016d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008
 8001710:	200002e8 	.word	0x200002e8

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200002e8 	.word	0x200002e8

0800172c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3360      	adds	r3, #96	; 0x60
 80017a6:	461a      	mov	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <LL_ADC_SetOffset+0x44>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017cc:	bf00      	nop
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	03fff000 	.word	0x03fff000

080017dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3360      	adds	r3, #96	; 0x60
 80017ea:	461a      	mov	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3360      	adds	r3, #96	; 0x60
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3330      	adds	r3, #48	; 0x30
 8001874:	461a      	mov	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	4413      	add	r3, r2
 8001882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	211f      	movs	r1, #31
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	0e9b      	lsrs	r3, r3, #26
 800189c:	f003 011f 	and.w	r1, r3, #31
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	431a      	orrs	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3314      	adds	r3, #20
 80018cc:	461a      	mov	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	0e5b      	lsrs	r3, r3, #25
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	0d1b      	lsrs	r3, r3, #20
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2107      	movs	r1, #7
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	401a      	ands	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	0d1b      	lsrs	r3, r3, #20
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	431a      	orrs	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001906:	bf00      	nop
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0318 	and.w	r3, r3, #24
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001938:	40d9      	lsrs	r1, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	400b      	ands	r3, r1
 800193e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001942:	431a      	orrs	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	0007ffff 	.word	0x0007ffff

0800195c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 031f 	and.w	r3, r3, #31
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6093      	str	r3, [r2, #8]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019cc:	d101      	bne.n	80019d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a1c:	d101      	bne.n	8001a22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a6c:	f043 0202 	orr.w	r2, r3, #2
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <LL_ADC_IsEnabled+0x18>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <LL_ADC_IsEnabled+0x1a>
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d101      	bne.n	8001abe <LL_ADC_IsDisableOngoing+0x18>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_ADC_IsDisableOngoing+0x1a>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae0:	f043 0204 	orr.w	r2, r3, #4
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d101      	bne.n	8001b0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d101      	bne.n	8001b32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e134      	b.n	8001dc4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fc3d 	bl	80013e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff19 	bl	80019b8 <LL_ADC_IsDeepPowerDownEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff feff 	bl	8001994 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff34 	bl	8001a08 <LL_ADC_IsInternalRegulatorEnabled>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d113      	bne.n	8001bce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff18 	bl	80019e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001bb0:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <HAL_ADC_Init+0x28c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	4a86      	ldr	r2, [pc, #536]	; (8001dd0 <HAL_ADC_Init+0x290>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff18 	bl	8001a08 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10d      	bne.n	8001bfa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	f043 0210 	orr.w	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff78 	bl	8001af4 <LL_ADC_REG_IsConversionOngoing>
 8001c04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 80cf 	bne.w	8001db2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 80cb 	bne.w	8001db2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c24:	f043 0202 	orr.w	r2, r3, #2
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff25 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d115      	bne.n	8001c68 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c3c:	4865      	ldr	r0, [pc, #404]	; (8001dd4 <HAL_ADC_Init+0x294>)
 8001c3e:	f7ff ff1f 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c42:	4604      	mov	r4, r0
 8001c44:	4864      	ldr	r0, [pc, #400]	; (8001dd8 <HAL_ADC_Init+0x298>)
 8001c46:	f7ff ff1b 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	431c      	orrs	r4, r3
 8001c4e:	4863      	ldr	r0, [pc, #396]	; (8001ddc <HAL_ADC_Init+0x29c>)
 8001c50:	f7ff ff16 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4323      	orrs	r3, r4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4619      	mov	r1, r3
 8001c62:	485f      	ldr	r0, [pc, #380]	; (8001de0 <HAL_ADC_Init+0x2a0>)
 8001c64:	f7ff fd62 	bl	800172c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7e5b      	ldrb	r3, [r3, #25]
 8001c6c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c72:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c78:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c7e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c86:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d106      	bne.n	8001ca4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	045b      	lsls	r3, r3, #17
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_ADC_Init+0x2a4>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff0b 	bl	8001af4 <LL_ADC_REG_IsConversionOngoing>
 8001cde:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff18 	bl	8001b1a <LL_ADC_INJ_IsConversionOngoing>
 8001cea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d13d      	bne.n	8001d6e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d13a      	bne.n	8001d6e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cfc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d04:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d14:	f023 0302 	bic.w	r3, r3, #2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	69b9      	ldr	r1, [r7, #24]
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d118      	bne.n	8001d5e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d36:	f023 0304 	bic.w	r3, r3, #4
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	e007      	b.n	8001d6e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10c      	bne.n	8001d90 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f023 010f 	bic.w	r1, r3, #15
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8e:	e007      	b.n	8001da0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 020f 	bic.w	r2, r2, #15
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da4:	f023 0303 	bic.w	r3, r3, #3
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
 8001db0:	e007      	b.n	8001dc2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3724      	adds	r7, #36	; 0x24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	053e2d63 	.word	0x053e2d63
 8001dd4:	50040000 	.word	0x50040000
 8001dd8:	50040100 	.word	0x50040100
 8001ddc:	50040200 	.word	0x50040200
 8001de0:	50040300 	.word	0x50040300
 8001de4:	fff0c007 	.word	0xfff0c007

08001de8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df0:	4857      	ldr	r0, [pc, #348]	; (8001f50 <HAL_ADC_Start+0x168>)
 8001df2:	f7ff fdb3 	bl	800195c <LL_ADC_GetMultimode>
 8001df6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fe79 	bl	8001af4 <LL_ADC_REG_IsConversionOngoing>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 809c 	bne.w	8001f42 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_Start+0x30>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e097      	b.n	8001f48 <HAL_ADC_Start+0x160>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fd67 	bl	80028f4 <ADC_Enable>
 8001e26:	4603      	mov	r3, r0
 8001e28:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 8083 	bne.w	8001f38 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a42      	ldr	r2, [pc, #264]	; (8001f54 <HAL_ADC_Start+0x16c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d002      	beq.n	8001e56 <HAL_ADC_Start+0x6e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e000      	b.n	8001e58 <HAL_ADC_Start+0x70>
 8001e56:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <HAL_ADC_Start+0x170>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d002      	beq.n	8001e66 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7e:	d106      	bne.n	8001e8e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	f023 0206 	bic.w	r2, r3, #6
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	221c      	movs	r2, #28
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2a      	ldr	r2, [pc, #168]	; (8001f54 <HAL_ADC_Start+0x16c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d002      	beq.n	8001eb4 <HAL_ADC_Start+0xcc>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_Start+0xce>
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_ADC_Start+0x170>)
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d008      	beq.n	8001ed0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d002      	beq.n	8001ed0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d114      	bne.n	8001efa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ee6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fdea 	bl	8001acc <LL_ADC_REG_StartConversion>
 8001ef8:	e025      	b.n	8001f46 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <HAL_ADC_Start+0x16c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d002      	beq.n	8001f16 <HAL_ADC_Start+0x12e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	e000      	b.n	8001f18 <HAL_ADC_Start+0x130>
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_ADC_Start+0x170>)
 8001f18:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00f      	beq.n	8001f46 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
 8001f36:	e006      	b.n	8001f46 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f40:	e001      	b.n	8001f46 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
 8001f44:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	50040300 	.word	0x50040300
 8001f54:	50040100 	.word	0x50040100
 8001f58:	50040000 	.word	0x50040000

08001f5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f66:	4862      	ldr	r0, [pc, #392]	; (80020f0 <HAL_ADC_PollForConversion+0x194>)
 8001f68:	f7ff fcf8 	bl	800195c <LL_ADC_GetMultimode>
 8001f6c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d102      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f76:	2308      	movs	r3, #8
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e02a      	b.n	8001fd2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d002      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b09      	cmp	r3, #9
 8001f8c:	d111      	bne.n	8001fb2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e09d      	b.n	80020e8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fac:	2304      	movs	r3, #4
 8001fae:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fb0:	e00f      	b.n	8001fd2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fb2:	484f      	ldr	r0, [pc, #316]	; (80020f0 <HAL_ADC_PollForConversion+0x194>)
 8001fb4:	f7ff fce0 	bl	8001978 <LL_ADC_GetMultiDMATransfer>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0220 	orr.w	r2, r3, #32
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e08c      	b.n	80020e8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fce:	2304      	movs	r3, #4
 8001fd0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fd2:	f7ff fb9f 	bl	8001714 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fd8:	e01a      	b.n	8002010 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe0:	d016      	beq.n	8002010 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001fe2:	f7ff fb97 	bl	8001714 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <HAL_ADC_PollForConversion+0x9c>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10b      	bne.n	8002010 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f043 0204 	orr.w	r2, r3, #4
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e06b      	b.n	80020e8 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0dd      	beq.n	8001fda <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fc05 	bl	800183e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01c      	beq.n	8002074 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7e5b      	ldrb	r3, [r3, #25]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b08      	cmp	r3, #8
 800204e:	d111      	bne.n	8002074 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_ADC_PollForConversion+0x198>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d002      	beq.n	8002084 <HAL_ADC_PollForConversion+0x128>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e000      	b.n	8002086 <HAL_ADC_PollForConversion+0x12a>
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_ADC_PollForConversion+0x19c>)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	4293      	cmp	r3, r2
 800208c:	d008      	beq.n	80020a0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b05      	cmp	r3, #5
 8002098:	d002      	beq.n	80020a0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b09      	cmp	r3, #9
 800209e:	d104      	bne.n	80020aa <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	e00c      	b.n	80020c4 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_ADC_PollForConversion+0x198>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d002      	beq.n	80020ba <HAL_ADC_PollForConversion+0x15e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	e000      	b.n	80020bc <HAL_ADC_PollForConversion+0x160>
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_ADC_PollForConversion+0x19c>)
 80020bc:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d104      	bne.n	80020d4 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2208      	movs	r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e008      	b.n	80020e6 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	220c      	movs	r2, #12
 80020e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	50040300 	.word	0x50040300
 80020f4:	50040100 	.word	0x50040100
 80020f8:	50040000 	.word	0x50040000

080020fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0b6      	sub	sp, #216	; 0xd8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x22>
 8002136:	2302      	movs	r3, #2
 8002138:	e3c6      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x7b0>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fcd4 	bl	8001af4 <LL_ADC_REG_IsConversionOngoing>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 83a7 	bne.w	80028a2 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d824      	bhi.n	80021a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	3b02      	subs	r3, #2
 8002162:	2b03      	cmp	r3, #3
 8002164:	d81b      	bhi.n	800219e <HAL_ADC_ConfigChannel+0x86>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <HAL_ADC_ConfigChannel+0x54>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	0800217d 	.word	0x0800217d
 8002170:	08002185 	.word	0x08002185
 8002174:	0800218d 	.word	0x0800218d
 8002178:	08002195 	.word	0x08002195
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	220c      	movs	r2, #12
 8002180:	605a      	str	r2, [r3, #4]
          break;
 8002182:	e011      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2212      	movs	r2, #18
 8002188:	605a      	str	r2, [r3, #4]
          break;
 800218a:	e00d      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2218      	movs	r2, #24
 8002190:	605a      	str	r2, [r3, #4]
          break;
 8002192:	e009      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800219a:	605a      	str	r2, [r3, #4]
          break;
 800219c:	e004      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2206      	movs	r2, #6
 80021a2:	605a      	str	r2, [r3, #4]
          break;
 80021a4:	e000      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80021a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff fb55 	bl	8001864 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fc98 	bl	8001af4 <LL_ADC_REG_IsConversionOngoing>
 80021c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fca4 	bl	8001b1a <LL_ADC_INJ_IsConversionOngoing>
 80021d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 81a6 	bne.w	800252c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 81a1 	bne.w	800252c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f7ff fb60 	bl	80018bc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d00a      	beq.n	8002234 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6919      	ldr	r1, [r3, #16]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800222e:	f7ff fab1 	bl	8001794 <LL_ADC_SetOffset>
 8002232:	e17b      	b.n	800252c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff face 	bl	80017dc <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x148>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fac3 	bl	80017dc <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	f003 021f 	and.w	r2, r3, #31
 800225e:	e01e      	b.n	800229e <HAL_ADC_ConfigChannel+0x186>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fab8 	bl	80017dc <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800227e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e004      	b.n	800229c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x19e>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	e018      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x1d0>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80022da:	2320      	movs	r3, #32
 80022dc:	e004      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80022de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d106      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fa87 	bl	8001808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2101      	movs	r1, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fa6b 	bl	80017dc <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x20e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fa60 	bl	80017dc <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	e01e      	b.n	8002364 <HAL_ADC_ConfigChannel+0x24c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fa55 	bl	80017dc <LL_ADC_GetOffsetChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002344:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800234c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e004      	b.n	8002362 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <HAL_ADC_ConfigChannel+0x264>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	e018      	b.n	80023ae <HAL_ADC_ConfigChannel+0x296>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002390:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e004      	b.n	80023ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80023a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d106      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2101      	movs	r1, #1
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fa24 	bl	8001808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2102      	movs	r1, #2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fa08 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x2d4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2102      	movs	r1, #2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f9fd 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	f003 021f 	and.w	r2, r3, #31
 80023ea:	e01e      	b.n	800242a <HAL_ADC_ConfigChannel+0x312>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2102      	movs	r1, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff f9f2 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800240a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800240e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002412:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e004      	b.n	8002428 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800241e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x32a>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	0e9b      	lsrs	r3, r3, #26
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	e016      	b.n	8002470 <HAL_ADC_ConfigChannel+0x358>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800245a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002462:	2320      	movs	r3, #32
 8002464:	e004      	b.n	8002470 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002470:	429a      	cmp	r2, r3
 8002472:	d106      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2200      	movs	r2, #0
 800247a:	2102      	movs	r1, #2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff f9c3 	bl	8001808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2103      	movs	r1, #3
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff f9a7 	bl	80017dc <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x396>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2103      	movs	r1, #3
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f99c 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	e017      	b.n	80024de <HAL_ADC_ConfigChannel+0x3c6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2103      	movs	r1, #3
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f991 	bl	80017dc <LL_ADC_GetOffsetChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e003      	b.n	80024dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80024d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x3de>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	e011      	b.n	800251a <HAL_ADC_ConfigChannel+0x402>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002506:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800250e:	2320      	movs	r3, #32
 8002510:	e003      	b.n	800251a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800251a:	429a      	cmp	r2, r3
 800251c:	d106      	bne.n	800252c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	2103      	movs	r1, #3
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f96e 	bl	8001808 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff faa5 	bl	8001a80 <LL_ADC_IsEnabled>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 813f 	bne.w	80027bc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	461a      	mov	r2, r3
 800254c:	f7ff f9e2 	bl	8001914 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a8e      	ldr	r2, [pc, #568]	; (8002790 <HAL_ADC_ConfigChannel+0x678>)
 8002556:	4293      	cmp	r3, r2
 8002558:	f040 8130 	bne.w	80027bc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x46c>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	3301      	adds	r3, #1
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2b09      	cmp	r3, #9
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e019      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x4a0>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002594:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80025a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	bf94      	ite	ls
 80025b2:	2301      	movls	r3, #1
 80025b4:	2300      	movhi	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d079      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x4c0>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	069b      	lsls	r3, r3, #26
 80025d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d6:	e015      	b.n	8002604 <HAL_ADC_ConfigChannel+0x4ec>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	069b      	lsls	r3, r3, #26
 8002600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x50c>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	e017      	b.n	8002654 <HAL_ADC_ConfigChannel+0x53c>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	ea42 0103 	orr.w	r1, r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <HAL_ADC_ConfigChannel+0x562>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	3301      	adds	r3, #1
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	051b      	lsls	r3, r3, #20
 8002678:	e018      	b.n	80026ac <HAL_ADC_ConfigChannel+0x594>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800268c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e003      	b.n	800269e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ac:	430b      	orrs	r3, r1
 80026ae:	e080      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x5b4>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	3301      	adds	r3, #1
 80026c4:	069b      	lsls	r3, r3, #26
 80026c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ca:	e015      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x5e0>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80026e4:	2320      	movs	r3, #32
 80026e6:	e003      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	069b      	lsls	r3, r3, #26
 80026f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x600>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	3301      	adds	r3, #1
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	e017      	b.n	8002748 <HAL_ADC_ConfigChannel+0x630>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	61fb      	str	r3, [r7, #28]
  return result;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2101      	movs	r1, #1
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	ea42 0103 	orr.w	r1, r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x65c>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0e9b      	lsrs	r3, r3, #26
 800275e:	3301      	adds	r3, #1
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	3b1e      	subs	r3, #30
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002772:	e01d      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x698>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	613b      	str	r3, [r7, #16]
  return result;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d103      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e005      	b.n	800279c <HAL_ADC_ConfigChannel+0x684>
 8002790:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f003 021f 	and.w	r2, r3, #31
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	3b1e      	subs	r3, #30
 80027aa:	051b      	lsls	r3, r3, #20
 80027ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b0:	430b      	orrs	r3, r1
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	6892      	ldr	r2, [r2, #8]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7ff f880 	bl	80018bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_ADC_ConfigChannel+0x7b8>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d079      	beq.n	80028bc <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c8:	4842      	ldr	r0, [pc, #264]	; (80028d4 <HAL_ADC_ConfigChannel+0x7bc>)
 80027ca:	f7fe ffd5 	bl	8001778 <LL_ADC_GetCommonPathInternalCh>
 80027ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a40      	ldr	r2, [pc, #256]	; (80028d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d12b      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d125      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a3b      	ldr	r2, [pc, #236]	; (80028dc <HAL_ADC_ConfigChannel+0x7c4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_ADC_ConfigChannel+0x6e4>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3a      	ldr	r2, [pc, #232]	; (80028e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d15c      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002800:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002804:	4619      	mov	r1, r3
 8002806:	4833      	ldr	r0, [pc, #204]	; (80028d4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002808:	f7fe ffa3 	bl	8001752 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_ADC_ConfigChannel+0x7cc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	4a35      	ldr	r2, [pc, #212]	; (80028e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	099a      	lsrs	r2, r3, #6
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002824:	e002      	b.n	800282c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3b01      	subs	r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002832:	e040      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2c      	ldr	r2, [pc, #176]	; (80028ec <HAL_ADC_ConfigChannel+0x7d4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d118      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x758>
 800283e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d112      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_ADC_ConfigChannel+0x7c4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_ADC_ConfigChannel+0x746>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <HAL_ADC_ConfigChannel+0x7c8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d12d      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800285e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002866:	4619      	mov	r1, r3
 8002868:	481a      	ldr	r0, [pc, #104]	; (80028d4 <HAL_ADC_ConfigChannel+0x7bc>)
 800286a:	f7fe ff72 	bl	8001752 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800286e:	e024      	b.n	80028ba <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d120      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800287a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d11a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_ADC_ConfigChannel+0x7c4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d115      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002898:	4619      	mov	r1, r3
 800289a:	480e      	ldr	r0, [pc, #56]	; (80028d4 <HAL_ADC_ConfigChannel+0x7bc>)
 800289c:	f7fe ff59 	bl	8001752 <LL_ADC_SetCommonPathInternalCh>
 80028a0:	e00c      	b.n	80028bc <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80028b4:	e002      	b.n	80028bc <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	37d8      	adds	r7, #216	; 0xd8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	80080000 	.word	0x80080000
 80028d4:	50040300 	.word	0x50040300
 80028d8:	c7520000 	.word	0xc7520000
 80028dc:	50040000 	.word	0x50040000
 80028e0:	50040200 	.word	0x50040200
 80028e4:	20000000 	.word	0x20000000
 80028e8:	053e2d63 	.word	0x053e2d63
 80028ec:	cb840000 	.word	0xcb840000
 80028f0:	80000001 	.word	0x80000001

080028f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff f8bd 	bl	8001a80 <LL_ADC_IsEnabled>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d146      	bne.n	800299a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <ADC_Enable+0xb0>)
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e032      	b.n	800299c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f878 	bl	8001a30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002940:	f7fe fee8 	bl	8001714 <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002946:	e021      	b.n	800298c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f897 	bl	8001a80 <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f867 	bl	8001a30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002962:	f7fe fed7 	bl	8001714 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d90d      	bls.n	800298c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f043 0210 	orr.w	r2, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e007      	b.n	800299c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d1d6      	bne.n	8002948 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	8000003f 	.word	0x8000003f

080029a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f876 	bl	8001aa6 <LL_ADC_IsDisableOngoing>
 80029ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f85d 	bl	8001a80 <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d040      	beq.n	8002a4e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d13d      	bne.n	8002a4e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030d 	and.w	r3, r3, #13
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10c      	bne.n	80029fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f837 	bl	8001a58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2203      	movs	r2, #3
 80029f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029f2:	f7fe fe8f 	bl	8001714 <HAL_GetTick>
 80029f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029f8:	e022      	b.n	8002a40 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0210 	orr.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01c      	b.n	8002a50 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a16:	f7fe fe7d 	bl	8001714 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d90d      	bls.n	8002a40 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e3      	bne.n	8002a16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <LL_ADC_IsEnabled>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <LL_ADC_IsEnabled+0x18>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <LL_ADC_IsEnabled+0x1a>
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_StartCalibration>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d101      	bne.n	8002af0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADCEx_Calibration_Start+0x1c>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e04d      	b.n	8002bb6 <HAL_ADCEx_Calibration_Start+0xb8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ff40 	bl	80029a8 <ADC_Disable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d136      	bne.n	8002ba0 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b3a:	f023 0302 	bic.w	r3, r3, #2
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff96 	bl	8002a7e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b52:	e014      	b.n	8002b7e <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002b60:	d30d      	bcc.n	8002b7e <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f023 0312 	bic.w	r3, r3, #18
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e01b      	b.n	8002bb6 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff94 	bl	8002ab0 <LL_ADC_IsCalibrationOnGoing>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e2      	bne.n	8002b54 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
 8002b9e:	e005      	b.n	8002bac <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f043 0210 	orr.w	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b09f      	sub	sp, #124	; 0x7c
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e08f      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a47      	ldr	r2, [pc, #284]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d102      	bne.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002bf0:	4b46      	ldr	r3, [pc, #280]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	e001      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10b      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e072      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff5c 	bl	8002ad8 <LL_ADC_REG_IsConversionOngoing>
 8002c20:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff56 	bl	8002ad8 <LL_ADC_REG_IsConversionOngoing>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d154      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d151      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c3a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d02c      	beq.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c56:	035b      	lsls	r3, r3, #13
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c60:	4829      	ldr	r0, [pc, #164]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002c62:	f7ff fef9 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c66:	4604      	mov	r4, r0
 8002c68:	4828      	ldr	r0, [pc, #160]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002c6a:	f7ff fef5 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	431c      	orrs	r4, r3
 8002c72:	4828      	ldr	r0, [pc, #160]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c74:	f7ff fef0 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d137      	bne.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c88:	f023 030f 	bic.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	6811      	ldr	r1, [r2, #0]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	6892      	ldr	r2, [r2, #8]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c9c:	e028      	b.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002caa:	4817      	ldr	r0, [pc, #92]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002cac:	f7ff fed4 	bl	8002a58 <LL_ADC_IsEnabled>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	4816      	ldr	r0, [pc, #88]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002cb4:	f7ff fed0 	bl	8002a58 <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	431c      	orrs	r4, r3
 8002cbc:	4815      	ldr	r0, [pc, #84]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cbe:	f7ff fecb 	bl	8002a58 <LL_ADC_IsEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4323      	orrs	r3, r4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d112      	bne.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cd2:	f023 030f 	bic.w	r3, r3, #15
 8002cd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cd8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cda:	e009      	b.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002cee:	e000      	b.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	377c      	adds	r7, #124	; 0x7c
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	50040000 	.word	0x50040000
 8002d0c:	50040100 	.word	0x50040100
 8002d10:	50040300 	.word	0x50040300
 8002d14:	50040200 	.word	0x50040200

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	60d3      	str	r3, [r2, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	; (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	; (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e48:	d301      	bcc.n	8002e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <SysTick_Config+0x40>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e56:	210f      	movs	r1, #15
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e5c:	f7ff ff8e 	bl	8002d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <SysTick_Config+0x40>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <SysTick_Config+0x40>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff47 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff5c 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff8e 	bl	8002dd0 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5d 	bl	8002d7c <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffb0 	bl	8002e38 <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef2:	e17f      	b.n	80031f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	4013      	ands	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8171 	beq.w	80031ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d00b      	beq.n	8002f2c <HAL_GPIO_Init+0x48>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d007      	beq.n	8002f2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f20:	2b11      	cmp	r3, #17
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b12      	cmp	r3, #18
 8002f2a:	d130      	bne.n	8002f8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f62:	2201      	movs	r2, #1
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 0201 	and.w	r2, r3, #1
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d118      	bne.n	8002fcc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	f003 0201 	and.w	r2, r3, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x128>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b12      	cmp	r3, #18
 800300a:	d123      	bne.n	8003054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3208      	adds	r2, #8
 800304e:	6939      	ldr	r1, [r7, #16]
 8003050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0203 	and.w	r2, r3, #3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80ac 	beq.w	80031ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	4b5e      	ldr	r3, [pc, #376]	; (8003210 <HAL_GPIO_Init+0x32c>)
 8003098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309a:	4a5d      	ldr	r2, [pc, #372]	; (8003210 <HAL_GPIO_Init+0x32c>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6613      	str	r3, [r2, #96]	; 0x60
 80030a2:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <HAL_GPIO_Init+0x32c>)
 80030a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030ae:	4a59      	ldr	r2, [pc, #356]	; (8003214 <HAL_GPIO_Init+0x330>)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030d8:	d025      	beq.n	8003126 <HAL_GPIO_Init+0x242>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4e      	ldr	r2, [pc, #312]	; (8003218 <HAL_GPIO_Init+0x334>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <HAL_GPIO_Init+0x23e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4d      	ldr	r2, [pc, #308]	; (800321c <HAL_GPIO_Init+0x338>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x23a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_GPIO_Init+0x33c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x236>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	; (8003224 <HAL_GPIO_Init+0x340>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x232>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_GPIO_Init+0x344>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x22e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a49      	ldr	r2, [pc, #292]	; (800322c <HAL_GPIO_Init+0x348>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x22a>
 800310a:	2306      	movs	r3, #6
 800310c:	e00c      	b.n	8003128 <HAL_GPIO_Init+0x244>
 800310e:	2307      	movs	r3, #7
 8003110:	e00a      	b.n	8003128 <HAL_GPIO_Init+0x244>
 8003112:	2305      	movs	r3, #5
 8003114:	e008      	b.n	8003128 <HAL_GPIO_Init+0x244>
 8003116:	2304      	movs	r3, #4
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x244>
 800311a:	2303      	movs	r3, #3
 800311c:	e004      	b.n	8003128 <HAL_GPIO_Init+0x244>
 800311e:	2302      	movs	r3, #2
 8003120:	e002      	b.n	8003128 <HAL_GPIO_Init+0x244>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_GPIO_Init+0x244>
 8003126:	2300      	movs	r3, #0
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	f002 0203 	and.w	r2, r2, #3
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	4093      	lsls	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003138:	4936      	ldr	r1, [pc, #216]	; (8003214 <HAL_GPIO_Init+0x330>)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003146:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_GPIO_Init+0x34c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800316a:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_GPIO_Init+0x34c>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003170:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_GPIO_Init+0x34c>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003194:	4a26      	ldr	r2, [pc, #152]	; (8003230 <HAL_GPIO_Init+0x34c>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_GPIO_Init+0x34c>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_GPIO_Init+0x34c>)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_GPIO_Init+0x34c>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <HAL_GPIO_Init+0x34c>)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	3301      	adds	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f47f ae78 	bne.w	8002ef4 <HAL_GPIO_Init+0x10>
  }
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40021000 	.word	0x40021000
 8003214:	40010000 	.word	0x40010000
 8003218:	48000400 	.word	0x48000400
 800321c:	48000800 	.word	0x48000800
 8003220:	48000c00 	.word	0x48000c00
 8003224:	48001000 	.word	0x48001000
 8003228:	48001400 	.word	0x48001400
 800322c:	48001800 	.word	0x48001800
 8003230:	40010400 	.word	0x40010400

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003250:	e002      	b.n	8003258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_PWREx_GetVoltageRange+0x18>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40007000 	.word	0x40007000

08003280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328e:	d130      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003290:	4b23      	ldr	r3, [pc, #140]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329c:	d038      	beq.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2232      	movs	r2, #50	; 0x32
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0c9b      	lsrs	r3, r3, #18
 80032c0:	3301      	adds	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c4:	e002      	b.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d102      	bne.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f2      	bne.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ec:	d110      	bne.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e00f      	b.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d007      	beq.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003308:	4a05      	ldr	r2, [pc, #20]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800330e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40007000 	.word	0x40007000
 8003324:	20000000 	.word	0x20000000
 8003328:	431bde83 	.word	0x431bde83

0800332c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e3d4      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333e:	4ba1      	ldr	r3, [pc, #644]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003348:	4b9e      	ldr	r3, [pc, #632]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80e4 	beq.w	8003528 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_RCC_OscConfig+0x4a>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	f040 808b 	bne.w	8003484 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b01      	cmp	r3, #1
 8003372:	f040 8087 	bne.w	8003484 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003376:	4b93      	ldr	r3, [pc, #588]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_RCC_OscConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e3ac      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1a      	ldr	r2, [r3, #32]
 8003392:	4b8c      	ldr	r3, [pc, #560]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <HAL_RCC_OscConfig+0x7c>
 800339e:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_OscConfig+0x88>
 80033a8:	4b86      	ldr	r3, [pc, #536]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d223      	bcs.n	8003400 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fd3f 	bl	8003e40 <RCC_SetFlashLatencyFromMSIRange>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e38d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033cc:	4b7d      	ldr	r3, [pc, #500]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80033d2:	f043 0308 	orr.w	r3, r3, #8
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b7a      	ldr	r3, [pc, #488]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4977      	ldr	r1, [pc, #476]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	4972      	ldr	r1, [pc, #456]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
 80033fe:	e025      	b.n	800344c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003400:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6f      	ldr	r2, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	496a      	ldr	r1, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341e:	4b69      	ldr	r3, [pc, #420]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	4965      	ldr	r1, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fcff 	bl	8003e40 <RCC_SetFlashLatencyFromMSIRange>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e34d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344c:	f000 fc36 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003450:	4601      	mov	r1, r0
 8003452:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	4a5a      	ldr	r2, [pc, #360]	; (80035c8 <HAL_RCC_OscConfig+0x29c>)
 800345e:	5cd3      	ldrb	r3, [r2, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_RCC_OscConfig+0x2a0>)
 800346a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800346c:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_OscConfig+0x2a4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe f8ff 	bl	8001674 <HAL_InitTick>
 8003476:	4603      	mov	r3, r0
 8003478:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d052      	beq.n	8003526 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	e331      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d032      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800348c:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a4c      	ldr	r2, [pc, #304]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003498:	f7fe f93c 	bl	8001714 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a0:	f7fe f938 	bl	8001714 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e31a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b2:	4b44      	ldr	r3, [pc, #272]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a40      	ldr	r2, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034c4:	f043 0308 	orr.w	r3, r3, #8
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b3e      	ldr	r3, [pc, #248]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	493b      	ldr	r1, [pc, #236]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	4936      	ldr	r1, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
 80034f0:	e01a      	b.n	8003528 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a33      	ldr	r2, [pc, #204]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034fe:	f7fe f909 	bl	8001714 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003506:	f7fe f905 	bl	8001714 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e2e7      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x1da>
 8003524:	e000      	b.n	8003528 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003526:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d074      	beq.n	800361e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b08      	cmp	r3, #8
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x21a>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d10e      	bne.n	800355e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d10b      	bne.n	800355e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003546:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d064      	beq.n	800361c <HAL_RCC_OscConfig+0x2f0>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d160      	bne.n	800361c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e2c4      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x24a>
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800356e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	e01d      	b.n	80035b2 <HAL_RCC_OscConfig+0x286>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x26e>
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x286>
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80035a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x298>)
 80035ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01c      	beq.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe f8ab 	bl	8001714 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c0:	e011      	b.n	80035e6 <HAL_RCC_OscConfig+0x2ba>
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08007314 	.word	0x08007314
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe f89e 	bl	8001714 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e280      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e6:	4baf      	ldr	r3, [pc, #700]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2a8>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f88e 	bl	8001714 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe f88a 	bl	8001714 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e26c      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360e:	4ba5      	ldr	r3, [pc, #660]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x2d0>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d060      	beq.n	80036ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x310>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d119      	bne.n	800366a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d116      	bne.n	800366a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	4b99      	ldr	r3, [pc, #612]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x328>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e249      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b93      	ldr	r3, [pc, #588]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	4990      	ldr	r1, [pc, #576]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003668:	e040      	b.n	80036ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d023      	beq.n	80036ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003672:	4b8c      	ldr	r3, [pc, #560]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a8b      	ldr	r2, [pc, #556]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe f849 	bl	8001714 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe f845 	bl	8001714 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e227      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003698:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	497c      	ldr	r1, [pc, #496]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
 80036b8:	e018      	b.n	80036ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b7a      	ldr	r3, [pc, #488]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a79      	ldr	r2, [pc, #484]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fe f825 	bl	8001714 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fe f821 	bl	8001714 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e203      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e0:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d03c      	beq.n	8003772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01c      	beq.n	800373a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003700:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003706:	4a67      	ldr	r2, [pc, #412]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fe f800 	bl	8001714 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003718:	f7fd fffc 	bl	8001714 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e1de      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800372a:	4b5e      	ldr	r3, [pc, #376]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800372c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ef      	beq.n	8003718 <HAL_RCC_OscConfig+0x3ec>
 8003738:	e01b      	b.n	8003772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373a:	4b5a      	ldr	r3, [pc, #360]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800373c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003740:	4a58      	ldr	r2, [pc, #352]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fd ffe3 	bl	8001714 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003752:	f7fd ffdf 	bl	8001714 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1c1      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003764:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1ef      	bne.n	8003752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a6 	beq.w	80038cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003784:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003790:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	4a43      	ldr	r2, [pc, #268]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379a:	6593      	str	r3, [r2, #88]	; 0x58
 800379c:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a8:	2301      	movs	r3, #1
 80037aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ac:	4b3e      	ldr	r3, [pc, #248]	; (80038a8 <HAL_RCC_OscConfig+0x57c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d118      	bne.n	80037ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b8:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCC_OscConfig+0x57c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a3a      	ldr	r2, [pc, #232]	; (80038a8 <HAL_RCC_OscConfig+0x57c>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c4:	f7fd ffa6 	bl	8001714 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037cc:	f7fd ffa2 	bl	8001714 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e184      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037de:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_RCC_OscConfig+0x57c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d108      	bne.n	8003804 <HAL_RCC_OscConfig+0x4d8>
 80037f2:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003802:	e024      	b.n	800384e <HAL_RCC_OscConfig+0x522>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b05      	cmp	r3, #5
 800380a:	d110      	bne.n	800382e <HAL_RCC_OscConfig+0x502>
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800381c:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382c:	e00f      	b.n	800384e <HAL_RCC_OscConfig+0x522>
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383e:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003846:	f023 0304 	bic.w	r3, r3, #4
 800384a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fd ff5d 	bl	8001714 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fd ff59 	bl	8001714 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e139      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ed      	beq.n	800385e <HAL_RCC_OscConfig+0x532>
 8003882:	e01a      	b.n	80038ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fd ff46 	bl	8001714 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800388a:	e00f      	b.n	80038ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fd ff42 	bl	8001714 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d906      	bls.n	80038ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e122      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ac:	4b90      	ldr	r3, [pc, #576]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e8      	bne.n	800388c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c0:	4b8b      	ldr	r3, [pc, #556]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	4a8a      	ldr	r2, [pc, #552]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80038c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8108 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	2b02      	cmp	r3, #2
 80038dc:	f040 80d0 	bne.w	8003a80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038e0:	4b83      	ldr	r3, [pc, #524]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0203 	and.w	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d130      	bne.n	8003956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	3b01      	subs	r3, #1
 8003900:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d127      	bne.n	8003956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d11f      	bne.n	8003956 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003920:	2a07      	cmp	r2, #7
 8003922:	bf14      	ite	ne
 8003924:	2201      	movne	r2, #1
 8003926:	2200      	moveq	r2, #0
 8003928:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800392a:	4293      	cmp	r3, r2
 800392c:	d113      	bne.n	8003956 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d109      	bne.n	8003956 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	3b01      	subs	r3, #1
 8003950:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d06e      	beq.n	8003a34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b0c      	cmp	r3, #12
 800395a:	d069      	beq.n	8003a30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800395c:	4b64      	ldr	r3, [pc, #400]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003968:	4b61      	ldr	r3, [pc, #388]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0b7      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003978:	4b5d      	ldr	r3, [pc, #372]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a5c      	ldr	r2, [pc, #368]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 800397e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003984:	f7fd fec6 	bl	8001714 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fd fec2 	bl	8001714 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0a4      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800399e:	4b54      	ldr	r3, [pc, #336]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039aa:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4b51      	ldr	r3, [pc, #324]	; (8003af4 <HAL_RCC_OscConfig+0x7c8>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039ba:	3a01      	subs	r2, #1
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039c4:	0212      	lsls	r2, r2, #8
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039cc:	0852      	lsrs	r2, r2, #1
 80039ce:	3a01      	subs	r2, #1
 80039d0:	0552      	lsls	r2, r2, #21
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039d8:	0852      	lsrs	r2, r2, #1
 80039da:	3a01      	subs	r2, #1
 80039dc:	0652      	lsls	r2, r2, #25
 80039de:	4311      	orrs	r1, r2
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039e4:	0912      	lsrs	r2, r2, #4
 80039e6:	0452      	lsls	r2, r2, #17
 80039e8:	430a      	orrs	r2, r1
 80039ea:	4941      	ldr	r1, [pc, #260]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039f0:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a3e      	ldr	r2, [pc, #248]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80039f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039fc:	4b3c      	ldr	r3, [pc, #240]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a3b      	ldr	r2, [pc, #236]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a08:	f7fd fe84 	bl	8001714 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fd fe80 	bl	8001714 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e062      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a22:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a2e:	e05a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e059      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a34:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d152      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a4c:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a27      	ldr	r2, [pc, #156]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a58:	f7fd fe5c 	bl	8001714 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd fe58 	bl	8001714 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e03a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x734>
 8003a7e:	e032      	b.n	8003ae6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d02d      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a92:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003aa4:	f023 0303 	bic.w	r3, r3, #3
 8003aa8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4a10      	ldr	r2, [pc, #64]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003ab0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fe2b 	bl	8001714 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fd fe27 	bl	8001714 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e009      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCC_OscConfig+0x7c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x796>
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000
 8003af4:	f99d808c 	.word	0xf99d808c

08003af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0c8      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d910      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0207 	bic.w	r2, r3, #7
 8003b22:	4961      	ldr	r1, [pc, #388]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b0      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d04c      	beq.n	8003be2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b50:	4b56      	ldr	r3, [pc, #344]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d121      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e09e      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b68:	4b50      	ldr	r3, [pc, #320]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d115      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e092      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b80:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e086      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b90:	4b46      	ldr	r3, [pc, #280]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e07e      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba0:	4b42      	ldr	r3, [pc, #264]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 0203 	bic.w	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	493f      	ldr	r1, [pc, #252]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb2:	f7fd fdaf 	bl	8001714 <HAL_GetTick>
 8003bb6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bba:	f7fd fdab 	bl	8001714 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e066      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd0:	4b36      	ldr	r3, [pc, #216]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 020c 	and.w	r2, r3, #12
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d1eb      	bne.n	8003bba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bee:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	492c      	ldr	r1, [pc, #176]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c00:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d210      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 0207 	bic.w	r2, r3, #7
 8003c16:	4924      	ldr	r1, [pc, #144]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e036      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4918      	ldr	r1, [pc, #96]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4910      	ldr	r1, [pc, #64]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c6e:	f000 f825 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c72:	4601      	mov	r1, r0
 8003c74:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_RCC_ClockConfig+0x1b4>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	5cd3      	ldrb	r3, [r2, r3]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	fa21 f303 	lsr.w	r3, r1, r3
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fcee 	bl	8001674 <HAL_InitTick>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08007314 	.word	0x08007314
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	20000004 	.word	0x20000004

08003cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cca:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd4:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d121      	bne.n	8003d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d11e      	bne.n	8003d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cf0:	4b33      	ldr	r3, [pc, #204]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	e005      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d18:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d34:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e004      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d133      	bne.n	8003db2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d002      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0xa4>
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCC_GetSysClockFreq+0xaa>
 8003d5e:	e005      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d62:	617b      	str	r3, [r7, #20]
      break;
 8003d64:	e005      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d66:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d68:	617b      	str	r3, [r7, #20]
      break;
 8003d6a:	e002      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	617b      	str	r3, [r7, #20]
      break;
 8003d70:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	fb02 f203 	mul.w	r2, r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	0e5b      	lsrs	r3, r3, #25
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003db2:	69bb      	ldr	r3, [r7, #24]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3724      	adds	r7, #36	; 0x24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	0800732c 	.word	0x0800732c
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	007a1200 	.word	0x007a1200

08003dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000000 	.word	0x20000000

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dec:	f7ff fff0 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003df0:	4601      	mov	r1, r0
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08007324 	.word	0x08007324

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e18:	f7ff ffda 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4601      	mov	r1, r0
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0adb      	lsrs	r3, r3, #11
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	08007324 	.word	0x08007324

08003e40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e58:	f7ff fa04 	bl	8003264 <HAL_PWREx_GetVoltageRange>
 8003e5c:	6178      	str	r0, [r7, #20]
 8003e5e:	e014      	b.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e6c:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e78:	f7ff f9f4 	bl	8003264 <HAL_PWREx_GetVoltageRange>
 8003e7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e90:	d10b      	bne.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b80      	cmp	r3, #128	; 0x80
 8003e96:	d919      	bls.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e9c:	d902      	bls.n	8003ea4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e013      	b.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	e010      	b.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d902      	bls.n	8003eb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e00a      	b.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d102      	bne.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	e004      	b.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b70      	cmp	r3, #112	; 0x70
 8003ec6:	d101      	bne.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ec8:	2301      	movs	r3, #1
 8003eca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 0207 	bic.w	r2, r3, #7
 8003ed4:	4909      	ldr	r1, [pc, #36]	; (8003efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d001      	beq.n	8003eee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40022000 	.word	0x40022000

08003f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d03f      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f24:	d01c      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2a:	d802      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00e      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003f30:	e01f      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003f32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f36:	d003      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003f38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f3c:	d01c      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003f3e:	e018      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f40:	4b85      	ldr	r3, [pc, #532]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a84      	ldr	r2, [pc, #528]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f4c:	e015      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fab9 	bl	80044cc <RCCEx_PLLSAI1_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f5e:	e00c      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3320      	adds	r3, #32
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fba0 	bl	80046ac <RCCEx_PLLSAI2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f70:	e003      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	74fb      	strb	r3, [r7, #19]
      break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f80:	4b75      	ldr	r3, [pc, #468]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f8e:	4972      	ldr	r1, [pc, #456]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f96:	e001      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d03f      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb0:	d01c      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003fb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb6:	d802      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003fbc:	e01f      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003fc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fc8:	d01c      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003fca:	e018      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fcc:	4b62      	ldr	r3, [pc, #392]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a61      	ldr	r2, [pc, #388]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd8:	e015      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fa73 	bl	80044cc <RCCEx_PLLSAI1_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fea:	e00c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3320      	adds	r3, #32
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fb5a 	bl	80046ac <RCCEx_PLLSAI2_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	74fb      	strb	r3, [r7, #19]
      break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800400c:	4b52      	ldr	r3, [pc, #328]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800401a:	494f      	ldr	r1, [pc, #316]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004022:	e001      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80a0 	beq.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800403a:	4b47      	ldr	r3, [pc, #284]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b41      	ldr	r3, [pc, #260]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	4a40      	ldr	r2, [pc, #256]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405a:	6593      	str	r3, [r2, #88]	; 0x58
 800405c:	4b3e      	ldr	r3, [pc, #248]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004068:	2301      	movs	r3, #1
 800406a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800406c:	4b3b      	ldr	r3, [pc, #236]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a3a      	ldr	r2, [pc, #232]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004078:	f7fd fb4c 	bl	8001714 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800407e:	e009      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004080:	f7fd fb48 	bl	8001714 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d902      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	74fb      	strb	r3, [r7, #19]
        break;
 8004092:	e005      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004094:	4b31      	ldr	r3, [pc, #196]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d15c      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01f      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d019      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040c4:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040d0:	4b21      	ldr	r3, [pc, #132]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	4a20      	ldr	r2, [pc, #128]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004102:	f7fd fb07 	bl	8001714 <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004108:	e00b      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd fb03 	bl	8001714 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d902      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	74fb      	strb	r3, [r7, #19]
            break;
 8004120:	e006      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004122:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ec      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10c      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004146:	4904      	ldr	r1, [pc, #16]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800414e:	e009      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	74bb      	strb	r3, [r7, #18]
 8004154:	e006      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004164:	7c7b      	ldrb	r3, [r7, #17]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d105      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416a:	4b9e      	ldr	r3, [pc, #632]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	4a9d      	ldr	r2, [pc, #628]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004174:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004182:	4b98      	ldr	r3, [pc, #608]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f023 0203 	bic.w	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	4994      	ldr	r1, [pc, #592]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a4:	4b8f      	ldr	r3, [pc, #572]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f023 020c 	bic.w	r2, r3, #12
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	498c      	ldr	r1, [pc, #560]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c6:	4b87      	ldr	r3, [pc, #540]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	4983      	ldr	r1, [pc, #524]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041e8:	4b7e      	ldr	r3, [pc, #504]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	497b      	ldr	r1, [pc, #492]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800420a:	4b76      	ldr	r3, [pc, #472]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004218:	4972      	ldr	r1, [pc, #456]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800422c:	4b6d      	ldr	r3, [pc, #436]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423a:	496a      	ldr	r1, [pc, #424]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424e:	4b65      	ldr	r3, [pc, #404]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	4961      	ldr	r1, [pc, #388]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004270:	4b5c      	ldr	r3, [pc, #368]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	4959      	ldr	r1, [pc, #356]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004292:	4b54      	ldr	r3, [pc, #336]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	4950      	ldr	r1, [pc, #320]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042b4:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	4948      	ldr	r1, [pc, #288]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042d6:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	493f      	ldr	r1, [pc, #252]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d028      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f8:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004306:	4937      	ldr	r1, [pc, #220]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004316:	d106      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004318:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a31      	ldr	r2, [pc, #196]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800431e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004322:	60d3      	str	r3, [r2, #12]
 8004324:	e011      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800432e:	d10c      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	2101      	movs	r1, #1
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f8c8 	bl	80044cc <RCCEx_PLLSAI1_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d028      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004356:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	491f      	ldr	r1, [pc, #124]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004374:	d106      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800437c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004380:	60d3      	str	r3, [r2, #12]
 8004382:	e011      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f899 	bl	80044cc <RCCEx_PLLSAI1_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c2:	4908      	ldr	r1, [pc, #32]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d2:	d109      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a02      	ldr	r2, [pc, #8]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043de:	60d3      	str	r3, [r2, #12]
 80043e0:	e014      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f0:	d10c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f867 	bl	80044cc <RCCEx_PLLSAI1_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004418:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004426:	4928      	ldr	r1, [pc, #160]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004436:	d10d      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	2102      	movs	r1, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f844 	bl	80044cc <RCCEx_PLLSAI1_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d014      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	74bb      	strb	r3, [r7, #18]
 8004452:	e011      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445c:	d10c      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3320      	adds	r3, #32
 8004462:	2102      	movs	r1, #2
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f921 	bl	80046ac <RCCEx_PLLSAI2_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004492:	490d      	ldr	r1, [pc, #52]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b6:	4904      	ldr	r1, [pc, #16]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044be:	7cbb      	ldrb	r3, [r7, #18]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000

080044cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044da:	4b73      	ldr	r3, [pc, #460]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d018      	beq.n	8004518 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044e6:	4b70      	ldr	r3, [pc, #448]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0203 	and.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d10d      	bne.n	8004512 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
       ||
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044fe:	4b6a      	ldr	r3, [pc, #424]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
       ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d044      	beq.n	800459c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
 8004516:	e041      	b.n	800459c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d00c      	beq.n	800453a <RCCEx_PLLSAI1_Config+0x6e>
 8004520:	2b03      	cmp	r3, #3
 8004522:	d013      	beq.n	800454c <RCCEx_PLLSAI1_Config+0x80>
 8004524:	2b01      	cmp	r3, #1
 8004526:	d120      	bne.n	800456a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004528:	4b5f      	ldr	r3, [pc, #380]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11d      	bne.n	8004570 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004538:	e01a      	b.n	8004570 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800453a:	4b5b      	ldr	r3, [pc, #364]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004542:	2b00      	cmp	r3, #0
 8004544:	d116      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800454a:	e013      	b.n	8004574 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800454c:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10f      	bne.n	8004578 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004558:	4b53      	ldr	r3, [pc, #332]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004568:	e006      	b.n	8004578 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
      break;
 800456e:	e004      	b.n	800457a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004570:	bf00      	nop
 8004572:	e002      	b.n	800457a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004574:	bf00      	nop
 8004576:	e000      	b.n	800457a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004578:	bf00      	nop
    }

    if(status == HAL_OK)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10d      	bne.n	800459c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004580:	4b49      	ldr	r3, [pc, #292]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	3b01      	subs	r3, #1
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	430b      	orrs	r3, r1
 8004596:	4944      	ldr	r1, [pc, #272]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d17d      	bne.n	800469e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045a2:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a40      	ldr	r2, [pc, #256]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ae:	f7fd f8b1 	bl	8001714 <HAL_GetTick>
 80045b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045b4:	e009      	b.n	80045ca <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b6:	f7fd f8ad 	bl	8001714 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d902      	bls.n	80045ca <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	73fb      	strb	r3, [r7, #15]
        break;
 80045c8:	e005      	b.n	80045d6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ca:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ef      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d160      	bne.n	800469e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d111      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e2:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6892      	ldr	r2, [r2, #8]
 80045f2:	0211      	lsls	r1, r2, #8
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68d2      	ldr	r2, [r2, #12]
 80045f8:	0912      	lsrs	r2, r2, #4
 80045fa:	0452      	lsls	r2, r2, #17
 80045fc:	430a      	orrs	r2, r1
 80045fe:	492a      	ldr	r1, [pc, #168]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004600:	4313      	orrs	r3, r2
 8004602:	610b      	str	r3, [r1, #16]
 8004604:	e027      	b.n	8004656 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d112      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800460c:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6892      	ldr	r2, [r2, #8]
 800461c:	0211      	lsls	r1, r2, #8
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6912      	ldr	r2, [r2, #16]
 8004622:	0852      	lsrs	r2, r2, #1
 8004624:	3a01      	subs	r2, #1
 8004626:	0552      	lsls	r2, r2, #21
 8004628:	430a      	orrs	r2, r1
 800462a:	491f      	ldr	r1, [pc, #124]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
 8004630:	e011      	b.n	8004656 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800463a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6892      	ldr	r2, [r2, #8]
 8004642:	0211      	lsls	r1, r2, #8
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6952      	ldr	r2, [r2, #20]
 8004648:	0852      	lsrs	r2, r2, #1
 800464a:	3a01      	subs	r2, #1
 800464c:	0652      	lsls	r2, r2, #25
 800464e:	430a      	orrs	r2, r1
 8004650:	4915      	ldr	r1, [pc, #84]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004656:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800465c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004660:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004662:	f7fd f857 	bl	8001714 <HAL_GetTick>
 8004666:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004668:	e009      	b.n	800467e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800466a:	f7fd f853 	bl	8001714 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d902      	bls.n	800467e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	73fb      	strb	r3, [r7, #15]
          break;
 800467c:	e005      	b.n	800468a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ef      	beq.n	800466a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	4903      	ldr	r1, [pc, #12]	; (80046a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800469a:	4313      	orrs	r3, r2
 800469c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000

080046ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ba:	4b68      	ldr	r3, [pc, #416]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046c6:	4b65      	ldr	r3, [pc, #404]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0203 	and.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d10d      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
       ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046de:	4b5f      	ldr	r3, [pc, #380]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
       ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d044      	beq.n	800477c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
 80046f6:	e041      	b.n	800477c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d00c      	beq.n	800471a <RCCEx_PLLSAI2_Config+0x6e>
 8004700:	2b03      	cmp	r3, #3
 8004702:	d013      	beq.n	800472c <RCCEx_PLLSAI2_Config+0x80>
 8004704:	2b01      	cmp	r3, #1
 8004706:	d120      	bne.n	800474a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004708:	4b54      	ldr	r3, [pc, #336]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d11d      	bne.n	8004750 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004718:	e01a      	b.n	8004750 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800471a:	4b50      	ldr	r3, [pc, #320]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	2b00      	cmp	r3, #0
 8004724:	d116      	bne.n	8004754 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800472a:	e013      	b.n	8004754 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800472c:	4b4b      	ldr	r3, [pc, #300]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10f      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004738:	4b48      	ldr	r3, [pc, #288]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004748:	e006      	b.n	8004758 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      break;
 800474e:	e004      	b.n	800475a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004758:	bf00      	nop
    }

    if(status == HAL_OK)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10d      	bne.n	800477c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004760:	4b3e      	ldr	r3, [pc, #248]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	3b01      	subs	r3, #1
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	430b      	orrs	r3, r1
 8004776:	4939      	ldr	r1, [pc, #228]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d167      	bne.n	8004852 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a35      	ldr	r2, [pc, #212]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478e:	f7fc ffc1 	bl	8001714 <HAL_GetTick>
 8004792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004794:	e009      	b.n	80047aa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004796:	f7fc ffbd 	bl	8001714 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d902      	bls.n	80047aa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	73fb      	strb	r3, [r7, #15]
        break;
 80047a8:	e005      	b.n	80047b6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047aa:	4b2c      	ldr	r3, [pc, #176]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ef      	bne.n	8004796 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d14a      	bne.n	8004852 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d111      	bne.n	80047e6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6892      	ldr	r2, [r2, #8]
 80047d2:	0211      	lsls	r1, r2, #8
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68d2      	ldr	r2, [r2, #12]
 80047d8:	0912      	lsrs	r2, r2, #4
 80047da:	0452      	lsls	r2, r2, #17
 80047dc:	430a      	orrs	r2, r1
 80047de:	491f      	ldr	r1, [pc, #124]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	614b      	str	r3, [r1, #20]
 80047e4:	e011      	b.n	800480a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	0211      	lsls	r1, r2, #8
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6912      	ldr	r2, [r2, #16]
 80047fc:	0852      	lsrs	r2, r2, #1
 80047fe:	3a01      	subs	r2, #1
 8004800:	0652      	lsls	r2, r2, #25
 8004802:	430a      	orrs	r2, r1
 8004804:	4915      	ldr	r1, [pc, #84]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004806:	4313      	orrs	r3, r2
 8004808:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004814:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004816:	f7fc ff7d 	bl	8001714 <HAL_GetTick>
 800481a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800481c:	e009      	b.n	8004832 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800481e:	f7fc ff79 	bl	8001714 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d902      	bls.n	8004832 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	73fb      	strb	r3, [r7, #15]
          break;
 8004830:	e005      	b.n	800483e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0ef      	beq.n	800481e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <RCCEx_PLLSAI2_Config+0x1b0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000

08004860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e040      	b.n	80048f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc fdd0 	bl	8001428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8c0 	bl	8004a24 <UART_SetConfig>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e022      	b.n	80048f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fb3e 	bl	8004f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fbc5 	bl	800507c <UART_CheckIdleState>
 80048f2:	4603      	mov	r3, r0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	2b20      	cmp	r3, #32
 8004912:	f040 8081 	bne.w	8004a18 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_UART_Transmit+0x26>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e079      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_UART_Transmit+0x38>
 8004930:	2302      	movs	r3, #2
 8004932:	e072      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2221      	movs	r2, #33	; 0x21
 8004946:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004948:	f7fc fee4 	bl	8001714 <HAL_GetTick>
 800494c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d108      	bne.n	800497a <HAL_UART_Transmit+0x7e>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	e003      	b.n	8004982 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800498a:	e02d      	b.n	80049e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	2180      	movs	r1, #128	; 0x80
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fbb5 	bl	8005106 <UART_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e039      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	881a      	ldrh	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b8:	b292      	uxth	r2, r2
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	3302      	adds	r3, #2
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e008      	b.n	80049d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b292      	uxth	r2, r2
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1cb      	bne.n	800498c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb81 	bl	8005106 <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e005      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a24:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a28:	b088      	sub	sp, #32
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4bac      	ldr	r3, [pc, #688]	; (8004d04 <UART_SetConfig+0x2e0>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	69f9      	ldr	r1, [r7, #28]
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4aa2      	ldr	r2, [pc, #648]	; (8004d08 <UART_SetConfig+0x2e4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d004      	beq.n	8004a8e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a99      	ldr	r2, [pc, #612]	; (8004d0c <UART_SetConfig+0x2e8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d121      	bne.n	8004af0 <UART_SetConfig+0xcc>
 8004aac:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <UART_SetConfig+0x2ec>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d816      	bhi.n	8004ae8 <UART_SetConfig+0xc4>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x9c>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004add 	.word	0x08004add
 8004ac8:	08004ad7 	.word	0x08004ad7
 8004acc:	08004ae3 	.word	0x08004ae3
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	76fb      	strb	r3, [r7, #27]
 8004ad4:	e0e8      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	76fb      	strb	r3, [r7, #27]
 8004ada:	e0e5      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004adc:	2304      	movs	r3, #4
 8004ade:	76fb      	strb	r3, [r7, #27]
 8004ae0:	e0e2      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	76fb      	strb	r3, [r7, #27]
 8004ae6:	e0df      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	76fb      	strb	r3, [r7, #27]
 8004aec:	bf00      	nop
 8004aee:	e0db      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a87      	ldr	r2, [pc, #540]	; (8004d14 <UART_SetConfig+0x2f0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d134      	bne.n	8004b64 <UART_SetConfig+0x140>
 8004afa:	4b85      	ldr	r3, [pc, #532]	; (8004d10 <UART_SetConfig+0x2ec>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f003 030c 	and.w	r3, r3, #12
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d829      	bhi.n	8004b5c <UART_SetConfig+0x138>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0xec>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004b5d 	.word	0x08004b5d
 8004b18:	08004b5d 	.word	0x08004b5d
 8004b1c:	08004b5d 	.word	0x08004b5d
 8004b20:	08004b51 	.word	0x08004b51
 8004b24:	08004b5d 	.word	0x08004b5d
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004b5d 	.word	0x08004b5d
 8004b30:	08004b4b 	.word	0x08004b4b
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b5d 	.word	0x08004b5d
 8004b3c:	08004b5d 	.word	0x08004b5d
 8004b40:	08004b57 	.word	0x08004b57
 8004b44:	2300      	movs	r3, #0
 8004b46:	76fb      	strb	r3, [r7, #27]
 8004b48:	e0ae      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	76fb      	strb	r3, [r7, #27]
 8004b4e:	e0ab      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004b50:	2304      	movs	r3, #4
 8004b52:	76fb      	strb	r3, [r7, #27]
 8004b54:	e0a8      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004b56:	2308      	movs	r3, #8
 8004b58:	76fb      	strb	r3, [r7, #27]
 8004b5a:	e0a5      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	76fb      	strb	r3, [r7, #27]
 8004b60:	bf00      	nop
 8004b62:	e0a1      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a6b      	ldr	r2, [pc, #428]	; (8004d18 <UART_SetConfig+0x2f4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d120      	bne.n	8004bb0 <UART_SetConfig+0x18c>
 8004b6e:	4b68      	ldr	r3, [pc, #416]	; (8004d10 <UART_SetConfig+0x2ec>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d00f      	beq.n	8004b9c <UART_SetConfig+0x178>
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d802      	bhi.n	8004b86 <UART_SetConfig+0x162>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <UART_SetConfig+0x16c>
 8004b84:	e010      	b.n	8004ba8 <UART_SetConfig+0x184>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d005      	beq.n	8004b96 <UART_SetConfig+0x172>
 8004b8a:	2b30      	cmp	r3, #48	; 0x30
 8004b8c:	d009      	beq.n	8004ba2 <UART_SetConfig+0x17e>
 8004b8e:	e00b      	b.n	8004ba8 <UART_SetConfig+0x184>
 8004b90:	2300      	movs	r3, #0
 8004b92:	76fb      	strb	r3, [r7, #27]
 8004b94:	e088      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004b96:	2302      	movs	r3, #2
 8004b98:	76fb      	strb	r3, [r7, #27]
 8004b9a:	e085      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	76fb      	strb	r3, [r7, #27]
 8004ba0:	e082      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	76fb      	strb	r3, [r7, #27]
 8004ba6:	e07f      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	76fb      	strb	r3, [r7, #27]
 8004bac:	bf00      	nop
 8004bae:	e07b      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a59      	ldr	r2, [pc, #356]	; (8004d1c <UART_SetConfig+0x2f8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d120      	bne.n	8004bfc <UART_SetConfig+0x1d8>
 8004bba:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <UART_SetConfig+0x2ec>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d00f      	beq.n	8004be8 <UART_SetConfig+0x1c4>
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d802      	bhi.n	8004bd2 <UART_SetConfig+0x1ae>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <UART_SetConfig+0x1b8>
 8004bd0:	e010      	b.n	8004bf4 <UART_SetConfig+0x1d0>
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d005      	beq.n	8004be2 <UART_SetConfig+0x1be>
 8004bd6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bd8:	d009      	beq.n	8004bee <UART_SetConfig+0x1ca>
 8004bda:	e00b      	b.n	8004bf4 <UART_SetConfig+0x1d0>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	76fb      	strb	r3, [r7, #27]
 8004be0:	e062      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004be2:	2302      	movs	r3, #2
 8004be4:	76fb      	strb	r3, [r7, #27]
 8004be6:	e05f      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004be8:	2304      	movs	r3, #4
 8004bea:	76fb      	strb	r3, [r7, #27]
 8004bec:	e05c      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004bee:	2308      	movs	r3, #8
 8004bf0:	76fb      	strb	r3, [r7, #27]
 8004bf2:	e059      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	76fb      	strb	r3, [r7, #27]
 8004bf8:	bf00      	nop
 8004bfa:	e055      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <UART_SetConfig+0x2fc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d124      	bne.n	8004c50 <UART_SetConfig+0x22c>
 8004c06:	4b42      	ldr	r3, [pc, #264]	; (8004d10 <UART_SetConfig+0x2ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c14:	d012      	beq.n	8004c3c <UART_SetConfig+0x218>
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1a:	d802      	bhi.n	8004c22 <UART_SetConfig+0x1fe>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <UART_SetConfig+0x20c>
 8004c20:	e012      	b.n	8004c48 <UART_SetConfig+0x224>
 8004c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c26:	d006      	beq.n	8004c36 <UART_SetConfig+0x212>
 8004c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2c:	d009      	beq.n	8004c42 <UART_SetConfig+0x21e>
 8004c2e:	e00b      	b.n	8004c48 <UART_SetConfig+0x224>
 8004c30:	2300      	movs	r3, #0
 8004c32:	76fb      	strb	r3, [r7, #27]
 8004c34:	e038      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c36:	2302      	movs	r3, #2
 8004c38:	76fb      	strb	r3, [r7, #27]
 8004c3a:	e035      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	76fb      	strb	r3, [r7, #27]
 8004c40:	e032      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c42:	2308      	movs	r3, #8
 8004c44:	76fb      	strb	r3, [r7, #27]
 8004c46:	e02f      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	76fb      	strb	r3, [r7, #27]
 8004c4c:	bf00      	nop
 8004c4e:	e02b      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2c      	ldr	r2, [pc, #176]	; (8004d08 <UART_SetConfig+0x2e4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d124      	bne.n	8004ca4 <UART_SetConfig+0x280>
 8004c5a:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <UART_SetConfig+0x2ec>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d012      	beq.n	8004c90 <UART_SetConfig+0x26c>
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6e:	d802      	bhi.n	8004c76 <UART_SetConfig+0x252>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <UART_SetConfig+0x260>
 8004c74:	e012      	b.n	8004c9c <UART_SetConfig+0x278>
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7a:	d006      	beq.n	8004c8a <UART_SetConfig+0x266>
 8004c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c80:	d009      	beq.n	8004c96 <UART_SetConfig+0x272>
 8004c82:	e00b      	b.n	8004c9c <UART_SetConfig+0x278>
 8004c84:	2300      	movs	r3, #0
 8004c86:	76fb      	strb	r3, [r7, #27]
 8004c88:	e00e      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	76fb      	strb	r3, [r7, #27]
 8004c8e:	e00b      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c90:	2304      	movs	r3, #4
 8004c92:	76fb      	strb	r3, [r7, #27]
 8004c94:	e008      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c96:	2308      	movs	r3, #8
 8004c98:	76fb      	strb	r3, [r7, #27]
 8004c9a:	e005      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	76fb      	strb	r3, [r7, #27]
 8004ca0:	bf00      	nop
 8004ca2:	e001      	b.n	8004ca8 <UART_SetConfig+0x284>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <UART_SetConfig+0x2e4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	f040 8087 	bne.w	8004dc2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cb4:	7efb      	ldrb	r3, [r7, #27]
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d836      	bhi.n	8004d28 <UART_SetConfig+0x304>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UART_SetConfig+0x29c>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004d29 	.word	0x08004d29
 8004cd0:	08004cf3 	.word	0x08004cf3
 8004cd4:	08004d29 	.word	0x08004d29
 8004cd8:	08004d29 	.word	0x08004d29
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7ff f880 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	6178      	str	r0, [r7, #20]
        break;
 8004cea:	e022      	b.n	8004d32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <UART_SetConfig+0x300>)
 8004cee:	617b      	str	r3, [r7, #20]
        break;
 8004cf0:	e01f      	b.n	8004d32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fe ffe3 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004cf6:	6178      	str	r0, [r7, #20]
        break;
 8004cf8:	e01b      	b.n	8004d32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	617b      	str	r3, [r7, #20]
        break;
 8004d00:	e017      	b.n	8004d32 <UART_SetConfig+0x30e>
 8004d02:	bf00      	nop
 8004d04:	efff69f3 	.word	0xefff69f3
 8004d08:	40008000 	.word	0x40008000
 8004d0c:	40013800 	.word	0x40013800
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40004400 	.word	0x40004400
 8004d18:	40004800 	.word	0x40004800
 8004d1c:	40004c00 	.word	0x40004c00
 8004d20:	40005000 	.word	0x40005000
 8004d24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	76bb      	strb	r3, [r7, #26]
        break;
 8004d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80f1 	beq.w	8004f1c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4413      	add	r3, r2
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d305      	bcc.n	8004d56 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d902      	bls.n	8004d5c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	76bb      	strb	r3, [r7, #26]
 8004d5a:	e0df      	b.n	8004f1c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	f04f 0400 	mov.w	r4, #0
 8004d6c:	0214      	lsls	r4, r2, #8
 8004d6e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d72:	020b      	lsls	r3, r1, #8
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6852      	ldr	r2, [r2, #4]
 8004d78:	0852      	lsrs	r2, r2, #1
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	eb13 0b01 	adds.w	fp, r3, r1
 8004d84:	eb44 0c02 	adc.w	ip, r4, r2
 8004d88:	4658      	mov	r0, fp
 8004d8a:	4661      	mov	r1, ip
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f04f 0400 	mov.w	r4, #0
 8004d94:	461a      	mov	r2, r3
 8004d96:	4623      	mov	r3, r4
 8004d98:	f7fb ff56 	bl	8000c48 <__aeabi_uldivmod>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da8:	d308      	bcc.n	8004dbc <UART_SetConfig+0x398>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db0:	d204      	bcs.n	8004dbc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	e0af      	b.n	8004f1c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	76bb      	strb	r3, [r7, #26]
 8004dc0:	e0ac      	b.n	8004f1c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dca:	d15b      	bne.n	8004e84 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004dcc:	7efb      	ldrb	r3, [r7, #27]
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d827      	bhi.n	8004e22 <UART_SetConfig+0x3fe>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <UART_SetConfig+0x3b4>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e23 	.word	0x08004e23
 8004df0:	08004e23 	.word	0x08004e23
 8004df4:	08004e23 	.word	0x08004e23
 8004df8:	08004e1b 	.word	0x08004e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fe fff4 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004e00:	6178      	str	r0, [r7, #20]
        break;
 8004e02:	e013      	b.n	8004e2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7ff f806 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004e08:	6178      	str	r0, [r7, #20]
        break;
 8004e0a:	e00f      	b.n	8004e2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e0c:	4b49      	ldr	r3, [pc, #292]	; (8004f34 <UART_SetConfig+0x510>)
 8004e0e:	617b      	str	r3, [r7, #20]
        break;
 8004e10:	e00c      	b.n	8004e2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e12:	f7fe ff53 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004e16:	6178      	str	r0, [r7, #20]
        break;
 8004e18:	e008      	b.n	8004e2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1e:	617b      	str	r3, [r7, #20]
        break;
 8004e20:	e004      	b.n	8004e2c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	76bb      	strb	r3, [r7, #26]
        break;
 8004e2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d074      	beq.n	8004f1c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	005a      	lsls	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b0f      	cmp	r3, #15
 8004e4e:	d916      	bls.n	8004e7e <UART_SetConfig+0x45a>
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e56:	d212      	bcs.n	8004e7e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f023 030f 	bic.w	r3, r3, #15
 8004e60:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	89fb      	ldrh	r3, [r7, #14]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	89fa      	ldrh	r2, [r7, #14]
 8004e7a:	60da      	str	r2, [r3, #12]
 8004e7c:	e04e      	b.n	8004f1c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	76bb      	strb	r3, [r7, #26]
 8004e82:	e04b      	b.n	8004f1c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e84:	7efb      	ldrb	r3, [r7, #27]
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d827      	bhi.n	8004eda <UART_SetConfig+0x4b6>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0x46c>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	08004edb 	.word	0x08004edb
 8004ea0:	08004ecb 	.word	0x08004ecb
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004edb 	.word	0x08004edb
 8004eac:	08004edb 	.word	0x08004edb
 8004eb0:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f7fe ff98 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004eb8:	6178      	str	r0, [r7, #20]
        break;
 8004eba:	e013      	b.n	8004ee4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fe ffaa 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004ec0:	6178      	str	r0, [r7, #20]
        break;
 8004ec2:	e00f      	b.n	8004ee4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <UART_SetConfig+0x510>)
 8004ec6:	617b      	str	r3, [r7, #20]
        break;
 8004ec8:	e00c      	b.n	8004ee4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fe fef7 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8004ece:	6178      	str	r0, [r7, #20]
        break;
 8004ed0:	e008      	b.n	8004ee4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	617b      	str	r3, [r7, #20]
        break;
 8004ed8:	e004      	b.n	8004ee4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	76bb      	strb	r3, [r7, #26]
        break;
 8004ee2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d018      	beq.n	8004f1c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	085a      	lsrs	r2, r3, #1
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	441a      	add	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d908      	bls.n	8004f18 <UART_SetConfig+0x4f4>
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d204      	bcs.n	8004f18 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	e001      	b.n	8004f1c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f28:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004f34:	00f42400 	.word	0x00f42400

08004f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01a      	beq.n	800504e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005036:	d10a      	bne.n	800504e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af02      	add	r7, sp, #8
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800508a:	f7fc fb43 	bl	8001714 <HAL_GetTick>
 800508e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b08      	cmp	r3, #8
 800509c:	d10e      	bne.n	80050bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f82a 	bl	8005106 <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e020      	b.n	80050fe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d10e      	bne.n	80050e8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f814 	bl	8005106 <UART_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e00a      	b.n	80050fe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005116:	e05d      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800511e:	d059      	beq.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005120:	f7fc faf8 	bl	8001714 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <UART_WaitOnFlagUntilTimeout+0x30>
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d11b      	bne.n	800516e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005144:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e042      	b.n	80051f4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02b      	beq.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518a:	d123      	bne.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005194:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e00f      	b.n	80051f4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69da      	ldr	r2, [r3, #28]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4013      	ands	r3, r2
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d092      	beq.n	8005118 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <__errno>:
 80051fc:	4b01      	ldr	r3, [pc, #4]	; (8005204 <__errno+0x8>)
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	2000000c 	.word	0x2000000c

08005208 <__libc_init_array>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	4e0d      	ldr	r6, [pc, #52]	; (8005240 <__libc_init_array+0x38>)
 800520c:	4c0d      	ldr	r4, [pc, #52]	; (8005244 <__libc_init_array+0x3c>)
 800520e:	1ba4      	subs	r4, r4, r6
 8005210:	10a4      	asrs	r4, r4, #2
 8005212:	2500      	movs	r5, #0
 8005214:	42a5      	cmp	r5, r4
 8005216:	d109      	bne.n	800522c <__libc_init_array+0x24>
 8005218:	4e0b      	ldr	r6, [pc, #44]	; (8005248 <__libc_init_array+0x40>)
 800521a:	4c0c      	ldr	r4, [pc, #48]	; (800524c <__libc_init_array+0x44>)
 800521c:	f002 f85c 	bl	80072d8 <_init>
 8005220:	1ba4      	subs	r4, r4, r6
 8005222:	10a4      	asrs	r4, r4, #2
 8005224:	2500      	movs	r5, #0
 8005226:	42a5      	cmp	r5, r4
 8005228:	d105      	bne.n	8005236 <__libc_init_array+0x2e>
 800522a:	bd70      	pop	{r4, r5, r6, pc}
 800522c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005230:	4798      	blx	r3
 8005232:	3501      	adds	r5, #1
 8005234:	e7ee      	b.n	8005214 <__libc_init_array+0xc>
 8005236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800523a:	4798      	blx	r3
 800523c:	3501      	adds	r5, #1
 800523e:	e7f2      	b.n	8005226 <__libc_init_array+0x1e>
 8005240:	080075c0 	.word	0x080075c0
 8005244:	080075c0 	.word	0x080075c0
 8005248:	080075c0 	.word	0x080075c0
 800524c:	080075c4 	.word	0x080075c4

08005250 <memset>:
 8005250:	4402      	add	r2, r0
 8005252:	4603      	mov	r3, r0
 8005254:	4293      	cmp	r3, r2
 8005256:	d100      	bne.n	800525a <memset+0xa>
 8005258:	4770      	bx	lr
 800525a:	f803 1b01 	strb.w	r1, [r3], #1
 800525e:	e7f9      	b.n	8005254 <memset+0x4>

08005260 <__cvt>:
 8005260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	ec55 4b10 	vmov	r4, r5, d0
 8005268:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800526a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800526e:	2d00      	cmp	r5, #0
 8005270:	460e      	mov	r6, r1
 8005272:	4691      	mov	r9, r2
 8005274:	4619      	mov	r1, r3
 8005276:	bfb8      	it	lt
 8005278:	4622      	movlt	r2, r4
 800527a:	462b      	mov	r3, r5
 800527c:	f027 0720 	bic.w	r7, r7, #32
 8005280:	bfbb      	ittet	lt
 8005282:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005286:	461d      	movlt	r5, r3
 8005288:	2300      	movge	r3, #0
 800528a:	232d      	movlt	r3, #45	; 0x2d
 800528c:	bfb8      	it	lt
 800528e:	4614      	movlt	r4, r2
 8005290:	2f46      	cmp	r7, #70	; 0x46
 8005292:	700b      	strb	r3, [r1, #0]
 8005294:	d004      	beq.n	80052a0 <__cvt+0x40>
 8005296:	2f45      	cmp	r7, #69	; 0x45
 8005298:	d100      	bne.n	800529c <__cvt+0x3c>
 800529a:	3601      	adds	r6, #1
 800529c:	2102      	movs	r1, #2
 800529e:	e000      	b.n	80052a2 <__cvt+0x42>
 80052a0:	2103      	movs	r1, #3
 80052a2:	ab03      	add	r3, sp, #12
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	ab02      	add	r3, sp, #8
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4632      	mov	r2, r6
 80052ac:	4653      	mov	r3, sl
 80052ae:	ec45 4b10 	vmov	d0, r4, r5
 80052b2:	f000 fcdd 	bl	8005c70 <_dtoa_r>
 80052b6:	2f47      	cmp	r7, #71	; 0x47
 80052b8:	4680      	mov	r8, r0
 80052ba:	d102      	bne.n	80052c2 <__cvt+0x62>
 80052bc:	f019 0f01 	tst.w	r9, #1
 80052c0:	d026      	beq.n	8005310 <__cvt+0xb0>
 80052c2:	2f46      	cmp	r7, #70	; 0x46
 80052c4:	eb08 0906 	add.w	r9, r8, r6
 80052c8:	d111      	bne.n	80052ee <__cvt+0x8e>
 80052ca:	f898 3000 	ldrb.w	r3, [r8]
 80052ce:	2b30      	cmp	r3, #48	; 0x30
 80052d0:	d10a      	bne.n	80052e8 <__cvt+0x88>
 80052d2:	2200      	movs	r2, #0
 80052d4:	2300      	movs	r3, #0
 80052d6:	4620      	mov	r0, r4
 80052d8:	4629      	mov	r1, r5
 80052da:	f7fb fbf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80052de:	b918      	cbnz	r0, 80052e8 <__cvt+0x88>
 80052e0:	f1c6 0601 	rsb	r6, r6, #1
 80052e4:	f8ca 6000 	str.w	r6, [sl]
 80052e8:	f8da 3000 	ldr.w	r3, [sl]
 80052ec:	4499      	add	r9, r3
 80052ee:	2200      	movs	r2, #0
 80052f0:	2300      	movs	r3, #0
 80052f2:	4620      	mov	r0, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	f7fb fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80052fa:	b938      	cbnz	r0, 800530c <__cvt+0xac>
 80052fc:	2230      	movs	r2, #48	; 0x30
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	454b      	cmp	r3, r9
 8005302:	d205      	bcs.n	8005310 <__cvt+0xb0>
 8005304:	1c59      	adds	r1, r3, #1
 8005306:	9103      	str	r1, [sp, #12]
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e7f8      	b.n	80052fe <__cvt+0x9e>
 800530c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005310:	9b03      	ldr	r3, [sp, #12]
 8005312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005314:	eba3 0308 	sub.w	r3, r3, r8
 8005318:	4640      	mov	r0, r8
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	b004      	add	sp, #16
 800531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005322 <__exponent>:
 8005322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005324:	2900      	cmp	r1, #0
 8005326:	4604      	mov	r4, r0
 8005328:	bfba      	itte	lt
 800532a:	4249      	neglt	r1, r1
 800532c:	232d      	movlt	r3, #45	; 0x2d
 800532e:	232b      	movge	r3, #43	; 0x2b
 8005330:	2909      	cmp	r1, #9
 8005332:	f804 2b02 	strb.w	r2, [r4], #2
 8005336:	7043      	strb	r3, [r0, #1]
 8005338:	dd20      	ble.n	800537c <__exponent+0x5a>
 800533a:	f10d 0307 	add.w	r3, sp, #7
 800533e:	461f      	mov	r7, r3
 8005340:	260a      	movs	r6, #10
 8005342:	fb91 f5f6 	sdiv	r5, r1, r6
 8005346:	fb06 1115 	mls	r1, r6, r5, r1
 800534a:	3130      	adds	r1, #48	; 0x30
 800534c:	2d09      	cmp	r5, #9
 800534e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005352:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005356:	4629      	mov	r1, r5
 8005358:	dc09      	bgt.n	800536e <__exponent+0x4c>
 800535a:	3130      	adds	r1, #48	; 0x30
 800535c:	3b02      	subs	r3, #2
 800535e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005362:	42bb      	cmp	r3, r7
 8005364:	4622      	mov	r2, r4
 8005366:	d304      	bcc.n	8005372 <__exponent+0x50>
 8005368:	1a10      	subs	r0, r2, r0
 800536a:	b003      	add	sp, #12
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536e:	4613      	mov	r3, r2
 8005370:	e7e7      	b.n	8005342 <__exponent+0x20>
 8005372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005376:	f804 2b01 	strb.w	r2, [r4], #1
 800537a:	e7f2      	b.n	8005362 <__exponent+0x40>
 800537c:	2330      	movs	r3, #48	; 0x30
 800537e:	4419      	add	r1, r3
 8005380:	7083      	strb	r3, [r0, #2]
 8005382:	1d02      	adds	r2, r0, #4
 8005384:	70c1      	strb	r1, [r0, #3]
 8005386:	e7ef      	b.n	8005368 <__exponent+0x46>

08005388 <_printf_float>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	b08d      	sub	sp, #52	; 0x34
 800538e:	460c      	mov	r4, r1
 8005390:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005394:	4616      	mov	r6, r2
 8005396:	461f      	mov	r7, r3
 8005398:	4605      	mov	r5, r0
 800539a:	f001 fa21 	bl	80067e0 <_localeconv_r>
 800539e:	6803      	ldr	r3, [r0, #0]
 80053a0:	9304      	str	r3, [sp, #16]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fa ff14 	bl	80001d0 <strlen>
 80053a8:	2300      	movs	r3, #0
 80053aa:	930a      	str	r3, [sp, #40]	; 0x28
 80053ac:	f8d8 3000 	ldr.w	r3, [r8]
 80053b0:	9005      	str	r0, [sp, #20]
 80053b2:	3307      	adds	r3, #7
 80053b4:	f023 0307 	bic.w	r3, r3, #7
 80053b8:	f103 0208 	add.w	r2, r3, #8
 80053bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053c0:	f8d4 b000 	ldr.w	fp, [r4]
 80053c4:	f8c8 2000 	str.w	r2, [r8]
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053d8:	9307      	str	r3, [sp, #28]
 80053da:	f8cd 8018 	str.w	r8, [sp, #24]
 80053de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053e2:	4ba7      	ldr	r3, [pc, #668]	; (8005680 <_printf_float+0x2f8>)
 80053e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053e8:	f7fb fba0 	bl	8000b2c <__aeabi_dcmpun>
 80053ec:	bb70      	cbnz	r0, 800544c <_printf_float+0xc4>
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053f2:	4ba3      	ldr	r3, [pc, #652]	; (8005680 <_printf_float+0x2f8>)
 80053f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f8:	f7fb fb7a 	bl	8000af0 <__aeabi_dcmple>
 80053fc:	bb30      	cbnz	r0, 800544c <_printf_float+0xc4>
 80053fe:	2200      	movs	r2, #0
 8005400:	2300      	movs	r3, #0
 8005402:	4640      	mov	r0, r8
 8005404:	4649      	mov	r1, r9
 8005406:	f7fb fb69 	bl	8000adc <__aeabi_dcmplt>
 800540a:	b110      	cbz	r0, 8005412 <_printf_float+0x8a>
 800540c:	232d      	movs	r3, #45	; 0x2d
 800540e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005412:	4a9c      	ldr	r2, [pc, #624]	; (8005684 <_printf_float+0x2fc>)
 8005414:	4b9c      	ldr	r3, [pc, #624]	; (8005688 <_printf_float+0x300>)
 8005416:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800541a:	bf8c      	ite	hi
 800541c:	4690      	movhi	r8, r2
 800541e:	4698      	movls	r8, r3
 8005420:	2303      	movs	r3, #3
 8005422:	f02b 0204 	bic.w	r2, fp, #4
 8005426:	6123      	str	r3, [r4, #16]
 8005428:	6022      	str	r2, [r4, #0]
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	9700      	str	r7, [sp, #0]
 8005430:	4633      	mov	r3, r6
 8005432:	aa0b      	add	r2, sp, #44	; 0x2c
 8005434:	4621      	mov	r1, r4
 8005436:	4628      	mov	r0, r5
 8005438:	f000 f9e6 	bl	8005808 <_printf_common>
 800543c:	3001      	adds	r0, #1
 800543e:	f040 808d 	bne.w	800555c <_printf_float+0x1d4>
 8005442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005446:	b00d      	add	sp, #52	; 0x34
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	4640      	mov	r0, r8
 8005452:	4649      	mov	r1, r9
 8005454:	f7fb fb6a 	bl	8000b2c <__aeabi_dcmpun>
 8005458:	b110      	cbz	r0, 8005460 <_printf_float+0xd8>
 800545a:	4a8c      	ldr	r2, [pc, #560]	; (800568c <_printf_float+0x304>)
 800545c:	4b8c      	ldr	r3, [pc, #560]	; (8005690 <_printf_float+0x308>)
 800545e:	e7da      	b.n	8005416 <_printf_float+0x8e>
 8005460:	6861      	ldr	r1, [r4, #4]
 8005462:	1c4b      	adds	r3, r1, #1
 8005464:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005468:	a80a      	add	r0, sp, #40	; 0x28
 800546a:	d13e      	bne.n	80054ea <_printf_float+0x162>
 800546c:	2306      	movs	r3, #6
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	2300      	movs	r3, #0
 8005472:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005476:	ab09      	add	r3, sp, #36	; 0x24
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	ec49 8b10 	vmov	d0, r8, r9
 800547e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	f8cd a004 	str.w	sl, [sp, #4]
 8005488:	6861      	ldr	r1, [r4, #4]
 800548a:	4628      	mov	r0, r5
 800548c:	f7ff fee8 	bl	8005260 <__cvt>
 8005490:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005494:	2b47      	cmp	r3, #71	; 0x47
 8005496:	4680      	mov	r8, r0
 8005498:	d109      	bne.n	80054ae <_printf_float+0x126>
 800549a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549c:	1cd8      	adds	r0, r3, #3
 800549e:	db02      	blt.n	80054a6 <_printf_float+0x11e>
 80054a0:	6862      	ldr	r2, [r4, #4]
 80054a2:	4293      	cmp	r3, r2
 80054a4:	dd47      	ble.n	8005536 <_printf_float+0x1ae>
 80054a6:	f1aa 0a02 	sub.w	sl, sl, #2
 80054aa:	fa5f fa8a 	uxtb.w	sl, sl
 80054ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054b4:	d824      	bhi.n	8005500 <_printf_float+0x178>
 80054b6:	3901      	subs	r1, #1
 80054b8:	4652      	mov	r2, sl
 80054ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054be:	9109      	str	r1, [sp, #36]	; 0x24
 80054c0:	f7ff ff2f 	bl	8005322 <__exponent>
 80054c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054c6:	1813      	adds	r3, r2, r0
 80054c8:	2a01      	cmp	r2, #1
 80054ca:	4681      	mov	r9, r0
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	dc02      	bgt.n	80054d6 <_printf_float+0x14e>
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	07d1      	lsls	r1, r2, #31
 80054d4:	d501      	bpl.n	80054da <_printf_float+0x152>
 80054d6:	3301      	adds	r3, #1
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0a5      	beq.n	800542e <_printf_float+0xa6>
 80054e2:	232d      	movs	r3, #45	; 0x2d
 80054e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e8:	e7a1      	b.n	800542e <_printf_float+0xa6>
 80054ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80054ee:	f000 8177 	beq.w	80057e0 <_printf_float+0x458>
 80054f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80054f6:	d1bb      	bne.n	8005470 <_printf_float+0xe8>
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d1b9      	bne.n	8005470 <_printf_float+0xe8>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e7b6      	b.n	800546e <_printf_float+0xe6>
 8005500:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005504:	d119      	bne.n	800553a <_printf_float+0x1b2>
 8005506:	2900      	cmp	r1, #0
 8005508:	6863      	ldr	r3, [r4, #4]
 800550a:	dd0c      	ble.n	8005526 <_printf_float+0x19e>
 800550c:	6121      	str	r1, [r4, #16]
 800550e:	b913      	cbnz	r3, 8005516 <_printf_float+0x18e>
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	07d2      	lsls	r2, r2, #31
 8005514:	d502      	bpl.n	800551c <_printf_float+0x194>
 8005516:	3301      	adds	r3, #1
 8005518:	440b      	add	r3, r1
 800551a:	6123      	str	r3, [r4, #16]
 800551c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800551e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005520:	f04f 0900 	mov.w	r9, #0
 8005524:	e7d9      	b.n	80054da <_printf_float+0x152>
 8005526:	b913      	cbnz	r3, 800552e <_printf_float+0x1a6>
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	07d0      	lsls	r0, r2, #31
 800552c:	d501      	bpl.n	8005532 <_printf_float+0x1aa>
 800552e:	3302      	adds	r3, #2
 8005530:	e7f3      	b.n	800551a <_printf_float+0x192>
 8005532:	2301      	movs	r3, #1
 8005534:	e7f1      	b.n	800551a <_printf_float+0x192>
 8005536:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800553a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800553e:	4293      	cmp	r3, r2
 8005540:	db05      	blt.n	800554e <_printf_float+0x1c6>
 8005542:	6822      	ldr	r2, [r4, #0]
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	07d1      	lsls	r1, r2, #31
 8005548:	d5e8      	bpl.n	800551c <_printf_float+0x194>
 800554a:	3301      	adds	r3, #1
 800554c:	e7e5      	b.n	800551a <_printf_float+0x192>
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfd4      	ite	le
 8005552:	f1c3 0302 	rsble	r3, r3, #2
 8005556:	2301      	movgt	r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	e7de      	b.n	800551a <_printf_float+0x192>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	055a      	lsls	r2, r3, #21
 8005560:	d407      	bmi.n	8005572 <_printf_float+0x1ea>
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	4642      	mov	r2, r8
 8005566:	4631      	mov	r1, r6
 8005568:	4628      	mov	r0, r5
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	d12b      	bne.n	80055c8 <_printf_float+0x240>
 8005570:	e767      	b.n	8005442 <_printf_float+0xba>
 8005572:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005576:	f240 80dc 	bls.w	8005732 <_printf_float+0x3aa>
 800557a:	2200      	movs	r2, #0
 800557c:	2300      	movs	r3, #0
 800557e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005582:	f7fb faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005586:	2800      	cmp	r0, #0
 8005588:	d033      	beq.n	80055f2 <_printf_float+0x26a>
 800558a:	2301      	movs	r3, #1
 800558c:	4a41      	ldr	r2, [pc, #260]	; (8005694 <_printf_float+0x30c>)
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	f43f af54 	beq.w	8005442 <_printf_float+0xba>
 800559a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800559e:	429a      	cmp	r2, r3
 80055a0:	db02      	blt.n	80055a8 <_printf_float+0x220>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	07d8      	lsls	r0, r3, #31
 80055a6:	d50f      	bpl.n	80055c8 <_printf_float+0x240>
 80055a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f af45 	beq.w	8005442 <_printf_float+0xba>
 80055b8:	f04f 0800 	mov.w	r8, #0
 80055bc:	f104 091a 	add.w	r9, r4, #26
 80055c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c2:	3b01      	subs	r3, #1
 80055c4:	4543      	cmp	r3, r8
 80055c6:	dc09      	bgt.n	80055dc <_printf_float+0x254>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	079b      	lsls	r3, r3, #30
 80055cc:	f100 8103 	bmi.w	80057d6 <_printf_float+0x44e>
 80055d0:	68e0      	ldr	r0, [r4, #12]
 80055d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d4:	4298      	cmp	r0, r3
 80055d6:	bfb8      	it	lt
 80055d8:	4618      	movlt	r0, r3
 80055da:	e734      	b.n	8005446 <_printf_float+0xbe>
 80055dc:	2301      	movs	r3, #1
 80055de:	464a      	mov	r2, r9
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	f43f af2b 	beq.w	8005442 <_printf_float+0xba>
 80055ec:	f108 0801 	add.w	r8, r8, #1
 80055f0:	e7e6      	b.n	80055c0 <_printf_float+0x238>
 80055f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	dc2b      	bgt.n	8005650 <_printf_float+0x2c8>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4a26      	ldr	r2, [pc, #152]	; (8005694 <_printf_float+0x30c>)
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	47b8      	blx	r7
 8005602:	3001      	adds	r0, #1
 8005604:	f43f af1d 	beq.w	8005442 <_printf_float+0xba>
 8005608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560a:	b923      	cbnz	r3, 8005616 <_printf_float+0x28e>
 800560c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560e:	b913      	cbnz	r3, 8005616 <_printf_float+0x28e>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	07d9      	lsls	r1, r3, #31
 8005614:	d5d8      	bpl.n	80055c8 <_printf_float+0x240>
 8005616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	47b8      	blx	r7
 8005620:	3001      	adds	r0, #1
 8005622:	f43f af0e 	beq.w	8005442 <_printf_float+0xba>
 8005626:	f04f 0900 	mov.w	r9, #0
 800562a:	f104 0a1a 	add.w	sl, r4, #26
 800562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005630:	425b      	negs	r3, r3
 8005632:	454b      	cmp	r3, r9
 8005634:	dc01      	bgt.n	800563a <_printf_float+0x2b2>
 8005636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005638:	e794      	b.n	8005564 <_printf_float+0x1dc>
 800563a:	2301      	movs	r3, #1
 800563c:	4652      	mov	r2, sl
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	f43f aefc 	beq.w	8005442 <_printf_float+0xba>
 800564a:	f109 0901 	add.w	r9, r9, #1
 800564e:	e7ee      	b.n	800562e <_printf_float+0x2a6>
 8005650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005652:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005654:	429a      	cmp	r2, r3
 8005656:	bfa8      	it	ge
 8005658:	461a      	movge	r2, r3
 800565a:	2a00      	cmp	r2, #0
 800565c:	4691      	mov	r9, r2
 800565e:	dd07      	ble.n	8005670 <_printf_float+0x2e8>
 8005660:	4613      	mov	r3, r2
 8005662:	4631      	mov	r1, r6
 8005664:	4642      	mov	r2, r8
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	f43f aee9 	beq.w	8005442 <_printf_float+0xba>
 8005670:	f104 031a 	add.w	r3, r4, #26
 8005674:	f04f 0b00 	mov.w	fp, #0
 8005678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800567c:	9306      	str	r3, [sp, #24]
 800567e:	e015      	b.n	80056ac <_printf_float+0x324>
 8005680:	7fefffff 	.word	0x7fefffff
 8005684:	08007360 	.word	0x08007360
 8005688:	0800735c 	.word	0x0800735c
 800568c:	08007368 	.word	0x08007368
 8005690:	08007364 	.word	0x08007364
 8005694:	0800736c 	.word	0x0800736c
 8005698:	2301      	movs	r3, #1
 800569a:	9a06      	ldr	r2, [sp, #24]
 800569c:	4631      	mov	r1, r6
 800569e:	4628      	mov	r0, r5
 80056a0:	47b8      	blx	r7
 80056a2:	3001      	adds	r0, #1
 80056a4:	f43f aecd 	beq.w	8005442 <_printf_float+0xba>
 80056a8:	f10b 0b01 	add.w	fp, fp, #1
 80056ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80056b0:	ebaa 0309 	sub.w	r3, sl, r9
 80056b4:	455b      	cmp	r3, fp
 80056b6:	dcef      	bgt.n	8005698 <_printf_float+0x310>
 80056b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056bc:	429a      	cmp	r2, r3
 80056be:	44d0      	add	r8, sl
 80056c0:	db15      	blt.n	80056ee <_printf_float+0x366>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	07da      	lsls	r2, r3, #31
 80056c6:	d412      	bmi.n	80056ee <_printf_float+0x366>
 80056c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056cc:	eba3 020a 	sub.w	r2, r3, sl
 80056d0:	eba3 0a01 	sub.w	sl, r3, r1
 80056d4:	4592      	cmp	sl, r2
 80056d6:	bfa8      	it	ge
 80056d8:	4692      	movge	sl, r2
 80056da:	f1ba 0f00 	cmp.w	sl, #0
 80056de:	dc0e      	bgt.n	80056fe <_printf_float+0x376>
 80056e0:	f04f 0800 	mov.w	r8, #0
 80056e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056e8:	f104 091a 	add.w	r9, r4, #26
 80056ec:	e019      	b.n	8005722 <_printf_float+0x39a>
 80056ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f2:	4631      	mov	r1, r6
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	d1e5      	bne.n	80056c8 <_printf_float+0x340>
 80056fc:	e6a1      	b.n	8005442 <_printf_float+0xba>
 80056fe:	4653      	mov	r3, sl
 8005700:	4642      	mov	r2, r8
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	d1e9      	bne.n	80056e0 <_printf_float+0x358>
 800570c:	e699      	b.n	8005442 <_printf_float+0xba>
 800570e:	2301      	movs	r3, #1
 8005710:	464a      	mov	r2, r9
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f ae92 	beq.w	8005442 <_printf_float+0xba>
 800571e:	f108 0801 	add.w	r8, r8, #1
 8005722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	eba3 030a 	sub.w	r3, r3, sl
 800572c:	4543      	cmp	r3, r8
 800572e:	dcee      	bgt.n	800570e <_printf_float+0x386>
 8005730:	e74a      	b.n	80055c8 <_printf_float+0x240>
 8005732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005734:	2a01      	cmp	r2, #1
 8005736:	dc01      	bgt.n	800573c <_printf_float+0x3b4>
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d53a      	bpl.n	80057b2 <_printf_float+0x42a>
 800573c:	2301      	movs	r3, #1
 800573e:	4642      	mov	r2, r8
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f ae7b 	beq.w	8005442 <_printf_float+0xba>
 800574c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	f108 0801 	add.w	r8, r8, #1
 800575c:	f43f ae71 	beq.w	8005442 <_printf_float+0xba>
 8005760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005762:	2200      	movs	r2, #0
 8005764:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800576c:	2300      	movs	r3, #0
 800576e:	f7fb f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005772:	b9c8      	cbnz	r0, 80057a8 <_printf_float+0x420>
 8005774:	4653      	mov	r3, sl
 8005776:	4642      	mov	r2, r8
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	d10e      	bne.n	80057a0 <_printf_float+0x418>
 8005782:	e65e      	b.n	8005442 <_printf_float+0xba>
 8005784:	2301      	movs	r3, #1
 8005786:	4652      	mov	r2, sl
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	f43f ae57 	beq.w	8005442 <_printf_float+0xba>
 8005794:	f108 0801 	add.w	r8, r8, #1
 8005798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	4543      	cmp	r3, r8
 800579e:	dcf1      	bgt.n	8005784 <_printf_float+0x3fc>
 80057a0:	464b      	mov	r3, r9
 80057a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057a6:	e6de      	b.n	8005566 <_printf_float+0x1de>
 80057a8:	f04f 0800 	mov.w	r8, #0
 80057ac:	f104 0a1a 	add.w	sl, r4, #26
 80057b0:	e7f2      	b.n	8005798 <_printf_float+0x410>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e7df      	b.n	8005776 <_printf_float+0x3ee>
 80057b6:	2301      	movs	r3, #1
 80057b8:	464a      	mov	r2, r9
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f ae3e 	beq.w	8005442 <_printf_float+0xba>
 80057c6:	f108 0801 	add.w	r8, r8, #1
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	4543      	cmp	r3, r8
 80057d2:	dcf0      	bgt.n	80057b6 <_printf_float+0x42e>
 80057d4:	e6fc      	b.n	80055d0 <_printf_float+0x248>
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	f104 0919 	add.w	r9, r4, #25
 80057de:	e7f4      	b.n	80057ca <_printf_float+0x442>
 80057e0:	2900      	cmp	r1, #0
 80057e2:	f43f ae8b 	beq.w	80054fc <_printf_float+0x174>
 80057e6:	2300      	movs	r3, #0
 80057e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80057ec:	ab09      	add	r3, sp, #36	; 0x24
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	ec49 8b10 	vmov	d0, r8, r9
 80057f4:	6022      	str	r2, [r4, #0]
 80057f6:	f8cd a004 	str.w	sl, [sp, #4]
 80057fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057fe:	4628      	mov	r0, r5
 8005800:	f7ff fd2e 	bl	8005260 <__cvt>
 8005804:	4680      	mov	r8, r0
 8005806:	e648      	b.n	800549a <_printf_float+0x112>

08005808 <_printf_common>:
 8005808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	4691      	mov	r9, r2
 800580e:	461f      	mov	r7, r3
 8005810:	688a      	ldr	r2, [r1, #8]
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005818:	4293      	cmp	r3, r2
 800581a:	bfb8      	it	lt
 800581c:	4613      	movlt	r3, r2
 800581e:	f8c9 3000 	str.w	r3, [r9]
 8005822:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005826:	4606      	mov	r6, r0
 8005828:	460c      	mov	r4, r1
 800582a:	b112      	cbz	r2, 8005832 <_printf_common+0x2a>
 800582c:	3301      	adds	r3, #1
 800582e:	f8c9 3000 	str.w	r3, [r9]
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	0699      	lsls	r1, r3, #26
 8005836:	bf42      	ittt	mi
 8005838:	f8d9 3000 	ldrmi.w	r3, [r9]
 800583c:	3302      	addmi	r3, #2
 800583e:	f8c9 3000 	strmi.w	r3, [r9]
 8005842:	6825      	ldr	r5, [r4, #0]
 8005844:	f015 0506 	ands.w	r5, r5, #6
 8005848:	d107      	bne.n	800585a <_printf_common+0x52>
 800584a:	f104 0a19 	add.w	sl, r4, #25
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	f8d9 2000 	ldr.w	r2, [r9]
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	42ab      	cmp	r3, r5
 8005858:	dc28      	bgt.n	80058ac <_printf_common+0xa4>
 800585a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	3300      	adds	r3, #0
 8005862:	bf18      	it	ne
 8005864:	2301      	movne	r3, #1
 8005866:	0692      	lsls	r2, r2, #26
 8005868:	d42d      	bmi.n	80058c6 <_printf_common+0xbe>
 800586a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800586e:	4639      	mov	r1, r7
 8005870:	4630      	mov	r0, r6
 8005872:	47c0      	blx	r8
 8005874:	3001      	adds	r0, #1
 8005876:	d020      	beq.n	80058ba <_printf_common+0xb2>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	68e5      	ldr	r5, [r4, #12]
 800587c:	f8d9 2000 	ldr.w	r2, [r9]
 8005880:	f003 0306 	and.w	r3, r3, #6
 8005884:	2b04      	cmp	r3, #4
 8005886:	bf08      	it	eq
 8005888:	1aad      	subeq	r5, r5, r2
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	6922      	ldr	r2, [r4, #16]
 800588e:	bf0c      	ite	eq
 8005890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005894:	2500      	movne	r5, #0
 8005896:	4293      	cmp	r3, r2
 8005898:	bfc4      	itt	gt
 800589a:	1a9b      	subgt	r3, r3, r2
 800589c:	18ed      	addgt	r5, r5, r3
 800589e:	f04f 0900 	mov.w	r9, #0
 80058a2:	341a      	adds	r4, #26
 80058a4:	454d      	cmp	r5, r9
 80058a6:	d11a      	bne.n	80058de <_printf_common+0xd6>
 80058a8:	2000      	movs	r0, #0
 80058aa:	e008      	b.n	80058be <_printf_common+0xb6>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4652      	mov	r2, sl
 80058b0:	4639      	mov	r1, r7
 80058b2:	4630      	mov	r0, r6
 80058b4:	47c0      	blx	r8
 80058b6:	3001      	adds	r0, #1
 80058b8:	d103      	bne.n	80058c2 <_printf_common+0xba>
 80058ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c2:	3501      	adds	r5, #1
 80058c4:	e7c3      	b.n	800584e <_printf_common+0x46>
 80058c6:	18e1      	adds	r1, r4, r3
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	2030      	movs	r0, #48	; 0x30
 80058cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058d0:	4422      	add	r2, r4
 80058d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058da:	3302      	adds	r3, #2
 80058dc:	e7c5      	b.n	800586a <_printf_common+0x62>
 80058de:	2301      	movs	r3, #1
 80058e0:	4622      	mov	r2, r4
 80058e2:	4639      	mov	r1, r7
 80058e4:	4630      	mov	r0, r6
 80058e6:	47c0      	blx	r8
 80058e8:	3001      	adds	r0, #1
 80058ea:	d0e6      	beq.n	80058ba <_printf_common+0xb2>
 80058ec:	f109 0901 	add.w	r9, r9, #1
 80058f0:	e7d8      	b.n	80058a4 <_printf_common+0x9c>
	...

080058f4 <_printf_i>:
 80058f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058fc:	460c      	mov	r4, r1
 80058fe:	7e09      	ldrb	r1, [r1, #24]
 8005900:	b085      	sub	sp, #20
 8005902:	296e      	cmp	r1, #110	; 0x6e
 8005904:	4617      	mov	r7, r2
 8005906:	4606      	mov	r6, r0
 8005908:	4698      	mov	r8, r3
 800590a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800590c:	f000 80b3 	beq.w	8005a76 <_printf_i+0x182>
 8005910:	d822      	bhi.n	8005958 <_printf_i+0x64>
 8005912:	2963      	cmp	r1, #99	; 0x63
 8005914:	d036      	beq.n	8005984 <_printf_i+0x90>
 8005916:	d80a      	bhi.n	800592e <_printf_i+0x3a>
 8005918:	2900      	cmp	r1, #0
 800591a:	f000 80b9 	beq.w	8005a90 <_printf_i+0x19c>
 800591e:	2958      	cmp	r1, #88	; 0x58
 8005920:	f000 8083 	beq.w	8005a2a <_printf_i+0x136>
 8005924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005928:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800592c:	e032      	b.n	8005994 <_printf_i+0xa0>
 800592e:	2964      	cmp	r1, #100	; 0x64
 8005930:	d001      	beq.n	8005936 <_printf_i+0x42>
 8005932:	2969      	cmp	r1, #105	; 0x69
 8005934:	d1f6      	bne.n	8005924 <_printf_i+0x30>
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	0605      	lsls	r5, r0, #24
 800593c:	f103 0104 	add.w	r1, r3, #4
 8005940:	d52a      	bpl.n	8005998 <_printf_i+0xa4>
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6011      	str	r1, [r2, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	da03      	bge.n	8005952 <_printf_i+0x5e>
 800594a:	222d      	movs	r2, #45	; 0x2d
 800594c:	425b      	negs	r3, r3
 800594e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005952:	486f      	ldr	r0, [pc, #444]	; (8005b10 <_printf_i+0x21c>)
 8005954:	220a      	movs	r2, #10
 8005956:	e039      	b.n	80059cc <_printf_i+0xd8>
 8005958:	2973      	cmp	r1, #115	; 0x73
 800595a:	f000 809d 	beq.w	8005a98 <_printf_i+0x1a4>
 800595e:	d808      	bhi.n	8005972 <_printf_i+0x7e>
 8005960:	296f      	cmp	r1, #111	; 0x6f
 8005962:	d020      	beq.n	80059a6 <_printf_i+0xb2>
 8005964:	2970      	cmp	r1, #112	; 0x70
 8005966:	d1dd      	bne.n	8005924 <_printf_i+0x30>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	f043 0320 	orr.w	r3, r3, #32
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	e003      	b.n	800597a <_printf_i+0x86>
 8005972:	2975      	cmp	r1, #117	; 0x75
 8005974:	d017      	beq.n	80059a6 <_printf_i+0xb2>
 8005976:	2978      	cmp	r1, #120	; 0x78
 8005978:	d1d4      	bne.n	8005924 <_printf_i+0x30>
 800597a:	2378      	movs	r3, #120	; 0x78
 800597c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005980:	4864      	ldr	r0, [pc, #400]	; (8005b14 <_printf_i+0x220>)
 8005982:	e055      	b.n	8005a30 <_printf_i+0x13c>
 8005984:	6813      	ldr	r3, [r2, #0]
 8005986:	1d19      	adds	r1, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6011      	str	r1, [r2, #0]
 800598c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005994:	2301      	movs	r3, #1
 8005996:	e08c      	b.n	8005ab2 <_printf_i+0x1be>
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6011      	str	r1, [r2, #0]
 800599c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059a0:	bf18      	it	ne
 80059a2:	b21b      	sxthne	r3, r3
 80059a4:	e7cf      	b.n	8005946 <_printf_i+0x52>
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	6825      	ldr	r5, [r4, #0]
 80059aa:	1d18      	adds	r0, r3, #4
 80059ac:	6010      	str	r0, [r2, #0]
 80059ae:	0628      	lsls	r0, r5, #24
 80059b0:	d501      	bpl.n	80059b6 <_printf_i+0xc2>
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	e002      	b.n	80059bc <_printf_i+0xc8>
 80059b6:	0668      	lsls	r0, r5, #25
 80059b8:	d5fb      	bpl.n	80059b2 <_printf_i+0xbe>
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	4854      	ldr	r0, [pc, #336]	; (8005b10 <_printf_i+0x21c>)
 80059be:	296f      	cmp	r1, #111	; 0x6f
 80059c0:	bf14      	ite	ne
 80059c2:	220a      	movne	r2, #10
 80059c4:	2208      	moveq	r2, #8
 80059c6:	2100      	movs	r1, #0
 80059c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059cc:	6865      	ldr	r5, [r4, #4]
 80059ce:	60a5      	str	r5, [r4, #8]
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	f2c0 8095 	blt.w	8005b00 <_printf_i+0x20c>
 80059d6:	6821      	ldr	r1, [r4, #0]
 80059d8:	f021 0104 	bic.w	r1, r1, #4
 80059dc:	6021      	str	r1, [r4, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d13d      	bne.n	8005a5e <_printf_i+0x16a>
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	f040 808e 	bne.w	8005b04 <_printf_i+0x210>
 80059e8:	4665      	mov	r5, ip
 80059ea:	2a08      	cmp	r2, #8
 80059ec:	d10b      	bne.n	8005a06 <_printf_i+0x112>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	07db      	lsls	r3, r3, #31
 80059f2:	d508      	bpl.n	8005a06 <_printf_i+0x112>
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	6862      	ldr	r2, [r4, #4]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	bfde      	ittt	le
 80059fc:	2330      	movle	r3, #48	; 0x30
 80059fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a02:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a06:	ebac 0305 	sub.w	r3, ip, r5
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	f8cd 8000 	str.w	r8, [sp]
 8005a10:	463b      	mov	r3, r7
 8005a12:	aa03      	add	r2, sp, #12
 8005a14:	4621      	mov	r1, r4
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7ff fef6 	bl	8005808 <_printf_common>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d14d      	bne.n	8005abc <_printf_i+0x1c8>
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a24:	b005      	add	sp, #20
 8005a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a2a:	4839      	ldr	r0, [pc, #228]	; (8005b10 <_printf_i+0x21c>)
 8005a2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a30:	6813      	ldr	r3, [r2, #0]
 8005a32:	6821      	ldr	r1, [r4, #0]
 8005a34:	1d1d      	adds	r5, r3, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6015      	str	r5, [r2, #0]
 8005a3a:	060a      	lsls	r2, r1, #24
 8005a3c:	d50b      	bpl.n	8005a56 <_printf_i+0x162>
 8005a3e:	07ca      	lsls	r2, r1, #31
 8005a40:	bf44      	itt	mi
 8005a42:	f041 0120 	orrmi.w	r1, r1, #32
 8005a46:	6021      	strmi	r1, [r4, #0]
 8005a48:	b91b      	cbnz	r3, 8005a52 <_printf_i+0x15e>
 8005a4a:	6822      	ldr	r2, [r4, #0]
 8005a4c:	f022 0220 	bic.w	r2, r2, #32
 8005a50:	6022      	str	r2, [r4, #0]
 8005a52:	2210      	movs	r2, #16
 8005a54:	e7b7      	b.n	80059c6 <_printf_i+0xd2>
 8005a56:	064d      	lsls	r5, r1, #25
 8005a58:	bf48      	it	mi
 8005a5a:	b29b      	uxthmi	r3, r3
 8005a5c:	e7ef      	b.n	8005a3e <_printf_i+0x14a>
 8005a5e:	4665      	mov	r5, ip
 8005a60:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a64:	fb02 3311 	mls	r3, r2, r1, r3
 8005a68:	5cc3      	ldrb	r3, [r0, r3]
 8005a6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a6e:	460b      	mov	r3, r1
 8005a70:	2900      	cmp	r1, #0
 8005a72:	d1f5      	bne.n	8005a60 <_printf_i+0x16c>
 8005a74:	e7b9      	b.n	80059ea <_printf_i+0xf6>
 8005a76:	6813      	ldr	r3, [r2, #0]
 8005a78:	6825      	ldr	r5, [r4, #0]
 8005a7a:	6961      	ldr	r1, [r4, #20]
 8005a7c:	1d18      	adds	r0, r3, #4
 8005a7e:	6010      	str	r0, [r2, #0]
 8005a80:	0628      	lsls	r0, r5, #24
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	d501      	bpl.n	8005a8a <_printf_i+0x196>
 8005a86:	6019      	str	r1, [r3, #0]
 8005a88:	e002      	b.n	8005a90 <_printf_i+0x19c>
 8005a8a:	066a      	lsls	r2, r5, #25
 8005a8c:	d5fb      	bpl.n	8005a86 <_printf_i+0x192>
 8005a8e:	8019      	strh	r1, [r3, #0]
 8005a90:	2300      	movs	r3, #0
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	4665      	mov	r5, ip
 8005a96:	e7b9      	b.n	8005a0c <_printf_i+0x118>
 8005a98:	6813      	ldr	r3, [r2, #0]
 8005a9a:	1d19      	adds	r1, r3, #4
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	681d      	ldr	r5, [r3, #0]
 8005aa0:	6862      	ldr	r2, [r4, #4]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f7fa fb9b 	bl	80001e0 <memchr>
 8005aaa:	b108      	cbz	r0, 8005ab0 <_printf_i+0x1bc>
 8005aac:	1b40      	subs	r0, r0, r5
 8005aae:	6060      	str	r0, [r4, #4]
 8005ab0:	6863      	ldr	r3, [r4, #4]
 8005ab2:	6123      	str	r3, [r4, #16]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aba:	e7a7      	b.n	8005a0c <_printf_i+0x118>
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	462a      	mov	r2, r5
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d0aa      	beq.n	8005a20 <_printf_i+0x12c>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	079b      	lsls	r3, r3, #30
 8005ace:	d413      	bmi.n	8005af8 <_printf_i+0x204>
 8005ad0:	68e0      	ldr	r0, [r4, #12]
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	4298      	cmp	r0, r3
 8005ad6:	bfb8      	it	lt
 8005ad8:	4618      	movlt	r0, r3
 8005ada:	e7a3      	b.n	8005a24 <_printf_i+0x130>
 8005adc:	2301      	movs	r3, #1
 8005ade:	464a      	mov	r2, r9
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	47c0      	blx	r8
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d09a      	beq.n	8005a20 <_printf_i+0x12c>
 8005aea:	3501      	adds	r5, #1
 8005aec:	68e3      	ldr	r3, [r4, #12]
 8005aee:	9a03      	ldr	r2, [sp, #12]
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	42ab      	cmp	r3, r5
 8005af4:	dcf2      	bgt.n	8005adc <_printf_i+0x1e8>
 8005af6:	e7eb      	b.n	8005ad0 <_printf_i+0x1dc>
 8005af8:	2500      	movs	r5, #0
 8005afa:	f104 0919 	add.w	r9, r4, #25
 8005afe:	e7f5      	b.n	8005aec <_printf_i+0x1f8>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1ac      	bne.n	8005a5e <_printf_i+0x16a>
 8005b04:	7803      	ldrb	r3, [r0, #0]
 8005b06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b0e:	e76c      	b.n	80059ea <_printf_i+0xf6>
 8005b10:	0800736e 	.word	0x0800736e
 8005b14:	0800737f 	.word	0x0800737f

08005b18 <siprintf>:
 8005b18:	b40e      	push	{r1, r2, r3}
 8005b1a:	b500      	push	{lr}
 8005b1c:	b09c      	sub	sp, #112	; 0x70
 8005b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b20:	9002      	str	r0, [sp, #8]
 8005b22:	9006      	str	r0, [sp, #24]
 8005b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b28:	4809      	ldr	r0, [pc, #36]	; (8005b50 <siprintf+0x38>)
 8005b2a:	9107      	str	r1, [sp, #28]
 8005b2c:	9104      	str	r1, [sp, #16]
 8005b2e:	4909      	ldr	r1, [pc, #36]	; (8005b54 <siprintf+0x3c>)
 8005b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b34:	9105      	str	r1, [sp, #20]
 8005b36:	6800      	ldr	r0, [r0, #0]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	a902      	add	r1, sp, #8
 8005b3c:	f001 fa5c 	bl	8006ff8 <_svfiprintf_r>
 8005b40:	9b02      	ldr	r3, [sp, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	b01c      	add	sp, #112	; 0x70
 8005b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b4c:	b003      	add	sp, #12
 8005b4e:	4770      	bx	lr
 8005b50:	2000000c 	.word	0x2000000c
 8005b54:	ffff0208 	.word	0xffff0208

08005b58 <quorem>:
 8005b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	6903      	ldr	r3, [r0, #16]
 8005b5e:	690c      	ldr	r4, [r1, #16]
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	4680      	mov	r8, r0
 8005b64:	f2c0 8082 	blt.w	8005c6c <quorem+0x114>
 8005b68:	3c01      	subs	r4, #1
 8005b6a:	f101 0714 	add.w	r7, r1, #20
 8005b6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005b72:	f100 0614 	add.w	r6, r0, #20
 8005b76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005b7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b7e:	eb06 030c 	add.w	r3, r6, ip
 8005b82:	3501      	adds	r5, #1
 8005b84:	eb07 090c 	add.w	r9, r7, ip
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b8e:	b395      	cbz	r5, 8005bf6 <quorem+0x9e>
 8005b90:	f04f 0a00 	mov.w	sl, #0
 8005b94:	4638      	mov	r0, r7
 8005b96:	46b6      	mov	lr, r6
 8005b98:	46d3      	mov	fp, sl
 8005b9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b9e:	b293      	uxth	r3, r2
 8005ba0:	fb05 a303 	mla	r3, r5, r3, sl
 8005ba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	ebab 0303 	sub.w	r3, fp, r3
 8005bae:	0c12      	lsrs	r2, r2, #16
 8005bb0:	f8de b000 	ldr.w	fp, [lr]
 8005bb4:	fb05 a202 	mla	r2, r5, r2, sl
 8005bb8:	fa13 f38b 	uxtah	r3, r3, fp
 8005bbc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005bc0:	fa1f fb82 	uxth.w	fp, r2
 8005bc4:	f8de 2000 	ldr.w	r2, [lr]
 8005bc8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005bcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bd6:	4581      	cmp	r9, r0
 8005bd8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005bdc:	f84e 3b04 	str.w	r3, [lr], #4
 8005be0:	d2db      	bcs.n	8005b9a <quorem+0x42>
 8005be2:	f856 300c 	ldr.w	r3, [r6, ip]
 8005be6:	b933      	cbnz	r3, 8005bf6 <quorem+0x9e>
 8005be8:	9b01      	ldr	r3, [sp, #4]
 8005bea:	3b04      	subs	r3, #4
 8005bec:	429e      	cmp	r6, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	d330      	bcc.n	8005c54 <quorem+0xfc>
 8005bf2:	f8c8 4010 	str.w	r4, [r8, #16]
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	f001 f828 	bl	8006c4c <__mcmp>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	db25      	blt.n	8005c4c <quorem+0xf4>
 8005c00:	3501      	adds	r5, #1
 8005c02:	4630      	mov	r0, r6
 8005c04:	f04f 0c00 	mov.w	ip, #0
 8005c08:	f857 2b04 	ldr.w	r2, [r7], #4
 8005c0c:	f8d0 e000 	ldr.w	lr, [r0]
 8005c10:	b293      	uxth	r3, r2
 8005c12:	ebac 0303 	sub.w	r3, ip, r3
 8005c16:	0c12      	lsrs	r2, r2, #16
 8005c18:	fa13 f38e 	uxtah	r3, r3, lr
 8005c1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c2a:	45b9      	cmp	r9, r7
 8005c2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c30:	f840 3b04 	str.w	r3, [r0], #4
 8005c34:	d2e8      	bcs.n	8005c08 <quorem+0xb0>
 8005c36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005c3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005c3e:	b92a      	cbnz	r2, 8005c4c <quorem+0xf4>
 8005c40:	3b04      	subs	r3, #4
 8005c42:	429e      	cmp	r6, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	d30b      	bcc.n	8005c60 <quorem+0x108>
 8005c48:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	b003      	add	sp, #12
 8005c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	3b04      	subs	r3, #4
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	d1ca      	bne.n	8005bf2 <quorem+0x9a>
 8005c5c:	3c01      	subs	r4, #1
 8005c5e:	e7c5      	b.n	8005bec <quorem+0x94>
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	3b04      	subs	r3, #4
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d1ef      	bne.n	8005c48 <quorem+0xf0>
 8005c68:	3c01      	subs	r4, #1
 8005c6a:	e7ea      	b.n	8005c42 <quorem+0xea>
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e7ee      	b.n	8005c4e <quorem+0xf6>

08005c70 <_dtoa_r>:
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	ec57 6b10 	vmov	r6, r7, d0
 8005c78:	b097      	sub	sp, #92	; 0x5c
 8005c7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c7c:	9106      	str	r1, [sp, #24]
 8005c7e:	4604      	mov	r4, r0
 8005c80:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c82:	9312      	str	r3, [sp, #72]	; 0x48
 8005c84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c88:	e9cd 6700 	strd	r6, r7, [sp]
 8005c8c:	b93d      	cbnz	r5, 8005c9e <_dtoa_r+0x2e>
 8005c8e:	2010      	movs	r0, #16
 8005c90:	f000 fdb4 	bl	80067fc <malloc>
 8005c94:	6260      	str	r0, [r4, #36]	; 0x24
 8005c96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c9a:	6005      	str	r5, [r0, #0]
 8005c9c:	60c5      	str	r5, [r0, #12]
 8005c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	b151      	cbz	r1, 8005cba <_dtoa_r+0x4a>
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	604a      	str	r2, [r1, #4]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4093      	lsls	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 fdeb 	bl	800688a <_Bfree>
 8005cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	1e3b      	subs	r3, r7, #0
 8005cbc:	bfbb      	ittet	lt
 8005cbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cc2:	9301      	strlt	r3, [sp, #4]
 8005cc4:	2300      	movge	r3, #0
 8005cc6:	2201      	movlt	r2, #1
 8005cc8:	bfac      	ite	ge
 8005cca:	f8c8 3000 	strge.w	r3, [r8]
 8005cce:	f8c8 2000 	strlt.w	r2, [r8]
 8005cd2:	4baf      	ldr	r3, [pc, #700]	; (8005f90 <_dtoa_r+0x320>)
 8005cd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005cd8:	ea33 0308 	bics.w	r3, r3, r8
 8005cdc:	d114      	bne.n	8005d08 <_dtoa_r+0x98>
 8005cde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ce0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	9b00      	ldr	r3, [sp, #0]
 8005ce8:	b923      	cbnz	r3, 8005cf4 <_dtoa_r+0x84>
 8005cea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f000 8542 	beq.w	8006778 <_dtoa_r+0xb08>
 8005cf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005fa4 <_dtoa_r+0x334>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 8544 	beq.w	8006788 <_dtoa_r+0xb18>
 8005d00:	f10b 0303 	add.w	r3, fp, #3
 8005d04:	f000 bd3e 	b.w	8006784 <_dtoa_r+0xb14>
 8005d08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fed8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d18:	4681      	mov	r9, r0
 8005d1a:	b168      	cbz	r0, 8005d38 <_dtoa_r+0xc8>
 8005d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d1e:	2301      	movs	r3, #1
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8524 	beq.w	8006772 <_dtoa_r+0xb02>
 8005d2a:	4b9a      	ldr	r3, [pc, #616]	; (8005f94 <_dtoa_r+0x324>)
 8005d2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d2e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	f000 bd28 	b.w	8006788 <_dtoa_r+0xb18>
 8005d38:	aa14      	add	r2, sp, #80	; 0x50
 8005d3a:	a915      	add	r1, sp, #84	; 0x54
 8005d3c:	ec47 6b10 	vmov	d0, r6, r7
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fffa 	bl	8006d3a <__d2b>
 8005d46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d4a:	9004      	str	r0, [sp, #16]
 8005d4c:	2d00      	cmp	r5, #0
 8005d4e:	d07c      	beq.n	8005e4a <_dtoa_r+0x1da>
 8005d50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005d58:	46b2      	mov	sl, r6
 8005d5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005d5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005d66:	2200      	movs	r2, #0
 8005d68:	4b8b      	ldr	r3, [pc, #556]	; (8005f98 <_dtoa_r+0x328>)
 8005d6a:	4650      	mov	r0, sl
 8005d6c:	4659      	mov	r1, fp
 8005d6e:	f7fa fa8b 	bl	8000288 <__aeabi_dsub>
 8005d72:	a381      	add	r3, pc, #516	; (adr r3, 8005f78 <_dtoa_r+0x308>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fc3e 	bl	80005f8 <__aeabi_dmul>
 8005d7c:	a380      	add	r3, pc, #512	; (adr r3, 8005f80 <_dtoa_r+0x310>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	f7fa fa83 	bl	800028c <__adddf3>
 8005d86:	4606      	mov	r6, r0
 8005d88:	4628      	mov	r0, r5
 8005d8a:	460f      	mov	r7, r1
 8005d8c:	f7fa fbca 	bl	8000524 <__aeabi_i2d>
 8005d90:	a37d      	add	r3, pc, #500	; (adr r3, 8005f88 <_dtoa_r+0x318>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f7fa fc2f 	bl	80005f8 <__aeabi_dmul>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4639      	mov	r1, r7
 8005da2:	f7fa fa73 	bl	800028c <__adddf3>
 8005da6:	4606      	mov	r6, r0
 8005da8:	460f      	mov	r7, r1
 8005daa:	f7fa fed5 	bl	8000b58 <__aeabi_d2iz>
 8005dae:	2200      	movs	r2, #0
 8005db0:	4682      	mov	sl, r0
 8005db2:	2300      	movs	r3, #0
 8005db4:	4630      	mov	r0, r6
 8005db6:	4639      	mov	r1, r7
 8005db8:	f7fa fe90 	bl	8000adc <__aeabi_dcmplt>
 8005dbc:	b148      	cbz	r0, 8005dd2 <_dtoa_r+0x162>
 8005dbe:	4650      	mov	r0, sl
 8005dc0:	f7fa fbb0 	bl	8000524 <__aeabi_i2d>
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	f7fa fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dcc:	b908      	cbnz	r0, 8005dd2 <_dtoa_r+0x162>
 8005dce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005dd2:	f1ba 0f16 	cmp.w	sl, #22
 8005dd6:	d859      	bhi.n	8005e8c <_dtoa_r+0x21c>
 8005dd8:	4970      	ldr	r1, [pc, #448]	; (8005f9c <_dtoa_r+0x32c>)
 8005dda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005dde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de6:	f7fa fe97 	bl	8000b18 <__aeabi_dcmpgt>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d050      	beq.n	8005e90 <_dtoa_r+0x220>
 8005dee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005df2:	2300      	movs	r3, #0
 8005df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005df8:	1b5d      	subs	r5, r3, r5
 8005dfa:	f1b5 0801 	subs.w	r8, r5, #1
 8005dfe:	bf49      	itett	mi
 8005e00:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e04:	2300      	movpl	r3, #0
 8005e06:	9305      	strmi	r3, [sp, #20]
 8005e08:	f04f 0800 	movmi.w	r8, #0
 8005e0c:	bf58      	it	pl
 8005e0e:	9305      	strpl	r3, [sp, #20]
 8005e10:	f1ba 0f00 	cmp.w	sl, #0
 8005e14:	db3e      	blt.n	8005e94 <_dtoa_r+0x224>
 8005e16:	2300      	movs	r3, #0
 8005e18:	44d0      	add	r8, sl
 8005e1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005e1e:	9307      	str	r3, [sp, #28]
 8005e20:	9b06      	ldr	r3, [sp, #24]
 8005e22:	2b09      	cmp	r3, #9
 8005e24:	f200 8090 	bhi.w	8005f48 <_dtoa_r+0x2d8>
 8005e28:	2b05      	cmp	r3, #5
 8005e2a:	bfc4      	itt	gt
 8005e2c:	3b04      	subgt	r3, #4
 8005e2e:	9306      	strgt	r3, [sp, #24]
 8005e30:	9b06      	ldr	r3, [sp, #24]
 8005e32:	f1a3 0302 	sub.w	r3, r3, #2
 8005e36:	bfcc      	ite	gt
 8005e38:	2500      	movgt	r5, #0
 8005e3a:	2501      	movle	r5, #1
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	f200 808f 	bhi.w	8005f60 <_dtoa_r+0x2f0>
 8005e42:	e8df f003 	tbb	[pc, r3]
 8005e46:	7f7d      	.short	0x7f7d
 8005e48:	7131      	.short	0x7131
 8005e4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005e4e:	441d      	add	r5, r3
 8005e50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005e54:	2820      	cmp	r0, #32
 8005e56:	dd13      	ble.n	8005e80 <_dtoa_r+0x210>
 8005e58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005e5c:	9b00      	ldr	r3, [sp, #0]
 8005e5e:	fa08 f800 	lsl.w	r8, r8, r0
 8005e62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005e66:	fa23 f000 	lsr.w	r0, r3, r0
 8005e6a:	ea48 0000 	orr.w	r0, r8, r0
 8005e6e:	f7fa fb49 	bl	8000504 <__aeabi_ui2d>
 8005e72:	2301      	movs	r3, #1
 8005e74:	4682      	mov	sl, r0
 8005e76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005e7a:	3d01      	subs	r5, #1
 8005e7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e7e:	e772      	b.n	8005d66 <_dtoa_r+0xf6>
 8005e80:	9b00      	ldr	r3, [sp, #0]
 8005e82:	f1c0 0020 	rsb	r0, r0, #32
 8005e86:	fa03 f000 	lsl.w	r0, r3, r0
 8005e8a:	e7f0      	b.n	8005e6e <_dtoa_r+0x1fe>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e7b1      	b.n	8005df4 <_dtoa_r+0x184>
 8005e90:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e92:	e7b0      	b.n	8005df6 <_dtoa_r+0x186>
 8005e94:	9b05      	ldr	r3, [sp, #20]
 8005e96:	eba3 030a 	sub.w	r3, r3, sl
 8005e9a:	9305      	str	r3, [sp, #20]
 8005e9c:	f1ca 0300 	rsb	r3, sl, #0
 8005ea0:	9307      	str	r3, [sp, #28]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ea6:	e7bb      	b.n	8005e20 <_dtoa_r+0x1b0>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8005eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dd59      	ble.n	8005f66 <_dtoa_r+0x2f6>
 8005eb2:	9302      	str	r3, [sp, #8]
 8005eb4:	4699      	mov	r9, r3
 8005eb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005eb8:	2200      	movs	r2, #0
 8005eba:	6072      	str	r2, [r6, #4]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	f102 0014 	add.w	r0, r2, #20
 8005ec2:	4298      	cmp	r0, r3
 8005ec4:	6871      	ldr	r1, [r6, #4]
 8005ec6:	d953      	bls.n	8005f70 <_dtoa_r+0x300>
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 fcaa 	bl	8006822 <_Balloc>
 8005ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed0:	6030      	str	r0, [r6, #0]
 8005ed2:	f1b9 0f0e 	cmp.w	r9, #14
 8005ed6:	f8d3 b000 	ldr.w	fp, [r3]
 8005eda:	f200 80e6 	bhi.w	80060aa <_dtoa_r+0x43a>
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	f000 80e3 	beq.w	80060aa <_dtoa_r+0x43a>
 8005ee4:	ed9d 7b00 	vldr	d7, [sp]
 8005ee8:	f1ba 0f00 	cmp.w	sl, #0
 8005eec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005ef0:	dd74      	ble.n	8005fdc <_dtoa_r+0x36c>
 8005ef2:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <_dtoa_r+0x32c>)
 8005ef4:	f00a 030f 	and.w	r3, sl, #15
 8005ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005efc:	ed93 7b00 	vldr	d7, [r3]
 8005f00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005f04:	06f0      	lsls	r0, r6, #27
 8005f06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005f0a:	d565      	bpl.n	8005fd8 <_dtoa_r+0x368>
 8005f0c:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <_dtoa_r+0x330>)
 8005f0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f16:	f7fa fc99 	bl	800084c <__aeabi_ddiv>
 8005f1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f1e:	f006 060f 	and.w	r6, r6, #15
 8005f22:	2503      	movs	r5, #3
 8005f24:	4f1e      	ldr	r7, [pc, #120]	; (8005fa0 <_dtoa_r+0x330>)
 8005f26:	e04c      	b.n	8005fc2 <_dtoa_r+0x352>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f2e:	4453      	add	r3, sl
 8005f30:	f103 0901 	add.w	r9, r3, #1
 8005f34:	9302      	str	r3, [sp, #8]
 8005f36:	464b      	mov	r3, r9
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	bfb8      	it	lt
 8005f3c:	2301      	movlt	r3, #1
 8005f3e:	e7ba      	b.n	8005eb6 <_dtoa_r+0x246>
 8005f40:	2300      	movs	r3, #0
 8005f42:	e7b2      	b.n	8005eaa <_dtoa_r+0x23a>
 8005f44:	2300      	movs	r3, #0
 8005f46:	e7f0      	b.n	8005f2a <_dtoa_r+0x2ba>
 8005f48:	2501      	movs	r5, #1
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9306      	str	r3, [sp, #24]
 8005f4e:	950a      	str	r5, [sp, #40]	; 0x28
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f54:	9302      	str	r3, [sp, #8]
 8005f56:	4699      	mov	r9, r3
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2312      	movs	r3, #18
 8005f5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f5e:	e7aa      	b.n	8005eb6 <_dtoa_r+0x246>
 8005f60:	2301      	movs	r3, #1
 8005f62:	930a      	str	r3, [sp, #40]	; 0x28
 8005f64:	e7f4      	b.n	8005f50 <_dtoa_r+0x2e0>
 8005f66:	2301      	movs	r3, #1
 8005f68:	9302      	str	r3, [sp, #8]
 8005f6a:	4699      	mov	r9, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	e7f5      	b.n	8005f5c <_dtoa_r+0x2ec>
 8005f70:	3101      	adds	r1, #1
 8005f72:	6071      	str	r1, [r6, #4]
 8005f74:	0052      	lsls	r2, r2, #1
 8005f76:	e7a2      	b.n	8005ebe <_dtoa_r+0x24e>
 8005f78:	636f4361 	.word	0x636f4361
 8005f7c:	3fd287a7 	.word	0x3fd287a7
 8005f80:	8b60c8b3 	.word	0x8b60c8b3
 8005f84:	3fc68a28 	.word	0x3fc68a28
 8005f88:	509f79fb 	.word	0x509f79fb
 8005f8c:	3fd34413 	.word	0x3fd34413
 8005f90:	7ff00000 	.word	0x7ff00000
 8005f94:	0800736d 	.word	0x0800736d
 8005f98:	3ff80000 	.word	0x3ff80000
 8005f9c:	080073c8 	.word	0x080073c8
 8005fa0:	080073a0 	.word	0x080073a0
 8005fa4:	08007399 	.word	0x08007399
 8005fa8:	07f1      	lsls	r1, r6, #31
 8005faa:	d508      	bpl.n	8005fbe <_dtoa_r+0x34e>
 8005fac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb4:	f7fa fb20 	bl	80005f8 <__aeabi_dmul>
 8005fb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	1076      	asrs	r6, r6, #1
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <_dtoa_r+0x338>
 8005fc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fce:	f7fa fc3d 	bl	800084c <__aeabi_ddiv>
 8005fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8005fd6:	e01a      	b.n	800600e <_dtoa_r+0x39e>
 8005fd8:	2502      	movs	r5, #2
 8005fda:	e7a3      	b.n	8005f24 <_dtoa_r+0x2b4>
 8005fdc:	f000 80a0 	beq.w	8006120 <_dtoa_r+0x4b0>
 8005fe0:	f1ca 0600 	rsb	r6, sl, #0
 8005fe4:	4b9f      	ldr	r3, [pc, #636]	; (8006264 <_dtoa_r+0x5f4>)
 8005fe6:	4fa0      	ldr	r7, [pc, #640]	; (8006268 <_dtoa_r+0x5f8>)
 8005fe8:	f006 020f 	and.w	r2, r6, #15
 8005fec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ff8:	f7fa fafe 	bl	80005f8 <__aeabi_dmul>
 8005ffc:	e9cd 0100 	strd	r0, r1, [sp]
 8006000:	1136      	asrs	r6, r6, #4
 8006002:	2300      	movs	r3, #0
 8006004:	2502      	movs	r5, #2
 8006006:	2e00      	cmp	r6, #0
 8006008:	d17f      	bne.n	800610a <_dtoa_r+0x49a>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e1      	bne.n	8005fd2 <_dtoa_r+0x362>
 800600e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8087 	beq.w	8006124 <_dtoa_r+0x4b4>
 8006016:	e9dd 6700 	ldrd	r6, r7, [sp]
 800601a:	2200      	movs	r2, #0
 800601c:	4b93      	ldr	r3, [pc, #588]	; (800626c <_dtoa_r+0x5fc>)
 800601e:	4630      	mov	r0, r6
 8006020:	4639      	mov	r1, r7
 8006022:	f7fa fd5b 	bl	8000adc <__aeabi_dcmplt>
 8006026:	2800      	cmp	r0, #0
 8006028:	d07c      	beq.n	8006124 <_dtoa_r+0x4b4>
 800602a:	f1b9 0f00 	cmp.w	r9, #0
 800602e:	d079      	beq.n	8006124 <_dtoa_r+0x4b4>
 8006030:	9b02      	ldr	r3, [sp, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	dd35      	ble.n	80060a2 <_dtoa_r+0x432>
 8006036:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800603a:	9308      	str	r3, [sp, #32]
 800603c:	4639      	mov	r1, r7
 800603e:	2200      	movs	r2, #0
 8006040:	4b8b      	ldr	r3, [pc, #556]	; (8006270 <_dtoa_r+0x600>)
 8006042:	4630      	mov	r0, r6
 8006044:	f7fa fad8 	bl	80005f8 <__aeabi_dmul>
 8006048:	e9cd 0100 	strd	r0, r1, [sp]
 800604c:	9f02      	ldr	r7, [sp, #8]
 800604e:	3501      	adds	r5, #1
 8006050:	4628      	mov	r0, r5
 8006052:	f7fa fa67 	bl	8000524 <__aeabi_i2d>
 8006056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800605a:	f7fa facd 	bl	80005f8 <__aeabi_dmul>
 800605e:	2200      	movs	r2, #0
 8006060:	4b84      	ldr	r3, [pc, #528]	; (8006274 <_dtoa_r+0x604>)
 8006062:	f7fa f913 	bl	800028c <__adddf3>
 8006066:	4605      	mov	r5, r0
 8006068:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800606c:	2f00      	cmp	r7, #0
 800606e:	d15d      	bne.n	800612c <_dtoa_r+0x4bc>
 8006070:	2200      	movs	r2, #0
 8006072:	4b81      	ldr	r3, [pc, #516]	; (8006278 <_dtoa_r+0x608>)
 8006074:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006078:	f7fa f906 	bl	8000288 <__aeabi_dsub>
 800607c:	462a      	mov	r2, r5
 800607e:	4633      	mov	r3, r6
 8006080:	e9cd 0100 	strd	r0, r1, [sp]
 8006084:	f7fa fd48 	bl	8000b18 <__aeabi_dcmpgt>
 8006088:	2800      	cmp	r0, #0
 800608a:	f040 8288 	bne.w	800659e <_dtoa_r+0x92e>
 800608e:	462a      	mov	r2, r5
 8006090:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006098:	f7fa fd20 	bl	8000adc <__aeabi_dcmplt>
 800609c:	2800      	cmp	r0, #0
 800609e:	f040 827c 	bne.w	800659a <_dtoa_r+0x92a>
 80060a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060a6:	e9cd 2300 	strd	r2, r3, [sp]
 80060aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f2c0 8150 	blt.w	8006352 <_dtoa_r+0x6e2>
 80060b2:	f1ba 0f0e 	cmp.w	sl, #14
 80060b6:	f300 814c 	bgt.w	8006352 <_dtoa_r+0x6e2>
 80060ba:	4b6a      	ldr	r3, [pc, #424]	; (8006264 <_dtoa_r+0x5f4>)
 80060bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060c0:	ed93 7b00 	vldr	d7, [r3]
 80060c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060cc:	f280 80d8 	bge.w	8006280 <_dtoa_r+0x610>
 80060d0:	f1b9 0f00 	cmp.w	r9, #0
 80060d4:	f300 80d4 	bgt.w	8006280 <_dtoa_r+0x610>
 80060d8:	f040 825e 	bne.w	8006598 <_dtoa_r+0x928>
 80060dc:	2200      	movs	r2, #0
 80060de:	4b66      	ldr	r3, [pc, #408]	; (8006278 <_dtoa_r+0x608>)
 80060e0:	ec51 0b17 	vmov	r0, r1, d7
 80060e4:	f7fa fa88 	bl	80005f8 <__aeabi_dmul>
 80060e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ec:	f7fa fd0a 	bl	8000b04 <__aeabi_dcmpge>
 80060f0:	464f      	mov	r7, r9
 80060f2:	464e      	mov	r6, r9
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f040 8234 	bne.w	8006562 <_dtoa_r+0x8f2>
 80060fa:	2331      	movs	r3, #49	; 0x31
 80060fc:	f10b 0501 	add.w	r5, fp, #1
 8006100:	f88b 3000 	strb.w	r3, [fp]
 8006104:	f10a 0a01 	add.w	sl, sl, #1
 8006108:	e22f      	b.n	800656a <_dtoa_r+0x8fa>
 800610a:	07f2      	lsls	r2, r6, #31
 800610c:	d505      	bpl.n	800611a <_dtoa_r+0x4aa>
 800610e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006112:	f7fa fa71 	bl	80005f8 <__aeabi_dmul>
 8006116:	3501      	adds	r5, #1
 8006118:	2301      	movs	r3, #1
 800611a:	1076      	asrs	r6, r6, #1
 800611c:	3708      	adds	r7, #8
 800611e:	e772      	b.n	8006006 <_dtoa_r+0x396>
 8006120:	2502      	movs	r5, #2
 8006122:	e774      	b.n	800600e <_dtoa_r+0x39e>
 8006124:	f8cd a020 	str.w	sl, [sp, #32]
 8006128:	464f      	mov	r7, r9
 800612a:	e791      	b.n	8006050 <_dtoa_r+0x3e0>
 800612c:	4b4d      	ldr	r3, [pc, #308]	; (8006264 <_dtoa_r+0x5f4>)
 800612e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006132:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	d047      	beq.n	80061cc <_dtoa_r+0x55c>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	2000      	movs	r0, #0
 8006142:	494e      	ldr	r1, [pc, #312]	; (800627c <_dtoa_r+0x60c>)
 8006144:	f7fa fb82 	bl	800084c <__aeabi_ddiv>
 8006148:	462a      	mov	r2, r5
 800614a:	4633      	mov	r3, r6
 800614c:	f7fa f89c 	bl	8000288 <__aeabi_dsub>
 8006150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006154:	465d      	mov	r5, fp
 8006156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800615a:	f7fa fcfd 	bl	8000b58 <__aeabi_d2iz>
 800615e:	4606      	mov	r6, r0
 8006160:	f7fa f9e0 	bl	8000524 <__aeabi_i2d>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800616c:	f7fa f88c 	bl	8000288 <__aeabi_dsub>
 8006170:	3630      	adds	r6, #48	; 0x30
 8006172:	f805 6b01 	strb.w	r6, [r5], #1
 8006176:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800617a:	e9cd 0100 	strd	r0, r1, [sp]
 800617e:	f7fa fcad 	bl	8000adc <__aeabi_dcmplt>
 8006182:	2800      	cmp	r0, #0
 8006184:	d163      	bne.n	800624e <_dtoa_r+0x5de>
 8006186:	e9dd 2300 	ldrd	r2, r3, [sp]
 800618a:	2000      	movs	r0, #0
 800618c:	4937      	ldr	r1, [pc, #220]	; (800626c <_dtoa_r+0x5fc>)
 800618e:	f7fa f87b 	bl	8000288 <__aeabi_dsub>
 8006192:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006196:	f7fa fca1 	bl	8000adc <__aeabi_dcmplt>
 800619a:	2800      	cmp	r0, #0
 800619c:	f040 80b7 	bne.w	800630e <_dtoa_r+0x69e>
 80061a0:	eba5 030b 	sub.w	r3, r5, fp
 80061a4:	429f      	cmp	r7, r3
 80061a6:	f77f af7c 	ble.w	80060a2 <_dtoa_r+0x432>
 80061aa:	2200      	movs	r2, #0
 80061ac:	4b30      	ldr	r3, [pc, #192]	; (8006270 <_dtoa_r+0x600>)
 80061ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061b2:	f7fa fa21 	bl	80005f8 <__aeabi_dmul>
 80061b6:	2200      	movs	r2, #0
 80061b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80061bc:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <_dtoa_r+0x600>)
 80061be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061c2:	f7fa fa19 	bl	80005f8 <__aeabi_dmul>
 80061c6:	e9cd 0100 	strd	r0, r1, [sp]
 80061ca:	e7c4      	b.n	8006156 <_dtoa_r+0x4e6>
 80061cc:	462a      	mov	r2, r5
 80061ce:	4633      	mov	r3, r6
 80061d0:	f7fa fa12 	bl	80005f8 <__aeabi_dmul>
 80061d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80061d8:	eb0b 0507 	add.w	r5, fp, r7
 80061dc:	465e      	mov	r6, fp
 80061de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061e2:	f7fa fcb9 	bl	8000b58 <__aeabi_d2iz>
 80061e6:	4607      	mov	r7, r0
 80061e8:	f7fa f99c 	bl	8000524 <__aeabi_i2d>
 80061ec:	3730      	adds	r7, #48	; 0x30
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061f6:	f7fa f847 	bl	8000288 <__aeabi_dsub>
 80061fa:	f806 7b01 	strb.w	r7, [r6], #1
 80061fe:	42ae      	cmp	r6, r5
 8006200:	e9cd 0100 	strd	r0, r1, [sp]
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	d126      	bne.n	8006258 <_dtoa_r+0x5e8>
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <_dtoa_r+0x60c>)
 800620c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006210:	f7fa f83c 	bl	800028c <__adddf3>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800621c:	f7fa fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8006220:	2800      	cmp	r0, #0
 8006222:	d174      	bne.n	800630e <_dtoa_r+0x69e>
 8006224:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006228:	2000      	movs	r0, #0
 800622a:	4914      	ldr	r1, [pc, #80]	; (800627c <_dtoa_r+0x60c>)
 800622c:	f7fa f82c 	bl	8000288 <__aeabi_dsub>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006238:	f7fa fc50 	bl	8000adc <__aeabi_dcmplt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f43f af30 	beq.w	80060a2 <_dtoa_r+0x432>
 8006242:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006246:	2b30      	cmp	r3, #48	; 0x30
 8006248:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800624c:	d002      	beq.n	8006254 <_dtoa_r+0x5e4>
 800624e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006252:	e04a      	b.n	80062ea <_dtoa_r+0x67a>
 8006254:	4615      	mov	r5, r2
 8006256:	e7f4      	b.n	8006242 <_dtoa_r+0x5d2>
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <_dtoa_r+0x600>)
 800625a:	f7fa f9cd 	bl	80005f8 <__aeabi_dmul>
 800625e:	e9cd 0100 	strd	r0, r1, [sp]
 8006262:	e7bc      	b.n	80061de <_dtoa_r+0x56e>
 8006264:	080073c8 	.word	0x080073c8
 8006268:	080073a0 	.word	0x080073a0
 800626c:	3ff00000 	.word	0x3ff00000
 8006270:	40240000 	.word	0x40240000
 8006274:	401c0000 	.word	0x401c0000
 8006278:	40140000 	.word	0x40140000
 800627c:	3fe00000 	.word	0x3fe00000
 8006280:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006284:	465d      	mov	r5, fp
 8006286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800628a:	4630      	mov	r0, r6
 800628c:	4639      	mov	r1, r7
 800628e:	f7fa fadd 	bl	800084c <__aeabi_ddiv>
 8006292:	f7fa fc61 	bl	8000b58 <__aeabi_d2iz>
 8006296:	4680      	mov	r8, r0
 8006298:	f7fa f944 	bl	8000524 <__aeabi_i2d>
 800629c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062a0:	f7fa f9aa 	bl	80005f8 <__aeabi_dmul>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4630      	mov	r0, r6
 80062aa:	4639      	mov	r1, r7
 80062ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80062b0:	f7f9 ffea 	bl	8000288 <__aeabi_dsub>
 80062b4:	f805 6b01 	strb.w	r6, [r5], #1
 80062b8:	eba5 060b 	sub.w	r6, r5, fp
 80062bc:	45b1      	cmp	r9, r6
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	d139      	bne.n	8006338 <_dtoa_r+0x6c8>
 80062c4:	f7f9 ffe2 	bl	800028c <__adddf3>
 80062c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062cc:	4606      	mov	r6, r0
 80062ce:	460f      	mov	r7, r1
 80062d0:	f7fa fc22 	bl	8000b18 <__aeabi_dcmpgt>
 80062d4:	b9c8      	cbnz	r0, 800630a <_dtoa_r+0x69a>
 80062d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062da:	4630      	mov	r0, r6
 80062dc:	4639      	mov	r1, r7
 80062de:	f7fa fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e2:	b110      	cbz	r0, 80062ea <_dtoa_r+0x67a>
 80062e4:	f018 0f01 	tst.w	r8, #1
 80062e8:	d10f      	bne.n	800630a <_dtoa_r+0x69a>
 80062ea:	9904      	ldr	r1, [sp, #16]
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 facc 	bl	800688a <_Bfree>
 80062f2:	2300      	movs	r3, #0
 80062f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062f6:	702b      	strb	r3, [r5, #0]
 80062f8:	f10a 0301 	add.w	r3, sl, #1
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8241 	beq.w	8006788 <_dtoa_r+0xb18>
 8006306:	601d      	str	r5, [r3, #0]
 8006308:	e23e      	b.n	8006788 <_dtoa_r+0xb18>
 800630a:	f8cd a020 	str.w	sl, [sp, #32]
 800630e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006312:	2a39      	cmp	r2, #57	; 0x39
 8006314:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006318:	d108      	bne.n	800632c <_dtoa_r+0x6bc>
 800631a:	459b      	cmp	fp, r3
 800631c:	d10a      	bne.n	8006334 <_dtoa_r+0x6c4>
 800631e:	9b08      	ldr	r3, [sp, #32]
 8006320:	3301      	adds	r3, #1
 8006322:	9308      	str	r3, [sp, #32]
 8006324:	2330      	movs	r3, #48	; 0x30
 8006326:	f88b 3000 	strb.w	r3, [fp]
 800632a:	465b      	mov	r3, fp
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	3201      	adds	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e78c      	b.n	800624e <_dtoa_r+0x5de>
 8006334:	461d      	mov	r5, r3
 8006336:	e7ea      	b.n	800630e <_dtoa_r+0x69e>
 8006338:	2200      	movs	r2, #0
 800633a:	4b9b      	ldr	r3, [pc, #620]	; (80065a8 <_dtoa_r+0x938>)
 800633c:	f7fa f95c 	bl	80005f8 <__aeabi_dmul>
 8006340:	2200      	movs	r2, #0
 8006342:	2300      	movs	r3, #0
 8006344:	4606      	mov	r6, r0
 8006346:	460f      	mov	r7, r1
 8006348:	f7fa fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800634c:	2800      	cmp	r0, #0
 800634e:	d09a      	beq.n	8006286 <_dtoa_r+0x616>
 8006350:	e7cb      	b.n	80062ea <_dtoa_r+0x67a>
 8006352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006354:	2a00      	cmp	r2, #0
 8006356:	f000 808b 	beq.w	8006470 <_dtoa_r+0x800>
 800635a:	9a06      	ldr	r2, [sp, #24]
 800635c:	2a01      	cmp	r2, #1
 800635e:	dc6e      	bgt.n	800643e <_dtoa_r+0x7ce>
 8006360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006362:	2a00      	cmp	r2, #0
 8006364:	d067      	beq.n	8006436 <_dtoa_r+0x7c6>
 8006366:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800636a:	9f07      	ldr	r7, [sp, #28]
 800636c:	9d05      	ldr	r5, [sp, #20]
 800636e:	9a05      	ldr	r2, [sp, #20]
 8006370:	2101      	movs	r1, #1
 8006372:	441a      	add	r2, r3
 8006374:	4620      	mov	r0, r4
 8006376:	9205      	str	r2, [sp, #20]
 8006378:	4498      	add	r8, r3
 800637a:	f000 fb26 	bl	80069ca <__i2b>
 800637e:	4606      	mov	r6, r0
 8006380:	2d00      	cmp	r5, #0
 8006382:	dd0c      	ble.n	800639e <_dtoa_r+0x72e>
 8006384:	f1b8 0f00 	cmp.w	r8, #0
 8006388:	dd09      	ble.n	800639e <_dtoa_r+0x72e>
 800638a:	4545      	cmp	r5, r8
 800638c:	9a05      	ldr	r2, [sp, #20]
 800638e:	462b      	mov	r3, r5
 8006390:	bfa8      	it	ge
 8006392:	4643      	movge	r3, r8
 8006394:	1ad2      	subs	r2, r2, r3
 8006396:	9205      	str	r2, [sp, #20]
 8006398:	1aed      	subs	r5, r5, r3
 800639a:	eba8 0803 	sub.w	r8, r8, r3
 800639e:	9b07      	ldr	r3, [sp, #28]
 80063a0:	b1eb      	cbz	r3, 80063de <_dtoa_r+0x76e>
 80063a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d067      	beq.n	8006478 <_dtoa_r+0x808>
 80063a8:	b18f      	cbz	r7, 80063ce <_dtoa_r+0x75e>
 80063aa:	4631      	mov	r1, r6
 80063ac:	463a      	mov	r2, r7
 80063ae:	4620      	mov	r0, r4
 80063b0:	f000 fbaa 	bl	8006b08 <__pow5mult>
 80063b4:	9a04      	ldr	r2, [sp, #16]
 80063b6:	4601      	mov	r1, r0
 80063b8:	4606      	mov	r6, r0
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fb0e 	bl	80069dc <__multiply>
 80063c0:	9904      	ldr	r1, [sp, #16]
 80063c2:	9008      	str	r0, [sp, #32]
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 fa60 	bl	800688a <_Bfree>
 80063ca:	9b08      	ldr	r3, [sp, #32]
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	9b07      	ldr	r3, [sp, #28]
 80063d0:	1bda      	subs	r2, r3, r7
 80063d2:	d004      	beq.n	80063de <_dtoa_r+0x76e>
 80063d4:	9904      	ldr	r1, [sp, #16]
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fb96 	bl	8006b08 <__pow5mult>
 80063dc:	9004      	str	r0, [sp, #16]
 80063de:	2101      	movs	r1, #1
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 faf2 	bl	80069ca <__i2b>
 80063e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063e8:	4607      	mov	r7, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 81d0 	beq.w	8006790 <_dtoa_r+0xb20>
 80063f0:	461a      	mov	r2, r3
 80063f2:	4601      	mov	r1, r0
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 fb87 	bl	8006b08 <__pow5mult>
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	4607      	mov	r7, r0
 8006400:	dc40      	bgt.n	8006484 <_dtoa_r+0x814>
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d139      	bne.n	800647c <_dtoa_r+0x80c>
 8006408:	9b01      	ldr	r3, [sp, #4]
 800640a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800640e:	2b00      	cmp	r3, #0
 8006410:	d136      	bne.n	8006480 <_dtoa_r+0x810>
 8006412:	9b01      	ldr	r3, [sp, #4]
 8006414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006418:	0d1b      	lsrs	r3, r3, #20
 800641a:	051b      	lsls	r3, r3, #20
 800641c:	b12b      	cbz	r3, 800642a <_dtoa_r+0x7ba>
 800641e:	9b05      	ldr	r3, [sp, #20]
 8006420:	3301      	adds	r3, #1
 8006422:	9305      	str	r3, [sp, #20]
 8006424:	f108 0801 	add.w	r8, r8, #1
 8006428:	2301      	movs	r3, #1
 800642a:	9307      	str	r3, [sp, #28]
 800642c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d12a      	bne.n	8006488 <_dtoa_r+0x818>
 8006432:	2001      	movs	r0, #1
 8006434:	e030      	b.n	8006498 <_dtoa_r+0x828>
 8006436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006438:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800643c:	e795      	b.n	800636a <_dtoa_r+0x6fa>
 800643e:	9b07      	ldr	r3, [sp, #28]
 8006440:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006444:	42bb      	cmp	r3, r7
 8006446:	bfbf      	itttt	lt
 8006448:	9b07      	ldrlt	r3, [sp, #28]
 800644a:	9707      	strlt	r7, [sp, #28]
 800644c:	1afa      	sublt	r2, r7, r3
 800644e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006450:	bfbb      	ittet	lt
 8006452:	189b      	addlt	r3, r3, r2
 8006454:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006456:	1bdf      	subge	r7, r3, r7
 8006458:	2700      	movlt	r7, #0
 800645a:	f1b9 0f00 	cmp.w	r9, #0
 800645e:	bfb5      	itete	lt
 8006460:	9b05      	ldrlt	r3, [sp, #20]
 8006462:	9d05      	ldrge	r5, [sp, #20]
 8006464:	eba3 0509 	sublt.w	r5, r3, r9
 8006468:	464b      	movge	r3, r9
 800646a:	bfb8      	it	lt
 800646c:	2300      	movlt	r3, #0
 800646e:	e77e      	b.n	800636e <_dtoa_r+0x6fe>
 8006470:	9f07      	ldr	r7, [sp, #28]
 8006472:	9d05      	ldr	r5, [sp, #20]
 8006474:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006476:	e783      	b.n	8006380 <_dtoa_r+0x710>
 8006478:	9a07      	ldr	r2, [sp, #28]
 800647a:	e7ab      	b.n	80063d4 <_dtoa_r+0x764>
 800647c:	2300      	movs	r3, #0
 800647e:	e7d4      	b.n	800642a <_dtoa_r+0x7ba>
 8006480:	9b00      	ldr	r3, [sp, #0]
 8006482:	e7d2      	b.n	800642a <_dtoa_r+0x7ba>
 8006484:	2300      	movs	r3, #0
 8006486:	9307      	str	r3, [sp, #28]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800648e:	6918      	ldr	r0, [r3, #16]
 8006490:	f000 fa4d 	bl	800692e <__hi0bits>
 8006494:	f1c0 0020 	rsb	r0, r0, #32
 8006498:	4440      	add	r0, r8
 800649a:	f010 001f 	ands.w	r0, r0, #31
 800649e:	d047      	beq.n	8006530 <_dtoa_r+0x8c0>
 80064a0:	f1c0 0320 	rsb	r3, r0, #32
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	dd3b      	ble.n	8006520 <_dtoa_r+0x8b0>
 80064a8:	9b05      	ldr	r3, [sp, #20]
 80064aa:	f1c0 001c 	rsb	r0, r0, #28
 80064ae:	4403      	add	r3, r0
 80064b0:	9305      	str	r3, [sp, #20]
 80064b2:	4405      	add	r5, r0
 80064b4:	4480      	add	r8, r0
 80064b6:	9b05      	ldr	r3, [sp, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dd05      	ble.n	80064c8 <_dtoa_r+0x858>
 80064bc:	461a      	mov	r2, r3
 80064be:	9904      	ldr	r1, [sp, #16]
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fb6f 	bl	8006ba4 <__lshift>
 80064c6:	9004      	str	r0, [sp, #16]
 80064c8:	f1b8 0f00 	cmp.w	r8, #0
 80064cc:	dd05      	ble.n	80064da <_dtoa_r+0x86a>
 80064ce:	4639      	mov	r1, r7
 80064d0:	4642      	mov	r2, r8
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fb66 	bl	8006ba4 <__lshift>
 80064d8:	4607      	mov	r7, r0
 80064da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064dc:	b353      	cbz	r3, 8006534 <_dtoa_r+0x8c4>
 80064de:	4639      	mov	r1, r7
 80064e0:	9804      	ldr	r0, [sp, #16]
 80064e2:	f000 fbb3 	bl	8006c4c <__mcmp>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	da24      	bge.n	8006534 <_dtoa_r+0x8c4>
 80064ea:	2300      	movs	r3, #0
 80064ec:	220a      	movs	r2, #10
 80064ee:	9904      	ldr	r1, [sp, #16]
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 f9e1 	bl	80068b8 <__multadd>
 80064f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f8:	9004      	str	r0, [sp, #16]
 80064fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 814d 	beq.w	800679e <_dtoa_r+0xb2e>
 8006504:	2300      	movs	r3, #0
 8006506:	4631      	mov	r1, r6
 8006508:	220a      	movs	r2, #10
 800650a:	4620      	mov	r0, r4
 800650c:	f000 f9d4 	bl	80068b8 <__multadd>
 8006510:	9b02      	ldr	r3, [sp, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	4606      	mov	r6, r0
 8006516:	dc4f      	bgt.n	80065b8 <_dtoa_r+0x948>
 8006518:	9b06      	ldr	r3, [sp, #24]
 800651a:	2b02      	cmp	r3, #2
 800651c:	dd4c      	ble.n	80065b8 <_dtoa_r+0x948>
 800651e:	e011      	b.n	8006544 <_dtoa_r+0x8d4>
 8006520:	d0c9      	beq.n	80064b6 <_dtoa_r+0x846>
 8006522:	9a05      	ldr	r2, [sp, #20]
 8006524:	331c      	adds	r3, #28
 8006526:	441a      	add	r2, r3
 8006528:	9205      	str	r2, [sp, #20]
 800652a:	441d      	add	r5, r3
 800652c:	4498      	add	r8, r3
 800652e:	e7c2      	b.n	80064b6 <_dtoa_r+0x846>
 8006530:	4603      	mov	r3, r0
 8006532:	e7f6      	b.n	8006522 <_dtoa_r+0x8b2>
 8006534:	f1b9 0f00 	cmp.w	r9, #0
 8006538:	dc38      	bgt.n	80065ac <_dtoa_r+0x93c>
 800653a:	9b06      	ldr	r3, [sp, #24]
 800653c:	2b02      	cmp	r3, #2
 800653e:	dd35      	ble.n	80065ac <_dtoa_r+0x93c>
 8006540:	f8cd 9008 	str.w	r9, [sp, #8]
 8006544:	9b02      	ldr	r3, [sp, #8]
 8006546:	b963      	cbnz	r3, 8006562 <_dtoa_r+0x8f2>
 8006548:	4639      	mov	r1, r7
 800654a:	2205      	movs	r2, #5
 800654c:	4620      	mov	r0, r4
 800654e:	f000 f9b3 	bl	80068b8 <__multadd>
 8006552:	4601      	mov	r1, r0
 8006554:	4607      	mov	r7, r0
 8006556:	9804      	ldr	r0, [sp, #16]
 8006558:	f000 fb78 	bl	8006c4c <__mcmp>
 800655c:	2800      	cmp	r0, #0
 800655e:	f73f adcc 	bgt.w	80060fa <_dtoa_r+0x48a>
 8006562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006564:	465d      	mov	r5, fp
 8006566:	ea6f 0a03 	mvn.w	sl, r3
 800656a:	f04f 0900 	mov.w	r9, #0
 800656e:	4639      	mov	r1, r7
 8006570:	4620      	mov	r0, r4
 8006572:	f000 f98a 	bl	800688a <_Bfree>
 8006576:	2e00      	cmp	r6, #0
 8006578:	f43f aeb7 	beq.w	80062ea <_dtoa_r+0x67a>
 800657c:	f1b9 0f00 	cmp.w	r9, #0
 8006580:	d005      	beq.n	800658e <_dtoa_r+0x91e>
 8006582:	45b1      	cmp	r9, r6
 8006584:	d003      	beq.n	800658e <_dtoa_r+0x91e>
 8006586:	4649      	mov	r1, r9
 8006588:	4620      	mov	r0, r4
 800658a:	f000 f97e 	bl	800688a <_Bfree>
 800658e:	4631      	mov	r1, r6
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f97a 	bl	800688a <_Bfree>
 8006596:	e6a8      	b.n	80062ea <_dtoa_r+0x67a>
 8006598:	2700      	movs	r7, #0
 800659a:	463e      	mov	r6, r7
 800659c:	e7e1      	b.n	8006562 <_dtoa_r+0x8f2>
 800659e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80065a2:	463e      	mov	r6, r7
 80065a4:	e5a9      	b.n	80060fa <_dtoa_r+0x48a>
 80065a6:	bf00      	nop
 80065a8:	40240000 	.word	0x40240000
 80065ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80fa 	beq.w	80067ac <_dtoa_r+0xb3c>
 80065b8:	2d00      	cmp	r5, #0
 80065ba:	dd05      	ble.n	80065c8 <_dtoa_r+0x958>
 80065bc:	4631      	mov	r1, r6
 80065be:	462a      	mov	r2, r5
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 faef 	bl	8006ba4 <__lshift>
 80065c6:	4606      	mov	r6, r0
 80065c8:	9b07      	ldr	r3, [sp, #28]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d04c      	beq.n	8006668 <_dtoa_r+0x9f8>
 80065ce:	6871      	ldr	r1, [r6, #4]
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 f926 	bl	8006822 <_Balloc>
 80065d6:	6932      	ldr	r2, [r6, #16]
 80065d8:	3202      	adds	r2, #2
 80065da:	4605      	mov	r5, r0
 80065dc:	0092      	lsls	r2, r2, #2
 80065de:	f106 010c 	add.w	r1, r6, #12
 80065e2:	300c      	adds	r0, #12
 80065e4:	f000 f912 	bl	800680c <memcpy>
 80065e8:	2201      	movs	r2, #1
 80065ea:	4629      	mov	r1, r5
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 fad9 	bl	8006ba4 <__lshift>
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	f8cd b014 	str.w	fp, [sp, #20]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	46b1      	mov	r9, r6
 80065fe:	9307      	str	r3, [sp, #28]
 8006600:	4606      	mov	r6, r0
 8006602:	4639      	mov	r1, r7
 8006604:	9804      	ldr	r0, [sp, #16]
 8006606:	f7ff faa7 	bl	8005b58 <quorem>
 800660a:	4649      	mov	r1, r9
 800660c:	4605      	mov	r5, r0
 800660e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006612:	9804      	ldr	r0, [sp, #16]
 8006614:	f000 fb1a 	bl	8006c4c <__mcmp>
 8006618:	4632      	mov	r2, r6
 800661a:	9000      	str	r0, [sp, #0]
 800661c:	4639      	mov	r1, r7
 800661e:	4620      	mov	r0, r4
 8006620:	f000 fb2e 	bl	8006c80 <__mdiff>
 8006624:	68c3      	ldr	r3, [r0, #12]
 8006626:	4602      	mov	r2, r0
 8006628:	bb03      	cbnz	r3, 800666c <_dtoa_r+0x9fc>
 800662a:	4601      	mov	r1, r0
 800662c:	9008      	str	r0, [sp, #32]
 800662e:	9804      	ldr	r0, [sp, #16]
 8006630:	f000 fb0c 	bl	8006c4c <__mcmp>
 8006634:	9a08      	ldr	r2, [sp, #32]
 8006636:	4603      	mov	r3, r0
 8006638:	4611      	mov	r1, r2
 800663a:	4620      	mov	r0, r4
 800663c:	9308      	str	r3, [sp, #32]
 800663e:	f000 f924 	bl	800688a <_Bfree>
 8006642:	9b08      	ldr	r3, [sp, #32]
 8006644:	b9a3      	cbnz	r3, 8006670 <_dtoa_r+0xa00>
 8006646:	9a06      	ldr	r2, [sp, #24]
 8006648:	b992      	cbnz	r2, 8006670 <_dtoa_r+0xa00>
 800664a:	9a07      	ldr	r2, [sp, #28]
 800664c:	b982      	cbnz	r2, 8006670 <_dtoa_r+0xa00>
 800664e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006652:	d029      	beq.n	80066a8 <_dtoa_r+0xa38>
 8006654:	9b00      	ldr	r3, [sp, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	dd01      	ble.n	800665e <_dtoa_r+0x9ee>
 800665a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800665e:	9b05      	ldr	r3, [sp, #20]
 8006660:	1c5d      	adds	r5, r3, #1
 8006662:	f883 8000 	strb.w	r8, [r3]
 8006666:	e782      	b.n	800656e <_dtoa_r+0x8fe>
 8006668:	4630      	mov	r0, r6
 800666a:	e7c2      	b.n	80065f2 <_dtoa_r+0x982>
 800666c:	2301      	movs	r3, #1
 800666e:	e7e3      	b.n	8006638 <_dtoa_r+0x9c8>
 8006670:	9a00      	ldr	r2, [sp, #0]
 8006672:	2a00      	cmp	r2, #0
 8006674:	db04      	blt.n	8006680 <_dtoa_r+0xa10>
 8006676:	d125      	bne.n	80066c4 <_dtoa_r+0xa54>
 8006678:	9a06      	ldr	r2, [sp, #24]
 800667a:	bb1a      	cbnz	r2, 80066c4 <_dtoa_r+0xa54>
 800667c:	9a07      	ldr	r2, [sp, #28]
 800667e:	bb0a      	cbnz	r2, 80066c4 <_dtoa_r+0xa54>
 8006680:	2b00      	cmp	r3, #0
 8006682:	ddec      	ble.n	800665e <_dtoa_r+0x9ee>
 8006684:	2201      	movs	r2, #1
 8006686:	9904      	ldr	r1, [sp, #16]
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fa8b 	bl	8006ba4 <__lshift>
 800668e:	4639      	mov	r1, r7
 8006690:	9004      	str	r0, [sp, #16]
 8006692:	f000 fadb 	bl	8006c4c <__mcmp>
 8006696:	2800      	cmp	r0, #0
 8006698:	dc03      	bgt.n	80066a2 <_dtoa_r+0xa32>
 800669a:	d1e0      	bne.n	800665e <_dtoa_r+0x9ee>
 800669c:	f018 0f01 	tst.w	r8, #1
 80066a0:	d0dd      	beq.n	800665e <_dtoa_r+0x9ee>
 80066a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066a6:	d1d8      	bne.n	800665a <_dtoa_r+0x9ea>
 80066a8:	9b05      	ldr	r3, [sp, #20]
 80066aa:	9a05      	ldr	r2, [sp, #20]
 80066ac:	1c5d      	adds	r5, r3, #1
 80066ae:	2339      	movs	r3, #57	; 0x39
 80066b0:	7013      	strb	r3, [r2, #0]
 80066b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066b6:	2b39      	cmp	r3, #57	; 0x39
 80066b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80066bc:	d04f      	beq.n	800675e <_dtoa_r+0xaee>
 80066be:	3301      	adds	r3, #1
 80066c0:	7013      	strb	r3, [r2, #0]
 80066c2:	e754      	b.n	800656e <_dtoa_r+0x8fe>
 80066c4:	9a05      	ldr	r2, [sp, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f102 0501 	add.w	r5, r2, #1
 80066cc:	dd06      	ble.n	80066dc <_dtoa_r+0xa6c>
 80066ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066d2:	d0e9      	beq.n	80066a8 <_dtoa_r+0xa38>
 80066d4:	f108 0801 	add.w	r8, r8, #1
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	e7c2      	b.n	8006662 <_dtoa_r+0x9f2>
 80066dc:	9a02      	ldr	r2, [sp, #8]
 80066de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80066e2:	eba5 030b 	sub.w	r3, r5, fp
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d021      	beq.n	800672e <_dtoa_r+0xabe>
 80066ea:	2300      	movs	r3, #0
 80066ec:	220a      	movs	r2, #10
 80066ee:	9904      	ldr	r1, [sp, #16]
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 f8e1 	bl	80068b8 <__multadd>
 80066f6:	45b1      	cmp	r9, r6
 80066f8:	9004      	str	r0, [sp, #16]
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	f04f 020a 	mov.w	r2, #10
 8006702:	4649      	mov	r1, r9
 8006704:	4620      	mov	r0, r4
 8006706:	d105      	bne.n	8006714 <_dtoa_r+0xaa4>
 8006708:	f000 f8d6 	bl	80068b8 <__multadd>
 800670c:	4681      	mov	r9, r0
 800670e:	4606      	mov	r6, r0
 8006710:	9505      	str	r5, [sp, #20]
 8006712:	e776      	b.n	8006602 <_dtoa_r+0x992>
 8006714:	f000 f8d0 	bl	80068b8 <__multadd>
 8006718:	4631      	mov	r1, r6
 800671a:	4681      	mov	r9, r0
 800671c:	2300      	movs	r3, #0
 800671e:	220a      	movs	r2, #10
 8006720:	4620      	mov	r0, r4
 8006722:	f000 f8c9 	bl	80068b8 <__multadd>
 8006726:	4606      	mov	r6, r0
 8006728:	e7f2      	b.n	8006710 <_dtoa_r+0xaa0>
 800672a:	f04f 0900 	mov.w	r9, #0
 800672e:	2201      	movs	r2, #1
 8006730:	9904      	ldr	r1, [sp, #16]
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fa36 	bl	8006ba4 <__lshift>
 8006738:	4639      	mov	r1, r7
 800673a:	9004      	str	r0, [sp, #16]
 800673c:	f000 fa86 	bl	8006c4c <__mcmp>
 8006740:	2800      	cmp	r0, #0
 8006742:	dcb6      	bgt.n	80066b2 <_dtoa_r+0xa42>
 8006744:	d102      	bne.n	800674c <_dtoa_r+0xadc>
 8006746:	f018 0f01 	tst.w	r8, #1
 800674a:	d1b2      	bne.n	80066b2 <_dtoa_r+0xa42>
 800674c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006750:	2b30      	cmp	r3, #48	; 0x30
 8006752:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006756:	f47f af0a 	bne.w	800656e <_dtoa_r+0x8fe>
 800675a:	4615      	mov	r5, r2
 800675c:	e7f6      	b.n	800674c <_dtoa_r+0xadc>
 800675e:	4593      	cmp	fp, r2
 8006760:	d105      	bne.n	800676e <_dtoa_r+0xafe>
 8006762:	2331      	movs	r3, #49	; 0x31
 8006764:	f10a 0a01 	add.w	sl, sl, #1
 8006768:	f88b 3000 	strb.w	r3, [fp]
 800676c:	e6ff      	b.n	800656e <_dtoa_r+0x8fe>
 800676e:	4615      	mov	r5, r2
 8006770:	e79f      	b.n	80066b2 <_dtoa_r+0xa42>
 8006772:	f8df b064 	ldr.w	fp, [pc, #100]	; 80067d8 <_dtoa_r+0xb68>
 8006776:	e007      	b.n	8006788 <_dtoa_r+0xb18>
 8006778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800677a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80067dc <_dtoa_r+0xb6c>
 800677e:	b11b      	cbz	r3, 8006788 <_dtoa_r+0xb18>
 8006780:	f10b 0308 	add.w	r3, fp, #8
 8006784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	4658      	mov	r0, fp
 800678a:	b017      	add	sp, #92	; 0x5c
 800678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	9b06      	ldr	r3, [sp, #24]
 8006792:	2b01      	cmp	r3, #1
 8006794:	f77f ae35 	ble.w	8006402 <_dtoa_r+0x792>
 8006798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800679a:	9307      	str	r3, [sp, #28]
 800679c:	e649      	b.n	8006432 <_dtoa_r+0x7c2>
 800679e:	9b02      	ldr	r3, [sp, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc03      	bgt.n	80067ac <_dtoa_r+0xb3c>
 80067a4:	9b06      	ldr	r3, [sp, #24]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	f73f aecc 	bgt.w	8006544 <_dtoa_r+0x8d4>
 80067ac:	465d      	mov	r5, fp
 80067ae:	4639      	mov	r1, r7
 80067b0:	9804      	ldr	r0, [sp, #16]
 80067b2:	f7ff f9d1 	bl	8005b58 <quorem>
 80067b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80067ba:	f805 8b01 	strb.w	r8, [r5], #1
 80067be:	9a02      	ldr	r2, [sp, #8]
 80067c0:	eba5 030b 	sub.w	r3, r5, fp
 80067c4:	429a      	cmp	r2, r3
 80067c6:	ddb0      	ble.n	800672a <_dtoa_r+0xaba>
 80067c8:	2300      	movs	r3, #0
 80067ca:	220a      	movs	r2, #10
 80067cc:	9904      	ldr	r1, [sp, #16]
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 f872 	bl	80068b8 <__multadd>
 80067d4:	9004      	str	r0, [sp, #16]
 80067d6:	e7ea      	b.n	80067ae <_dtoa_r+0xb3e>
 80067d8:	0800736c 	.word	0x0800736c
 80067dc:	08007390 	.word	0x08007390

080067e0 <_localeconv_r>:
 80067e0:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <_localeconv_r+0x14>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6a18      	ldr	r0, [r3, #32]
 80067e6:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <_localeconv_r+0x18>)
 80067e8:	2800      	cmp	r0, #0
 80067ea:	bf08      	it	eq
 80067ec:	4618      	moveq	r0, r3
 80067ee:	30f0      	adds	r0, #240	; 0xf0
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	2000000c 	.word	0x2000000c
 80067f8:	20000070 	.word	0x20000070

080067fc <malloc>:
 80067fc:	4b02      	ldr	r3, [pc, #8]	; (8006808 <malloc+0xc>)
 80067fe:	4601      	mov	r1, r0
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f000 bb45 	b.w	8006e90 <_malloc_r>
 8006806:	bf00      	nop
 8006808:	2000000c 	.word	0x2000000c

0800680c <memcpy>:
 800680c:	b510      	push	{r4, lr}
 800680e:	1e43      	subs	r3, r0, #1
 8006810:	440a      	add	r2, r1
 8006812:	4291      	cmp	r1, r2
 8006814:	d100      	bne.n	8006818 <memcpy+0xc>
 8006816:	bd10      	pop	{r4, pc}
 8006818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800681c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006820:	e7f7      	b.n	8006812 <memcpy+0x6>

08006822 <_Balloc>:
 8006822:	b570      	push	{r4, r5, r6, lr}
 8006824:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006826:	4604      	mov	r4, r0
 8006828:	460e      	mov	r6, r1
 800682a:	b93d      	cbnz	r5, 800683c <_Balloc+0x1a>
 800682c:	2010      	movs	r0, #16
 800682e:	f7ff ffe5 	bl	80067fc <malloc>
 8006832:	6260      	str	r0, [r4, #36]	; 0x24
 8006834:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006838:	6005      	str	r5, [r0, #0]
 800683a:	60c5      	str	r5, [r0, #12]
 800683c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800683e:	68eb      	ldr	r3, [r5, #12]
 8006840:	b183      	cbz	r3, 8006864 <_Balloc+0x42>
 8006842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800684a:	b9b8      	cbnz	r0, 800687c <_Balloc+0x5a>
 800684c:	2101      	movs	r1, #1
 800684e:	fa01 f506 	lsl.w	r5, r1, r6
 8006852:	1d6a      	adds	r2, r5, #5
 8006854:	0092      	lsls	r2, r2, #2
 8006856:	4620      	mov	r0, r4
 8006858:	f000 fabe 	bl	8006dd8 <_calloc_r>
 800685c:	b160      	cbz	r0, 8006878 <_Balloc+0x56>
 800685e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006862:	e00e      	b.n	8006882 <_Balloc+0x60>
 8006864:	2221      	movs	r2, #33	; 0x21
 8006866:	2104      	movs	r1, #4
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fab5 	bl	8006dd8 <_calloc_r>
 800686e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006870:	60e8      	str	r0, [r5, #12]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e4      	bne.n	8006842 <_Balloc+0x20>
 8006878:	2000      	movs	r0, #0
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	6802      	ldr	r2, [r0, #0]
 800687e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006882:	2300      	movs	r3, #0
 8006884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006888:	e7f7      	b.n	800687a <_Balloc+0x58>

0800688a <_Bfree>:
 800688a:	b570      	push	{r4, r5, r6, lr}
 800688c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800688e:	4606      	mov	r6, r0
 8006890:	460d      	mov	r5, r1
 8006892:	b93c      	cbnz	r4, 80068a4 <_Bfree+0x1a>
 8006894:	2010      	movs	r0, #16
 8006896:	f7ff ffb1 	bl	80067fc <malloc>
 800689a:	6270      	str	r0, [r6, #36]	; 0x24
 800689c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068a0:	6004      	str	r4, [r0, #0]
 80068a2:	60c4      	str	r4, [r0, #12]
 80068a4:	b13d      	cbz	r5, 80068b6 <_Bfree+0x2c>
 80068a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80068a8:	686a      	ldr	r2, [r5, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068b0:	6029      	str	r1, [r5, #0]
 80068b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80068b6:	bd70      	pop	{r4, r5, r6, pc}

080068b8 <__multadd>:
 80068b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068bc:	690d      	ldr	r5, [r1, #16]
 80068be:	461f      	mov	r7, r3
 80068c0:	4606      	mov	r6, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	f101 0c14 	add.w	ip, r1, #20
 80068c8:	2300      	movs	r3, #0
 80068ca:	f8dc 0000 	ldr.w	r0, [ip]
 80068ce:	b281      	uxth	r1, r0
 80068d0:	fb02 7101 	mla	r1, r2, r1, r7
 80068d4:	0c0f      	lsrs	r7, r1, #16
 80068d6:	0c00      	lsrs	r0, r0, #16
 80068d8:	fb02 7000 	mla	r0, r2, r0, r7
 80068dc:	b289      	uxth	r1, r1
 80068de:	3301      	adds	r3, #1
 80068e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80068e4:	429d      	cmp	r5, r3
 80068e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80068ea:	f84c 1b04 	str.w	r1, [ip], #4
 80068ee:	dcec      	bgt.n	80068ca <__multadd+0x12>
 80068f0:	b1d7      	cbz	r7, 8006928 <__multadd+0x70>
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	42ab      	cmp	r3, r5
 80068f6:	dc12      	bgt.n	800691e <__multadd+0x66>
 80068f8:	6861      	ldr	r1, [r4, #4]
 80068fa:	4630      	mov	r0, r6
 80068fc:	3101      	adds	r1, #1
 80068fe:	f7ff ff90 	bl	8006822 <_Balloc>
 8006902:	6922      	ldr	r2, [r4, #16]
 8006904:	3202      	adds	r2, #2
 8006906:	f104 010c 	add.w	r1, r4, #12
 800690a:	4680      	mov	r8, r0
 800690c:	0092      	lsls	r2, r2, #2
 800690e:	300c      	adds	r0, #12
 8006910:	f7ff ff7c 	bl	800680c <memcpy>
 8006914:	4621      	mov	r1, r4
 8006916:	4630      	mov	r0, r6
 8006918:	f7ff ffb7 	bl	800688a <_Bfree>
 800691c:	4644      	mov	r4, r8
 800691e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006922:	3501      	adds	r5, #1
 8006924:	615f      	str	r7, [r3, #20]
 8006926:	6125      	str	r5, [r4, #16]
 8006928:	4620      	mov	r0, r4
 800692a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800692e <__hi0bits>:
 800692e:	0c02      	lsrs	r2, r0, #16
 8006930:	0412      	lsls	r2, r2, #16
 8006932:	4603      	mov	r3, r0
 8006934:	b9b2      	cbnz	r2, 8006964 <__hi0bits+0x36>
 8006936:	0403      	lsls	r3, r0, #16
 8006938:	2010      	movs	r0, #16
 800693a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800693e:	bf04      	itt	eq
 8006940:	021b      	lsleq	r3, r3, #8
 8006942:	3008      	addeq	r0, #8
 8006944:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006948:	bf04      	itt	eq
 800694a:	011b      	lsleq	r3, r3, #4
 800694c:	3004      	addeq	r0, #4
 800694e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006952:	bf04      	itt	eq
 8006954:	009b      	lsleq	r3, r3, #2
 8006956:	3002      	addeq	r0, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	db06      	blt.n	800696a <__hi0bits+0x3c>
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	d503      	bpl.n	8006968 <__hi0bits+0x3a>
 8006960:	3001      	adds	r0, #1
 8006962:	4770      	bx	lr
 8006964:	2000      	movs	r0, #0
 8006966:	e7e8      	b.n	800693a <__hi0bits+0xc>
 8006968:	2020      	movs	r0, #32
 800696a:	4770      	bx	lr

0800696c <__lo0bits>:
 800696c:	6803      	ldr	r3, [r0, #0]
 800696e:	f013 0207 	ands.w	r2, r3, #7
 8006972:	4601      	mov	r1, r0
 8006974:	d00b      	beq.n	800698e <__lo0bits+0x22>
 8006976:	07da      	lsls	r2, r3, #31
 8006978:	d423      	bmi.n	80069c2 <__lo0bits+0x56>
 800697a:	0798      	lsls	r0, r3, #30
 800697c:	bf49      	itett	mi
 800697e:	085b      	lsrmi	r3, r3, #1
 8006980:	089b      	lsrpl	r3, r3, #2
 8006982:	2001      	movmi	r0, #1
 8006984:	600b      	strmi	r3, [r1, #0]
 8006986:	bf5c      	itt	pl
 8006988:	600b      	strpl	r3, [r1, #0]
 800698a:	2002      	movpl	r0, #2
 800698c:	4770      	bx	lr
 800698e:	b298      	uxth	r0, r3
 8006990:	b9a8      	cbnz	r0, 80069be <__lo0bits+0x52>
 8006992:	0c1b      	lsrs	r3, r3, #16
 8006994:	2010      	movs	r0, #16
 8006996:	f013 0fff 	tst.w	r3, #255	; 0xff
 800699a:	bf04      	itt	eq
 800699c:	0a1b      	lsreq	r3, r3, #8
 800699e:	3008      	addeq	r0, #8
 80069a0:	071a      	lsls	r2, r3, #28
 80069a2:	bf04      	itt	eq
 80069a4:	091b      	lsreq	r3, r3, #4
 80069a6:	3004      	addeq	r0, #4
 80069a8:	079a      	lsls	r2, r3, #30
 80069aa:	bf04      	itt	eq
 80069ac:	089b      	lsreq	r3, r3, #2
 80069ae:	3002      	addeq	r0, #2
 80069b0:	07da      	lsls	r2, r3, #31
 80069b2:	d402      	bmi.n	80069ba <__lo0bits+0x4e>
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	d006      	beq.n	80069c6 <__lo0bits+0x5a>
 80069b8:	3001      	adds	r0, #1
 80069ba:	600b      	str	r3, [r1, #0]
 80069bc:	4770      	bx	lr
 80069be:	4610      	mov	r0, r2
 80069c0:	e7e9      	b.n	8006996 <__lo0bits+0x2a>
 80069c2:	2000      	movs	r0, #0
 80069c4:	4770      	bx	lr
 80069c6:	2020      	movs	r0, #32
 80069c8:	4770      	bx	lr

080069ca <__i2b>:
 80069ca:	b510      	push	{r4, lr}
 80069cc:	460c      	mov	r4, r1
 80069ce:	2101      	movs	r1, #1
 80069d0:	f7ff ff27 	bl	8006822 <_Balloc>
 80069d4:	2201      	movs	r2, #1
 80069d6:	6144      	str	r4, [r0, #20]
 80069d8:	6102      	str	r2, [r0, #16]
 80069da:	bd10      	pop	{r4, pc}

080069dc <__multiply>:
 80069dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	4614      	mov	r4, r2
 80069e2:	690a      	ldr	r2, [r1, #16]
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	bfb8      	it	lt
 80069ea:	460b      	movlt	r3, r1
 80069ec:	4688      	mov	r8, r1
 80069ee:	bfbc      	itt	lt
 80069f0:	46a0      	movlt	r8, r4
 80069f2:	461c      	movlt	r4, r3
 80069f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80069fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a04:	eb07 0609 	add.w	r6, r7, r9
 8006a08:	42b3      	cmp	r3, r6
 8006a0a:	bfb8      	it	lt
 8006a0c:	3101      	addlt	r1, #1
 8006a0e:	f7ff ff08 	bl	8006822 <_Balloc>
 8006a12:	f100 0514 	add.w	r5, r0, #20
 8006a16:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006a1a:	462b      	mov	r3, r5
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4573      	cmp	r3, lr
 8006a20:	d316      	bcc.n	8006a50 <__multiply+0x74>
 8006a22:	f104 0214 	add.w	r2, r4, #20
 8006a26:	f108 0114 	add.w	r1, r8, #20
 8006a2a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006a2e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	9b00      	ldr	r3, [sp, #0]
 8006a36:	9201      	str	r2, [sp, #4]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d80c      	bhi.n	8006a56 <__multiply+0x7a>
 8006a3c:	2e00      	cmp	r6, #0
 8006a3e:	dd03      	ble.n	8006a48 <__multiply+0x6c>
 8006a40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d05d      	beq.n	8006b04 <__multiply+0x128>
 8006a48:	6106      	str	r6, [r0, #16]
 8006a4a:	b003      	add	sp, #12
 8006a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a50:	f843 2b04 	str.w	r2, [r3], #4
 8006a54:	e7e3      	b.n	8006a1e <__multiply+0x42>
 8006a56:	f8b2 b000 	ldrh.w	fp, [r2]
 8006a5a:	f1bb 0f00 	cmp.w	fp, #0
 8006a5e:	d023      	beq.n	8006aa8 <__multiply+0xcc>
 8006a60:	4689      	mov	r9, r1
 8006a62:	46ac      	mov	ip, r5
 8006a64:	f04f 0800 	mov.w	r8, #0
 8006a68:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a6c:	f8dc a000 	ldr.w	sl, [ip]
 8006a70:	b2a3      	uxth	r3, r4
 8006a72:	fa1f fa8a 	uxth.w	sl, sl
 8006a76:	fb0b a303 	mla	r3, fp, r3, sl
 8006a7a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006a7e:	f8dc 4000 	ldr.w	r4, [ip]
 8006a82:	4443      	add	r3, r8
 8006a84:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a88:	fb0b 840a 	mla	r4, fp, sl, r8
 8006a8c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006a90:	46e2      	mov	sl, ip
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a98:	454f      	cmp	r7, r9
 8006a9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a9e:	f84a 3b04 	str.w	r3, [sl], #4
 8006aa2:	d82b      	bhi.n	8006afc <__multiply+0x120>
 8006aa4:	f8cc 8004 	str.w	r8, [ip, #4]
 8006aa8:	9b01      	ldr	r3, [sp, #4]
 8006aaa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006aae:	3204      	adds	r2, #4
 8006ab0:	f1ba 0f00 	cmp.w	sl, #0
 8006ab4:	d020      	beq.n	8006af8 <__multiply+0x11c>
 8006ab6:	682b      	ldr	r3, [r5, #0]
 8006ab8:	4689      	mov	r9, r1
 8006aba:	46a8      	mov	r8, r5
 8006abc:	f04f 0b00 	mov.w	fp, #0
 8006ac0:	f8b9 c000 	ldrh.w	ip, [r9]
 8006ac4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006ac8:	fb0a 440c 	mla	r4, sl, ip, r4
 8006acc:	445c      	add	r4, fp
 8006ace:	46c4      	mov	ip, r8
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ad6:	f84c 3b04 	str.w	r3, [ip], #4
 8006ada:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ade:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	fb0a b303 	mla	r3, sl, r3, fp
 8006ae8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006aec:	454f      	cmp	r7, r9
 8006aee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006af2:	d805      	bhi.n	8006b00 <__multiply+0x124>
 8006af4:	f8c8 3004 	str.w	r3, [r8, #4]
 8006af8:	3504      	adds	r5, #4
 8006afa:	e79b      	b.n	8006a34 <__multiply+0x58>
 8006afc:	46d4      	mov	ip, sl
 8006afe:	e7b3      	b.n	8006a68 <__multiply+0x8c>
 8006b00:	46e0      	mov	r8, ip
 8006b02:	e7dd      	b.n	8006ac0 <__multiply+0xe4>
 8006b04:	3e01      	subs	r6, #1
 8006b06:	e799      	b.n	8006a3c <__multiply+0x60>

08006b08 <__pow5mult>:
 8006b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	4615      	mov	r5, r2
 8006b0e:	f012 0203 	ands.w	r2, r2, #3
 8006b12:	4606      	mov	r6, r0
 8006b14:	460f      	mov	r7, r1
 8006b16:	d007      	beq.n	8006b28 <__pow5mult+0x20>
 8006b18:	3a01      	subs	r2, #1
 8006b1a:	4c21      	ldr	r4, [pc, #132]	; (8006ba0 <__pow5mult+0x98>)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b22:	f7ff fec9 	bl	80068b8 <__multadd>
 8006b26:	4607      	mov	r7, r0
 8006b28:	10ad      	asrs	r5, r5, #2
 8006b2a:	d035      	beq.n	8006b98 <__pow5mult+0x90>
 8006b2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b2e:	b93c      	cbnz	r4, 8006b40 <__pow5mult+0x38>
 8006b30:	2010      	movs	r0, #16
 8006b32:	f7ff fe63 	bl	80067fc <malloc>
 8006b36:	6270      	str	r0, [r6, #36]	; 0x24
 8006b38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b3c:	6004      	str	r4, [r0, #0]
 8006b3e:	60c4      	str	r4, [r0, #12]
 8006b40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b48:	b94c      	cbnz	r4, 8006b5e <__pow5mult+0x56>
 8006b4a:	f240 2171 	movw	r1, #625	; 0x271
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f7ff ff3b 	bl	80069ca <__i2b>
 8006b54:	2300      	movs	r3, #0
 8006b56:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	6003      	str	r3, [r0, #0]
 8006b5e:	f04f 0800 	mov.w	r8, #0
 8006b62:	07eb      	lsls	r3, r5, #31
 8006b64:	d50a      	bpl.n	8006b7c <__pow5mult+0x74>
 8006b66:	4639      	mov	r1, r7
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff ff36 	bl	80069dc <__multiply>
 8006b70:	4639      	mov	r1, r7
 8006b72:	4681      	mov	r9, r0
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff fe88 	bl	800688a <_Bfree>
 8006b7a:	464f      	mov	r7, r9
 8006b7c:	106d      	asrs	r5, r5, #1
 8006b7e:	d00b      	beq.n	8006b98 <__pow5mult+0x90>
 8006b80:	6820      	ldr	r0, [r4, #0]
 8006b82:	b938      	cbnz	r0, 8006b94 <__pow5mult+0x8c>
 8006b84:	4622      	mov	r2, r4
 8006b86:	4621      	mov	r1, r4
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7ff ff27 	bl	80069dc <__multiply>
 8006b8e:	6020      	str	r0, [r4, #0]
 8006b90:	f8c0 8000 	str.w	r8, [r0]
 8006b94:	4604      	mov	r4, r0
 8006b96:	e7e4      	b.n	8006b62 <__pow5mult+0x5a>
 8006b98:	4638      	mov	r0, r7
 8006b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b9e:	bf00      	nop
 8006ba0:	08007490 	.word	0x08007490

08006ba4 <__lshift>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	460c      	mov	r4, r1
 8006baa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bae:	6923      	ldr	r3, [r4, #16]
 8006bb0:	6849      	ldr	r1, [r1, #4]
 8006bb2:	eb0a 0903 	add.w	r9, sl, r3
 8006bb6:	68a3      	ldr	r3, [r4, #8]
 8006bb8:	4607      	mov	r7, r0
 8006bba:	4616      	mov	r6, r2
 8006bbc:	f109 0501 	add.w	r5, r9, #1
 8006bc0:	42ab      	cmp	r3, r5
 8006bc2:	db32      	blt.n	8006c2a <__lshift+0x86>
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff fe2c 	bl	8006822 <_Balloc>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4680      	mov	r8, r0
 8006bce:	f100 0114 	add.w	r1, r0, #20
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4553      	cmp	r3, sl
 8006bd6:	db2b      	blt.n	8006c30 <__lshift+0x8c>
 8006bd8:	6920      	ldr	r0, [r4, #16]
 8006bda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bde:	f104 0314 	add.w	r3, r4, #20
 8006be2:	f016 021f 	ands.w	r2, r6, #31
 8006be6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bee:	d025      	beq.n	8006c3c <__lshift+0x98>
 8006bf0:	f1c2 0e20 	rsb	lr, r2, #32
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	681e      	ldr	r6, [r3, #0]
 8006bf8:	468a      	mov	sl, r1
 8006bfa:	4096      	lsls	r6, r2
 8006bfc:	4330      	orrs	r0, r6
 8006bfe:	f84a 0b04 	str.w	r0, [sl], #4
 8006c02:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c06:	459c      	cmp	ip, r3
 8006c08:	fa20 f00e 	lsr.w	r0, r0, lr
 8006c0c:	d814      	bhi.n	8006c38 <__lshift+0x94>
 8006c0e:	6048      	str	r0, [r1, #4]
 8006c10:	b108      	cbz	r0, 8006c16 <__lshift+0x72>
 8006c12:	f109 0502 	add.w	r5, r9, #2
 8006c16:	3d01      	subs	r5, #1
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f8c8 5010 	str.w	r5, [r8, #16]
 8006c1e:	4621      	mov	r1, r4
 8006c20:	f7ff fe33 	bl	800688a <_Bfree>
 8006c24:	4640      	mov	r0, r8
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	3101      	adds	r1, #1
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	e7c7      	b.n	8006bc0 <__lshift+0x1c>
 8006c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c34:	3301      	adds	r3, #1
 8006c36:	e7cd      	b.n	8006bd4 <__lshift+0x30>
 8006c38:	4651      	mov	r1, sl
 8006c3a:	e7dc      	b.n	8006bf6 <__lshift+0x52>
 8006c3c:	3904      	subs	r1, #4
 8006c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c42:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c46:	459c      	cmp	ip, r3
 8006c48:	d8f9      	bhi.n	8006c3e <__lshift+0x9a>
 8006c4a:	e7e4      	b.n	8006c16 <__lshift+0x72>

08006c4c <__mcmp>:
 8006c4c:	6903      	ldr	r3, [r0, #16]
 8006c4e:	690a      	ldr	r2, [r1, #16]
 8006c50:	1a9b      	subs	r3, r3, r2
 8006c52:	b530      	push	{r4, r5, lr}
 8006c54:	d10c      	bne.n	8006c70 <__mcmp+0x24>
 8006c56:	0092      	lsls	r2, r2, #2
 8006c58:	3014      	adds	r0, #20
 8006c5a:	3114      	adds	r1, #20
 8006c5c:	1884      	adds	r4, r0, r2
 8006c5e:	4411      	add	r1, r2
 8006c60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c68:	4295      	cmp	r5, r2
 8006c6a:	d003      	beq.n	8006c74 <__mcmp+0x28>
 8006c6c:	d305      	bcc.n	8006c7a <__mcmp+0x2e>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	bd30      	pop	{r4, r5, pc}
 8006c74:	42a0      	cmp	r0, r4
 8006c76:	d3f3      	bcc.n	8006c60 <__mcmp+0x14>
 8006c78:	e7fa      	b.n	8006c70 <__mcmp+0x24>
 8006c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c7e:	e7f7      	b.n	8006c70 <__mcmp+0x24>

08006c80 <__mdiff>:
 8006c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	460d      	mov	r5, r1
 8006c86:	4607      	mov	r7, r0
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	f7ff ffdd 	bl	8006c4c <__mcmp>
 8006c92:	1e06      	subs	r6, r0, #0
 8006c94:	d108      	bne.n	8006ca8 <__mdiff+0x28>
 8006c96:	4631      	mov	r1, r6
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff fdc2 	bl	8006822 <_Balloc>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca8:	bfa4      	itt	ge
 8006caa:	4623      	movge	r3, r4
 8006cac:	462c      	movge	r4, r5
 8006cae:	4638      	mov	r0, r7
 8006cb0:	6861      	ldr	r1, [r4, #4]
 8006cb2:	bfa6      	itte	ge
 8006cb4:	461d      	movge	r5, r3
 8006cb6:	2600      	movge	r6, #0
 8006cb8:	2601      	movlt	r6, #1
 8006cba:	f7ff fdb2 	bl	8006822 <_Balloc>
 8006cbe:	692b      	ldr	r3, [r5, #16]
 8006cc0:	60c6      	str	r6, [r0, #12]
 8006cc2:	6926      	ldr	r6, [r4, #16]
 8006cc4:	f105 0914 	add.w	r9, r5, #20
 8006cc8:	f104 0214 	add.w	r2, r4, #20
 8006ccc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006cd0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006cd4:	f100 0514 	add.w	r5, r0, #20
 8006cd8:	f04f 0e00 	mov.w	lr, #0
 8006cdc:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ce0:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ce4:	fa1e f18a 	uxtah	r1, lr, sl
 8006ce8:	b2a3      	uxth	r3, r4
 8006cea:	1ac9      	subs	r1, r1, r3
 8006cec:	0c23      	lsrs	r3, r4, #16
 8006cee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006cf2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006cf6:	b289      	uxth	r1, r1
 8006cf8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006cfc:	45c8      	cmp	r8, r9
 8006cfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d02:	4694      	mov	ip, r2
 8006d04:	f845 3b04 	str.w	r3, [r5], #4
 8006d08:	d8e8      	bhi.n	8006cdc <__mdiff+0x5c>
 8006d0a:	45bc      	cmp	ip, r7
 8006d0c:	d304      	bcc.n	8006d18 <__mdiff+0x98>
 8006d0e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006d12:	b183      	cbz	r3, 8006d36 <__mdiff+0xb6>
 8006d14:	6106      	str	r6, [r0, #16]
 8006d16:	e7c5      	b.n	8006ca4 <__mdiff+0x24>
 8006d18:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d1c:	fa1e f381 	uxtah	r3, lr, r1
 8006d20:	141a      	asrs	r2, r3, #16
 8006d22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d2c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006d30:	f845 3b04 	str.w	r3, [r5], #4
 8006d34:	e7e9      	b.n	8006d0a <__mdiff+0x8a>
 8006d36:	3e01      	subs	r6, #1
 8006d38:	e7e9      	b.n	8006d0e <__mdiff+0x8e>

08006d3a <__d2b>:
 8006d3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d3e:	460e      	mov	r6, r1
 8006d40:	2101      	movs	r1, #1
 8006d42:	ec59 8b10 	vmov	r8, r9, d0
 8006d46:	4615      	mov	r5, r2
 8006d48:	f7ff fd6b 	bl	8006822 <_Balloc>
 8006d4c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006d50:	4607      	mov	r7, r0
 8006d52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d56:	bb34      	cbnz	r4, 8006da6 <__d2b+0x6c>
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	f1b8 0300 	subs.w	r3, r8, #0
 8006d5e:	d027      	beq.n	8006db0 <__d2b+0x76>
 8006d60:	a802      	add	r0, sp, #8
 8006d62:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006d66:	f7ff fe01 	bl	800696c <__lo0bits>
 8006d6a:	9900      	ldr	r1, [sp, #0]
 8006d6c:	b1f0      	cbz	r0, 8006dac <__d2b+0x72>
 8006d6e:	9a01      	ldr	r2, [sp, #4]
 8006d70:	f1c0 0320 	rsb	r3, r0, #32
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	40c2      	lsrs	r2, r0
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	9201      	str	r2, [sp, #4]
 8006d80:	9b01      	ldr	r3, [sp, #4]
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bf14      	ite	ne
 8006d88:	2102      	movne	r1, #2
 8006d8a:	2101      	moveq	r1, #1
 8006d8c:	6139      	str	r1, [r7, #16]
 8006d8e:	b1c4      	cbz	r4, 8006dc2 <__d2b+0x88>
 8006d90:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d94:	4404      	add	r4, r0
 8006d96:	6034      	str	r4, [r6, #0]
 8006d98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d9c:	6028      	str	r0, [r5, #0]
 8006d9e:	4638      	mov	r0, r7
 8006da0:	b003      	add	sp, #12
 8006da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006daa:	e7d5      	b.n	8006d58 <__d2b+0x1e>
 8006dac:	6179      	str	r1, [r7, #20]
 8006dae:	e7e7      	b.n	8006d80 <__d2b+0x46>
 8006db0:	a801      	add	r0, sp, #4
 8006db2:	f7ff fddb 	bl	800696c <__lo0bits>
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	2101      	movs	r1, #1
 8006dbc:	6139      	str	r1, [r7, #16]
 8006dbe:	3020      	adds	r0, #32
 8006dc0:	e7e5      	b.n	8006d8e <__d2b+0x54>
 8006dc2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006dc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006dca:	6030      	str	r0, [r6, #0]
 8006dcc:	6918      	ldr	r0, [r3, #16]
 8006dce:	f7ff fdae 	bl	800692e <__hi0bits>
 8006dd2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006dd6:	e7e1      	b.n	8006d9c <__d2b+0x62>

08006dd8 <_calloc_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	fb02 f401 	mul.w	r4, r2, r1
 8006dde:	4621      	mov	r1, r4
 8006de0:	f000 f856 	bl	8006e90 <_malloc_r>
 8006de4:	4605      	mov	r5, r0
 8006de6:	b118      	cbz	r0, 8006df0 <_calloc_r+0x18>
 8006de8:	4622      	mov	r2, r4
 8006dea:	2100      	movs	r1, #0
 8006dec:	f7fe fa30 	bl	8005250 <memset>
 8006df0:	4628      	mov	r0, r5
 8006df2:	bd38      	pop	{r3, r4, r5, pc}

08006df4 <_free_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4605      	mov	r5, r0
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	d045      	beq.n	8006e88 <_free_r+0x94>
 8006dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e00:	1f0c      	subs	r4, r1, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bfb8      	it	lt
 8006e06:	18e4      	addlt	r4, r4, r3
 8006e08:	f000 fa29 	bl	800725e <__malloc_lock>
 8006e0c:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <_free_r+0x98>)
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	4610      	mov	r0, r2
 8006e12:	b933      	cbnz	r3, 8006e22 <_free_r+0x2e>
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	6014      	str	r4, [r2, #0]
 8006e18:	4628      	mov	r0, r5
 8006e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e1e:	f000 ba1f 	b.w	8007260 <__malloc_unlock>
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	d90c      	bls.n	8006e40 <_free_r+0x4c>
 8006e26:	6821      	ldr	r1, [r4, #0]
 8006e28:	1862      	adds	r2, r4, r1
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	bf04      	itt	eq
 8006e2e:	681a      	ldreq	r2, [r3, #0]
 8006e30:	685b      	ldreq	r3, [r3, #4]
 8006e32:	6063      	str	r3, [r4, #4]
 8006e34:	bf04      	itt	eq
 8006e36:	1852      	addeq	r2, r2, r1
 8006e38:	6022      	streq	r2, [r4, #0]
 8006e3a:	6004      	str	r4, [r0, #0]
 8006e3c:	e7ec      	b.n	8006e18 <_free_r+0x24>
 8006e3e:	4613      	mov	r3, r2
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	b10a      	cbz	r2, 8006e48 <_free_r+0x54>
 8006e44:	42a2      	cmp	r2, r4
 8006e46:	d9fa      	bls.n	8006e3e <_free_r+0x4a>
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	1858      	adds	r0, r3, r1
 8006e4c:	42a0      	cmp	r0, r4
 8006e4e:	d10b      	bne.n	8006e68 <_free_r+0x74>
 8006e50:	6820      	ldr	r0, [r4, #0]
 8006e52:	4401      	add	r1, r0
 8006e54:	1858      	adds	r0, r3, r1
 8006e56:	4282      	cmp	r2, r0
 8006e58:	6019      	str	r1, [r3, #0]
 8006e5a:	d1dd      	bne.n	8006e18 <_free_r+0x24>
 8006e5c:	6810      	ldr	r0, [r2, #0]
 8006e5e:	6852      	ldr	r2, [r2, #4]
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	4401      	add	r1, r0
 8006e64:	6019      	str	r1, [r3, #0]
 8006e66:	e7d7      	b.n	8006e18 <_free_r+0x24>
 8006e68:	d902      	bls.n	8006e70 <_free_r+0x7c>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	e7d3      	b.n	8006e18 <_free_r+0x24>
 8006e70:	6820      	ldr	r0, [r4, #0]
 8006e72:	1821      	adds	r1, r4, r0
 8006e74:	428a      	cmp	r2, r1
 8006e76:	bf04      	itt	eq
 8006e78:	6811      	ldreq	r1, [r2, #0]
 8006e7a:	6852      	ldreq	r2, [r2, #4]
 8006e7c:	6062      	str	r2, [r4, #4]
 8006e7e:	bf04      	itt	eq
 8006e80:	1809      	addeq	r1, r1, r0
 8006e82:	6021      	streq	r1, [r4, #0]
 8006e84:	605c      	str	r4, [r3, #4]
 8006e86:	e7c7      	b.n	8006e18 <_free_r+0x24>
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200001fc 	.word	0x200001fc

08006e90 <_malloc_r>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	1ccd      	adds	r5, r1, #3
 8006e94:	f025 0503 	bic.w	r5, r5, #3
 8006e98:	3508      	adds	r5, #8
 8006e9a:	2d0c      	cmp	r5, #12
 8006e9c:	bf38      	it	cc
 8006e9e:	250c      	movcc	r5, #12
 8006ea0:	2d00      	cmp	r5, #0
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	db01      	blt.n	8006eaa <_malloc_r+0x1a>
 8006ea6:	42a9      	cmp	r1, r5
 8006ea8:	d903      	bls.n	8006eb2 <_malloc_r+0x22>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	6033      	str	r3, [r6, #0]
 8006eae:	2000      	movs	r0, #0
 8006eb0:	bd70      	pop	{r4, r5, r6, pc}
 8006eb2:	f000 f9d4 	bl	800725e <__malloc_lock>
 8006eb6:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <_malloc_r+0xac>)
 8006eb8:	6814      	ldr	r4, [r2, #0]
 8006eba:	4621      	mov	r1, r4
 8006ebc:	b991      	cbnz	r1, 8006ee4 <_malloc_r+0x54>
 8006ebe:	4c20      	ldr	r4, [pc, #128]	; (8006f40 <_malloc_r+0xb0>)
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	b91b      	cbnz	r3, 8006ecc <_malloc_r+0x3c>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 f98f 	bl	80071e8 <_sbrk_r>
 8006eca:	6020      	str	r0, [r4, #0]
 8006ecc:	4629      	mov	r1, r5
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f000 f98a 	bl	80071e8 <_sbrk_r>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d124      	bne.n	8006f22 <_malloc_r+0x92>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	6033      	str	r3, [r6, #0]
 8006edc:	4630      	mov	r0, r6
 8006ede:	f000 f9bf 	bl	8007260 <__malloc_unlock>
 8006ee2:	e7e4      	b.n	8006eae <_malloc_r+0x1e>
 8006ee4:	680b      	ldr	r3, [r1, #0]
 8006ee6:	1b5b      	subs	r3, r3, r5
 8006ee8:	d418      	bmi.n	8006f1c <_malloc_r+0x8c>
 8006eea:	2b0b      	cmp	r3, #11
 8006eec:	d90f      	bls.n	8006f0e <_malloc_r+0x7e>
 8006eee:	600b      	str	r3, [r1, #0]
 8006ef0:	50cd      	str	r5, [r1, r3]
 8006ef2:	18cc      	adds	r4, r1, r3
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 f9b3 	bl	8007260 <__malloc_unlock>
 8006efa:	f104 000b 	add.w	r0, r4, #11
 8006efe:	1d23      	adds	r3, r4, #4
 8006f00:	f020 0007 	bic.w	r0, r0, #7
 8006f04:	1ac3      	subs	r3, r0, r3
 8006f06:	d0d3      	beq.n	8006eb0 <_malloc_r+0x20>
 8006f08:	425a      	negs	r2, r3
 8006f0a:	50e2      	str	r2, [r4, r3]
 8006f0c:	e7d0      	b.n	8006eb0 <_malloc_r+0x20>
 8006f0e:	428c      	cmp	r4, r1
 8006f10:	684b      	ldr	r3, [r1, #4]
 8006f12:	bf16      	itet	ne
 8006f14:	6063      	strne	r3, [r4, #4]
 8006f16:	6013      	streq	r3, [r2, #0]
 8006f18:	460c      	movne	r4, r1
 8006f1a:	e7eb      	b.n	8006ef4 <_malloc_r+0x64>
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	6849      	ldr	r1, [r1, #4]
 8006f20:	e7cc      	b.n	8006ebc <_malloc_r+0x2c>
 8006f22:	1cc4      	adds	r4, r0, #3
 8006f24:	f024 0403 	bic.w	r4, r4, #3
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	d005      	beq.n	8006f38 <_malloc_r+0xa8>
 8006f2c:	1a21      	subs	r1, r4, r0
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f95a 	bl	80071e8 <_sbrk_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d0cf      	beq.n	8006ed8 <_malloc_r+0x48>
 8006f38:	6025      	str	r5, [r4, #0]
 8006f3a:	e7db      	b.n	8006ef4 <_malloc_r+0x64>
 8006f3c:	200001fc 	.word	0x200001fc
 8006f40:	20000200 	.word	0x20000200

08006f44 <__ssputs_r>:
 8006f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	688e      	ldr	r6, [r1, #8]
 8006f4a:	429e      	cmp	r6, r3
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4690      	mov	r8, r2
 8006f52:	4699      	mov	r9, r3
 8006f54:	d837      	bhi.n	8006fc6 <__ssputs_r+0x82>
 8006f56:	898a      	ldrh	r2, [r1, #12]
 8006f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f5c:	d031      	beq.n	8006fc2 <__ssputs_r+0x7e>
 8006f5e:	6825      	ldr	r5, [r4, #0]
 8006f60:	6909      	ldr	r1, [r1, #16]
 8006f62:	1a6f      	subs	r7, r5, r1
 8006f64:	6965      	ldr	r5, [r4, #20]
 8006f66:	2302      	movs	r3, #2
 8006f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f70:	f109 0301 	add.w	r3, r9, #1
 8006f74:	443b      	add	r3, r7
 8006f76:	429d      	cmp	r5, r3
 8006f78:	bf38      	it	cc
 8006f7a:	461d      	movcc	r5, r3
 8006f7c:	0553      	lsls	r3, r2, #21
 8006f7e:	d530      	bpl.n	8006fe2 <__ssputs_r+0x9e>
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7ff ff85 	bl	8006e90 <_malloc_r>
 8006f86:	4606      	mov	r6, r0
 8006f88:	b950      	cbnz	r0, 8006fa0 <__ssputs_r+0x5c>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	f8ca 3000 	str.w	r3, [sl]
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa0:	463a      	mov	r2, r7
 8006fa2:	6921      	ldr	r1, [r4, #16]
 8006fa4:	f7ff fc32 	bl	800680c <memcpy>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	6126      	str	r6, [r4, #16]
 8006fb6:	6165      	str	r5, [r4, #20]
 8006fb8:	443e      	add	r6, r7
 8006fba:	1bed      	subs	r5, r5, r7
 8006fbc:	6026      	str	r6, [r4, #0]
 8006fbe:	60a5      	str	r5, [r4, #8]
 8006fc0:	464e      	mov	r6, r9
 8006fc2:	454e      	cmp	r6, r9
 8006fc4:	d900      	bls.n	8006fc8 <__ssputs_r+0x84>
 8006fc6:	464e      	mov	r6, r9
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4641      	mov	r1, r8
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	f000 f92d 	bl	800722c <memmove>
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	1b9b      	subs	r3, r3, r6
 8006fd6:	60a3      	str	r3, [r4, #8]
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	441e      	add	r6, r3
 8006fdc:	6026      	str	r6, [r4, #0]
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e7dc      	b.n	8006f9c <__ssputs_r+0x58>
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	f000 f93d 	bl	8007262 <_realloc_r>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d1e2      	bne.n	8006fb4 <__ssputs_r+0x70>
 8006fee:	6921      	ldr	r1, [r4, #16]
 8006ff0:	4650      	mov	r0, sl
 8006ff2:	f7ff feff 	bl	8006df4 <_free_r>
 8006ff6:	e7c8      	b.n	8006f8a <__ssputs_r+0x46>

08006ff8 <_svfiprintf_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	461d      	mov	r5, r3
 8006ffe:	898b      	ldrh	r3, [r1, #12]
 8007000:	061f      	lsls	r7, r3, #24
 8007002:	b09d      	sub	sp, #116	; 0x74
 8007004:	4680      	mov	r8, r0
 8007006:	460c      	mov	r4, r1
 8007008:	4616      	mov	r6, r2
 800700a:	d50f      	bpl.n	800702c <_svfiprintf_r+0x34>
 800700c:	690b      	ldr	r3, [r1, #16]
 800700e:	b96b      	cbnz	r3, 800702c <_svfiprintf_r+0x34>
 8007010:	2140      	movs	r1, #64	; 0x40
 8007012:	f7ff ff3d 	bl	8006e90 <_malloc_r>
 8007016:	6020      	str	r0, [r4, #0]
 8007018:	6120      	str	r0, [r4, #16]
 800701a:	b928      	cbnz	r0, 8007028 <_svfiprintf_r+0x30>
 800701c:	230c      	movs	r3, #12
 800701e:	f8c8 3000 	str.w	r3, [r8]
 8007022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007026:	e0c8      	b.n	80071ba <_svfiprintf_r+0x1c2>
 8007028:	2340      	movs	r3, #64	; 0x40
 800702a:	6163      	str	r3, [r4, #20]
 800702c:	2300      	movs	r3, #0
 800702e:	9309      	str	r3, [sp, #36]	; 0x24
 8007030:	2320      	movs	r3, #32
 8007032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007036:	2330      	movs	r3, #48	; 0x30
 8007038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703c:	9503      	str	r5, [sp, #12]
 800703e:	f04f 0b01 	mov.w	fp, #1
 8007042:	4637      	mov	r7, r6
 8007044:	463d      	mov	r5, r7
 8007046:	f815 3b01 	ldrb.w	r3, [r5], #1
 800704a:	b10b      	cbz	r3, 8007050 <_svfiprintf_r+0x58>
 800704c:	2b25      	cmp	r3, #37	; 0x25
 800704e:	d13e      	bne.n	80070ce <_svfiprintf_r+0xd6>
 8007050:	ebb7 0a06 	subs.w	sl, r7, r6
 8007054:	d00b      	beq.n	800706e <_svfiprintf_r+0x76>
 8007056:	4653      	mov	r3, sl
 8007058:	4632      	mov	r2, r6
 800705a:	4621      	mov	r1, r4
 800705c:	4640      	mov	r0, r8
 800705e:	f7ff ff71 	bl	8006f44 <__ssputs_r>
 8007062:	3001      	adds	r0, #1
 8007064:	f000 80a4 	beq.w	80071b0 <_svfiprintf_r+0x1b8>
 8007068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706a:	4453      	add	r3, sl
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	783b      	ldrb	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 809d 	beq.w	80071b0 <_svfiprintf_r+0x1b8>
 8007076:	2300      	movs	r3, #0
 8007078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007080:	9304      	str	r3, [sp, #16]
 8007082:	9307      	str	r3, [sp, #28]
 8007084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007088:	931a      	str	r3, [sp, #104]	; 0x68
 800708a:	462f      	mov	r7, r5
 800708c:	2205      	movs	r2, #5
 800708e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007092:	4850      	ldr	r0, [pc, #320]	; (80071d4 <_svfiprintf_r+0x1dc>)
 8007094:	f7f9 f8a4 	bl	80001e0 <memchr>
 8007098:	9b04      	ldr	r3, [sp, #16]
 800709a:	b9d0      	cbnz	r0, 80070d2 <_svfiprintf_r+0xda>
 800709c:	06d9      	lsls	r1, r3, #27
 800709e:	bf44      	itt	mi
 80070a0:	2220      	movmi	r2, #32
 80070a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070a6:	071a      	lsls	r2, r3, #28
 80070a8:	bf44      	itt	mi
 80070aa:	222b      	movmi	r2, #43	; 0x2b
 80070ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070b0:	782a      	ldrb	r2, [r5, #0]
 80070b2:	2a2a      	cmp	r2, #42	; 0x2a
 80070b4:	d015      	beq.n	80070e2 <_svfiprintf_r+0xea>
 80070b6:	9a07      	ldr	r2, [sp, #28]
 80070b8:	462f      	mov	r7, r5
 80070ba:	2000      	movs	r0, #0
 80070bc:	250a      	movs	r5, #10
 80070be:	4639      	mov	r1, r7
 80070c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c4:	3b30      	subs	r3, #48	; 0x30
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d94d      	bls.n	8007166 <_svfiprintf_r+0x16e>
 80070ca:	b1b8      	cbz	r0, 80070fc <_svfiprintf_r+0x104>
 80070cc:	e00f      	b.n	80070ee <_svfiprintf_r+0xf6>
 80070ce:	462f      	mov	r7, r5
 80070d0:	e7b8      	b.n	8007044 <_svfiprintf_r+0x4c>
 80070d2:	4a40      	ldr	r2, [pc, #256]	; (80071d4 <_svfiprintf_r+0x1dc>)
 80070d4:	1a80      	subs	r0, r0, r2
 80070d6:	fa0b f000 	lsl.w	r0, fp, r0
 80070da:	4318      	orrs	r0, r3
 80070dc:	9004      	str	r0, [sp, #16]
 80070de:	463d      	mov	r5, r7
 80070e0:	e7d3      	b.n	800708a <_svfiprintf_r+0x92>
 80070e2:	9a03      	ldr	r2, [sp, #12]
 80070e4:	1d11      	adds	r1, r2, #4
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	9103      	str	r1, [sp, #12]
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	db01      	blt.n	80070f2 <_svfiprintf_r+0xfa>
 80070ee:	9207      	str	r2, [sp, #28]
 80070f0:	e004      	b.n	80070fc <_svfiprintf_r+0x104>
 80070f2:	4252      	negs	r2, r2
 80070f4:	f043 0302 	orr.w	r3, r3, #2
 80070f8:	9207      	str	r2, [sp, #28]
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	783b      	ldrb	r3, [r7, #0]
 80070fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007100:	d10c      	bne.n	800711c <_svfiprintf_r+0x124>
 8007102:	787b      	ldrb	r3, [r7, #1]
 8007104:	2b2a      	cmp	r3, #42	; 0x2a
 8007106:	d133      	bne.n	8007170 <_svfiprintf_r+0x178>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	1d1a      	adds	r2, r3, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9203      	str	r2, [sp, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	bfb8      	it	lt
 8007114:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007118:	3702      	adds	r7, #2
 800711a:	9305      	str	r3, [sp, #20]
 800711c:	4d2e      	ldr	r5, [pc, #184]	; (80071d8 <_svfiprintf_r+0x1e0>)
 800711e:	7839      	ldrb	r1, [r7, #0]
 8007120:	2203      	movs	r2, #3
 8007122:	4628      	mov	r0, r5
 8007124:	f7f9 f85c 	bl	80001e0 <memchr>
 8007128:	b138      	cbz	r0, 800713a <_svfiprintf_r+0x142>
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	1b40      	subs	r0, r0, r5
 800712e:	fa03 f000 	lsl.w	r0, r3, r0
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	4303      	orrs	r3, r0
 8007136:	3701      	adds	r7, #1
 8007138:	9304      	str	r3, [sp, #16]
 800713a:	7839      	ldrb	r1, [r7, #0]
 800713c:	4827      	ldr	r0, [pc, #156]	; (80071dc <_svfiprintf_r+0x1e4>)
 800713e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007142:	2206      	movs	r2, #6
 8007144:	1c7e      	adds	r6, r7, #1
 8007146:	f7f9 f84b 	bl	80001e0 <memchr>
 800714a:	2800      	cmp	r0, #0
 800714c:	d038      	beq.n	80071c0 <_svfiprintf_r+0x1c8>
 800714e:	4b24      	ldr	r3, [pc, #144]	; (80071e0 <_svfiprintf_r+0x1e8>)
 8007150:	bb13      	cbnz	r3, 8007198 <_svfiprintf_r+0x1a0>
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	3307      	adds	r3, #7
 8007156:	f023 0307 	bic.w	r3, r3, #7
 800715a:	3308      	adds	r3, #8
 800715c:	9303      	str	r3, [sp, #12]
 800715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007160:	444b      	add	r3, r9
 8007162:	9309      	str	r3, [sp, #36]	; 0x24
 8007164:	e76d      	b.n	8007042 <_svfiprintf_r+0x4a>
 8007166:	fb05 3202 	mla	r2, r5, r2, r3
 800716a:	2001      	movs	r0, #1
 800716c:	460f      	mov	r7, r1
 800716e:	e7a6      	b.n	80070be <_svfiprintf_r+0xc6>
 8007170:	2300      	movs	r3, #0
 8007172:	3701      	adds	r7, #1
 8007174:	9305      	str	r3, [sp, #20]
 8007176:	4619      	mov	r1, r3
 8007178:	250a      	movs	r5, #10
 800717a:	4638      	mov	r0, r7
 800717c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007180:	3a30      	subs	r2, #48	; 0x30
 8007182:	2a09      	cmp	r2, #9
 8007184:	d903      	bls.n	800718e <_svfiprintf_r+0x196>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0c8      	beq.n	800711c <_svfiprintf_r+0x124>
 800718a:	9105      	str	r1, [sp, #20]
 800718c:	e7c6      	b.n	800711c <_svfiprintf_r+0x124>
 800718e:	fb05 2101 	mla	r1, r5, r1, r2
 8007192:	2301      	movs	r3, #1
 8007194:	4607      	mov	r7, r0
 8007196:	e7f0      	b.n	800717a <_svfiprintf_r+0x182>
 8007198:	ab03      	add	r3, sp, #12
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4622      	mov	r2, r4
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <_svfiprintf_r+0x1ec>)
 80071a0:	a904      	add	r1, sp, #16
 80071a2:	4640      	mov	r0, r8
 80071a4:	f7fe f8f0 	bl	8005388 <_printf_float>
 80071a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80071ac:	4681      	mov	r9, r0
 80071ae:	d1d6      	bne.n	800715e <_svfiprintf_r+0x166>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	065b      	lsls	r3, r3, #25
 80071b4:	f53f af35 	bmi.w	8007022 <_svfiprintf_r+0x2a>
 80071b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ba:	b01d      	add	sp, #116	; 0x74
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	ab03      	add	r3, sp, #12
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	4622      	mov	r2, r4
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <_svfiprintf_r+0x1ec>)
 80071c8:	a904      	add	r1, sp, #16
 80071ca:	4640      	mov	r0, r8
 80071cc:	f7fe fb92 	bl	80058f4 <_printf_i>
 80071d0:	e7ea      	b.n	80071a8 <_svfiprintf_r+0x1b0>
 80071d2:	bf00      	nop
 80071d4:	0800749c 	.word	0x0800749c
 80071d8:	080074a2 	.word	0x080074a2
 80071dc:	080074a6 	.word	0x080074a6
 80071e0:	08005389 	.word	0x08005389
 80071e4:	08006f45 	.word	0x08006f45

080071e8 <_sbrk_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4c06      	ldr	r4, [pc, #24]	; (8007204 <_sbrk_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4605      	mov	r5, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	f7fa f988 	bl	8001508 <_sbrk>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_sbrk_r+0x1a>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_sbrk_r+0x1a>
 8007200:	602b      	str	r3, [r5, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	200002ec 	.word	0x200002ec

08007208 <__ascii_mbtowc>:
 8007208:	b082      	sub	sp, #8
 800720a:	b901      	cbnz	r1, 800720e <__ascii_mbtowc+0x6>
 800720c:	a901      	add	r1, sp, #4
 800720e:	b142      	cbz	r2, 8007222 <__ascii_mbtowc+0x1a>
 8007210:	b14b      	cbz	r3, 8007226 <__ascii_mbtowc+0x1e>
 8007212:	7813      	ldrb	r3, [r2, #0]
 8007214:	600b      	str	r3, [r1, #0]
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	1c10      	adds	r0, r2, #0
 800721a:	bf18      	it	ne
 800721c:	2001      	movne	r0, #1
 800721e:	b002      	add	sp, #8
 8007220:	4770      	bx	lr
 8007222:	4610      	mov	r0, r2
 8007224:	e7fb      	b.n	800721e <__ascii_mbtowc+0x16>
 8007226:	f06f 0001 	mvn.w	r0, #1
 800722a:	e7f8      	b.n	800721e <__ascii_mbtowc+0x16>

0800722c <memmove>:
 800722c:	4288      	cmp	r0, r1
 800722e:	b510      	push	{r4, lr}
 8007230:	eb01 0302 	add.w	r3, r1, r2
 8007234:	d807      	bhi.n	8007246 <memmove+0x1a>
 8007236:	1e42      	subs	r2, r0, #1
 8007238:	4299      	cmp	r1, r3
 800723a:	d00a      	beq.n	8007252 <memmove+0x26>
 800723c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007240:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007244:	e7f8      	b.n	8007238 <memmove+0xc>
 8007246:	4283      	cmp	r3, r0
 8007248:	d9f5      	bls.n	8007236 <memmove+0xa>
 800724a:	1881      	adds	r1, r0, r2
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	42d3      	cmn	r3, r2
 8007250:	d100      	bne.n	8007254 <memmove+0x28>
 8007252:	bd10      	pop	{r4, pc}
 8007254:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007258:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800725c:	e7f7      	b.n	800724e <memmove+0x22>

0800725e <__malloc_lock>:
 800725e:	4770      	bx	lr

08007260 <__malloc_unlock>:
 8007260:	4770      	bx	lr

08007262 <_realloc_r>:
 8007262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007264:	4607      	mov	r7, r0
 8007266:	4614      	mov	r4, r2
 8007268:	460e      	mov	r6, r1
 800726a:	b921      	cbnz	r1, 8007276 <_realloc_r+0x14>
 800726c:	4611      	mov	r1, r2
 800726e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007272:	f7ff be0d 	b.w	8006e90 <_malloc_r>
 8007276:	b922      	cbnz	r2, 8007282 <_realloc_r+0x20>
 8007278:	f7ff fdbc 	bl	8006df4 <_free_r>
 800727c:	4625      	mov	r5, r4
 800727e:	4628      	mov	r0, r5
 8007280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007282:	f000 f821 	bl	80072c8 <_malloc_usable_size_r>
 8007286:	42a0      	cmp	r0, r4
 8007288:	d20f      	bcs.n	80072aa <_realloc_r+0x48>
 800728a:	4621      	mov	r1, r4
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff fdff 	bl	8006e90 <_malloc_r>
 8007292:	4605      	mov	r5, r0
 8007294:	2800      	cmp	r0, #0
 8007296:	d0f2      	beq.n	800727e <_realloc_r+0x1c>
 8007298:	4631      	mov	r1, r6
 800729a:	4622      	mov	r2, r4
 800729c:	f7ff fab6 	bl	800680c <memcpy>
 80072a0:	4631      	mov	r1, r6
 80072a2:	4638      	mov	r0, r7
 80072a4:	f7ff fda6 	bl	8006df4 <_free_r>
 80072a8:	e7e9      	b.n	800727e <_realloc_r+0x1c>
 80072aa:	4635      	mov	r5, r6
 80072ac:	e7e7      	b.n	800727e <_realloc_r+0x1c>

080072ae <__ascii_wctomb>:
 80072ae:	b149      	cbz	r1, 80072c4 <__ascii_wctomb+0x16>
 80072b0:	2aff      	cmp	r2, #255	; 0xff
 80072b2:	bf85      	ittet	hi
 80072b4:	238a      	movhi	r3, #138	; 0x8a
 80072b6:	6003      	strhi	r3, [r0, #0]
 80072b8:	700a      	strbls	r2, [r1, #0]
 80072ba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80072be:	bf98      	it	ls
 80072c0:	2001      	movls	r0, #1
 80072c2:	4770      	bx	lr
 80072c4:	4608      	mov	r0, r1
 80072c6:	4770      	bx	lr

080072c8 <_malloc_usable_size_r>:
 80072c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072cc:	1f18      	subs	r0, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bfbc      	itt	lt
 80072d2:	580b      	ldrlt	r3, [r1, r0]
 80072d4:	18c0      	addlt	r0, r0, r3
 80072d6:	4770      	bx	lr

080072d8 <_init>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	bf00      	nop
 80072dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072de:	bc08      	pop	{r3}
 80072e0:	469e      	mov	lr, r3
 80072e2:	4770      	bx	lr

080072e4 <_fini>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr
