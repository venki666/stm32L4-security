
Nucleo_L476GR_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a4  080041a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080041ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  08004388  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004388  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b9e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000174b  00000000  00000000  00029daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0002b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002bd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a91  00000000  00000000  0002c570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076d5  00000000  00000000  00052001  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9178  00000000  00000000  000596d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014284e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e8  00000000  00000000  001428cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f00 	.word	0x08003f00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08003f00 	.word	0x08003f00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t opt = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 faf7 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f8bf 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f963 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f931 	bl	80007fc <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	  printMessage:

	  	printWelcomeMessage();
 800059a:	f000 f80d 	bl	80005b8 <printWelcomeMessage>

	  	while (1)  {
	  		opt = readUserInput();
 800059e:	f000 f835 	bl	800060c <readUserInput>
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	  		processUserInput(opt);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f84f 	bl	800064c <processUserInput>
	  		if(opt == 3)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d1f4      	bne.n	800059e <main+0x1e>
	  			goto printMessage;
 80005b4:	e7f1      	b.n	800059a <main+0x1a>
	...

080005b8 <printWelcomeMessage>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void printWelcomeMessage(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c0:	2206      	movs	r2, #6
 80005c2:	490d      	ldr	r1, [pc, #52]	; (80005f8 <printWelcomeMessage+0x40>)
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <printWelcomeMessage+0x44>)
 80005c6:	f002 f975 	bl	80028b4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ce:	2204      	movs	r2, #4
 80005d0:	490b      	ldr	r1, [pc, #44]	; (8000600 <printWelcomeMessage+0x48>)
 80005d2:	480a      	ldr	r0, [pc, #40]	; (80005fc <printWelcomeMessage+0x44>)
 80005d4:	f002 f96e 	bl	80028b4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	222a      	movs	r2, #42	; 0x2a
 80005de:	4909      	ldr	r1, [pc, #36]	; (8000604 <printWelcomeMessage+0x4c>)
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <printWelcomeMessage+0x44>)
 80005e2:	f002 f967 	bl	80028b4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ea:	2283      	movs	r2, #131	; 0x83
 80005ec:	4906      	ldr	r1, [pc, #24]	; (8000608 <printWelcomeMessage+0x50>)
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <printWelcomeMessage+0x44>)
 80005f0:	f002 f960 	bl	80028b4 <HAL_UART_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08003f18 	.word	0x08003f18
 80005fc:	20000204 	.word	0x20000204
 8000600:	08003f20 	.word	0x08003f20
 8000604:	08003f28 	.word	0x08003f28
 8000608:	08003f54 	.word	0x08003f54

0800060c <readUserInput>:

uint8_t readUserInput(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000616:	2204      	movs	r2, #4
 8000618:	490a      	ldr	r1, [pc, #40]	; (8000644 <readUserInput+0x38>)
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <readUserInput+0x3c>)
 800061c:	f002 f94a 	bl	80028b4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 8000620:	1d39      	adds	r1, r7, #4
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000626:	2201      	movs	r2, #1
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <readUserInput+0x3c>)
 800062a:	f002 f9d6 	bl	80029da <HAL_UART_Receive>
	return atoi(readBuf);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f002 ff73 	bl	800351c <atoi>
 8000636:	4603      	mov	r3, r0
 8000638:	b2db      	uxtb	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	08003fd8 	.word	0x08003fd8
 8000648:	20000204 	.word	0x20000204

0800064c <processUserInput>:


uint8_t processUserInput(uint8_t opt) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	char msg[30];

	if(!opt || opt > 3)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <processUserInput+0x16>
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d901      	bls.n	8000666 <processUserInput+0x1a>
		return 0;
 8000662:	2300      	movs	r3, #0
 8000664:	e044      	b.n	80006f0 <processUserInput+0xa4>

	sprintf(msg, "%d", opt);
 8000666:	79fa      	ldrb	r2, [r7, #7]
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4922      	ldr	r1, [pc, #136]	; (80006f8 <processUserInput+0xac>)
 800066e:	4618      	mov	r0, r3
 8000670:	f002 ff8a 	bl	8003588 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fda9 	bl	80001d0 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f107 0108 	add.w	r1, r7, #8
 8000686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800068a:	481c      	ldr	r0, [pc, #112]	; (80006fc <processUserInput+0xb0>)
 800068c:	f002 f912 	bl	80028b4 <HAL_UART_Transmit>

	switch(opt) {
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d009      	beq.n	80006aa <processUserInput+0x5e>
 8000696:	2b03      	cmp	r3, #3
 8000698:	d027      	beq.n	80006ea <processUserInput+0x9e>
 800069a:	2b01      	cmp	r3, #1
 800069c:	d127      	bne.n	80006ee <processUserInput+0xa2>
	case 1:
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800069e:	2120      	movs	r1, #32
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 fda0 	bl	80011e8 <HAL_GPIO_TogglePin>
		break;
 80006a8:	e021      	b.n	80006ee <processUserInput+0xa2>
	case 2:
		sprintf(msg, "\r\nUSER BUTTON status: %s", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET ? "PRESSED" : "RELEASED");
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	4814      	ldr	r0, [pc, #80]	; (8000700 <processUserInput+0xb4>)
 80006b0:	f000 fd6a 	bl	8001188 <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <processUserInput+0x72>
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <processUserInput+0xb8>)
 80006bc:	e000      	b.n	80006c0 <processUserInput+0x74>
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <processUserInput+0xbc>)
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <processUserInput+0xc0>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 ff5e 	bl	8003588 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd7d 	bl	80001d0 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	f107 0108 	add.w	r1, r7, #8
 80006de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <processUserInput+0xb0>)
 80006e4:	f002 f8e6 	bl	80028b4 <HAL_UART_Transmit>
		break;
 80006e8:	e001      	b.n	80006ee <processUserInput+0xa2>
	case 3:
		return 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	e000      	b.n	80006f0 <processUserInput+0xa4>
	};

	return 1;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	08003fe0 	.word	0x08003fe0
 80006fc:	20000204 	.word	0x20000204
 8000700:	48000800 	.word	0x48000800
 8000704:	08003fe4 	.word	0x08003fe4
 8000708:	08003fec 	.word	0x08003fec
 800070c:	08003ff8 	.word	0x08003ff8

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0b8      	sub	sp, #224	; 0xe0
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f002 ff2a 	bl	8003578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2288      	movs	r2, #136	; 0x88
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f002 ff1c 	bl	8003578 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2310      	movs	r3, #16
 8000750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000766:	230a      	movs	r3, #10
 8000768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800076c:	2307      	movs	r3, #7
 800076e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fdae 	bl	80012e4 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800078e:	f000 f8cd 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2303      	movs	r3, #3
 800079a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007b4:	2104      	movs	r1, #4
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 f97a 	bl	8001ab0 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007c2:	f000 f8b3 	bl	800092c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fb71 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007dc:	f000 f8a6 	bl	800092c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e4:	f000 fd28 	bl	8001238 <HAL_PWREx_ControlVoltageScaling>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007ee:	f000 f89d 	bl	800092c <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	37e0      	adds	r7, #224	; 0xe0
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <MX_USART2_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000840:	f001 ffea 	bl	8002818 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f86f 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000204 	.word	0x20000204
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b22      	ldr	r3, [pc, #136]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fc6d 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_GPIO_Init+0xc8>)
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_GPIO_Init+0xcc>)
 80008f4:	f000 faa0 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f8:	2320      	movs	r3, #32
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 fa91 	bl	8000e38 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	10210000 	.word	0x10210000
 8000928:	48000800 	.word	0x48000800

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_MspInit+0x44>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6613      	str	r3, [r2, #96]	; 0x60
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x44>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6593      	str	r3, [r2, #88]	; 0x58
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0x7c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d128      	bne.n	80009f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x80>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <HAL_UART_MspInit+0x80>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	6593      	str	r3, [r2, #88]	; 0x58
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_UART_MspInit+0x80>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x80>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0x80>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0x80>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f000 fa20 	bl	8000e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f8e8 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x50>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x16>
		heap_end = &end;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <_sbrk+0x50>)
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <_sbrk+0x54>)
 8000a78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <_sbrk+0x50>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <_sbrk+0x50>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	466a      	mov	r2, sp
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d907      	bls.n	8000a9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a8e:	f002 fd49 	bl	8003524 <__errno>
 8000a92:	4602      	mov	r2, r0
 8000a94:	230c      	movs	r3, #12
 8000a96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9c:	e006      	b.n	8000aac <_sbrk+0x48>
	}

	heap_end += incr;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <_sbrk+0x50>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <_sbrk+0x50>)
 8000aa8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001f8 	.word	0x200001f8
 8000ab8:	20000290 	.word	0x20000290

08000abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <SystemInit+0x64>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <SystemInit+0x64>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <SystemInit+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <SystemInit+0x68>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <SystemInit+0x68>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <SystemInit+0x68>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <SystemInit+0x68>)
 8000ae8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000aec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <SystemInit+0x68>)
 8000af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <SystemInit+0x68>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <SystemInit+0x68>)
 8000b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <SystemInit+0x68>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SystemInit+0x64>)
 8000b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b12:	609a      	str	r2, [r3, #8]
#endif
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	40021000 	.word	0x40021000

08000b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b2e:	e003      	b.n	8000b38 <LoopCopyDataInit>

08000b30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b36:	3104      	adds	r1, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b40:	d3f6      	bcc.n	8000b30 <CopyDataInit>
	ldr	r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b44:	e002      	b.n	8000b4c <LoopFillZerobss>

08000b46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b48:	f842 3b04 	str.w	r3, [r2], #4

08000b4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <LoopForever+0x16>)
	cmp	r2, r3
 8000b4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b50:	d3f9      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b52:	f7ff ffb3 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fceb 	bl	8003530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5a:	f7ff fd11 	bl	8000580 <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b64:	080041ac 	.word	0x080041ac
	ldr	r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b6c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8000b70:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8000b74:	2000028c 	.word	0x2000028c

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_Init+0x3c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <HAL_Init+0x3c>)
 8000b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b92:	2003      	movs	r0, #3
 8000b94:	f000 f91c 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f80f 	bl	8000bbc <HAL_InitTick>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	e001      	b.n	8000bae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000baa:	f7ff fec7 	bl	800093c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_InitTick+0x68>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d022      	beq.n	8000c16 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_InitTick+0x6c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_InitTick+0x68>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f91a 	bl	8000e1e <HAL_SYSTICK_Config>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10f      	bne.n	8000c10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b0f      	cmp	r3, #15
 8000bf4:	d809      	bhi.n	8000c0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bfe:	f000 f8f2 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_InitTick+0x70>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e004      	b.n	8000c1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e001      	b.n	8000c1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x20>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <HAL_IncTick+0x1c>)
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	20000284 	.word	0x20000284
 8000c50:	20000008 	.word	0x20000008

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000284 	.word	0x20000284

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff47 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff5c 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb0 	bl	8000d8c <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e17f      	b.n	8001148 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8171 	beq.w	8001142 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d00b      	beq.n	8000e80 <HAL_GPIO_Init+0x48>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d007      	beq.n	8000e80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e74:	2b11      	cmp	r3, #17
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b12      	cmp	r3, #18
 8000e7e:	d130      	bne.n	8000ee2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	f003 0201 	and.w	r2, r3, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d118      	bne.n	8000f20 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x128>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b12      	cmp	r3, #18
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80ac 	beq.w	8001142 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b5e      	ldr	r3, [pc, #376]	; (8001164 <HAL_GPIO_Init+0x32c>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a5d      	ldr	r2, [pc, #372]	; (8001164 <HAL_GPIO_Init+0x32c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b5b      	ldr	r3, [pc, #364]	; (8001164 <HAL_GPIO_Init+0x32c>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001002:	4a59      	ldr	r2, [pc, #356]	; (8001168 <HAL_GPIO_Init+0x330>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x242>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4e      	ldr	r2, [pc, #312]	; (800116c <HAL_GPIO_Init+0x334>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x23e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4d      	ldr	r2, [pc, #308]	; (8001170 <HAL_GPIO_Init+0x338>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x23a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4c      	ldr	r2, [pc, #304]	; (8001174 <HAL_GPIO_Init+0x33c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x236>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4b      	ldr	r2, [pc, #300]	; (8001178 <HAL_GPIO_Init+0x340>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x232>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4a      	ldr	r2, [pc, #296]	; (800117c <HAL_GPIO_Init+0x344>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x22e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a49      	ldr	r2, [pc, #292]	; (8001180 <HAL_GPIO_Init+0x348>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x22a>
 800105e:	2306      	movs	r3, #6
 8001060:	e00c      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001062:	2307      	movs	r3, #7
 8001064:	e00a      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001066:	2305      	movs	r3, #5
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x244>
 800106a:	2304      	movs	r3, #4
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x244>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x244>
 800107a:	2300      	movs	r3, #0
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108c:	4936      	ldr	r1, [pc, #216]	; (8001168 <HAL_GPIO_Init+0x330>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800109a:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <HAL_GPIO_Init+0x34c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010be:	4a31      	ldr	r2, [pc, #196]	; (8001184 <HAL_GPIO_Init+0x34c>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010c4:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <HAL_GPIO_Init+0x34c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e8:	4a26      	ldr	r2, [pc, #152]	; (8001184 <HAL_GPIO_Init+0x34c>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_GPIO_Init+0x34c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <HAL_GPIO_Init+0x34c>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_GPIO_Init+0x34c>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800113c:	4a11      	ldr	r2, [pc, #68]	; (8001184 <HAL_GPIO_Init+0x34c>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae78 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 8001158:	bf00      	nop
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000800 	.word	0x48000800
 8001174:	48000c00 	.word	0x48000c00
 8001178:	48001000 	.word	0x48001000
 800117c:	48001400 	.word	0x48001400
 8001180:	48001800 	.word	0x48001800
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e001      	b.n	80011aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
 80011c4:	4613      	mov	r3, r2
 80011c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c8:	787b      	ldrb	r3, [r7, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001206:	e002      	b.n	800120e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001208:	887a      	ldrh	r2, [r7, #2]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <HAL_PWREx_GetVoltageRange+0x18>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40007000 	.word	0x40007000

08001238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001246:	d130      	bne.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001254:	d038      	beq.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800125e:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001264:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2232      	movs	r2, #50	; 0x32
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	0c9b      	lsrs	r3, r3, #18
 8001278:	3301      	adds	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127c:	e002      	b.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3b01      	subs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d102      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f2      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a4:	d110      	bne.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e00f      	b.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b6:	d007      	beq.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c0:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40007000 	.word	0x40007000
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e3d4      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f6:	4ba1      	ldr	r3, [pc, #644]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001300:	4b9e      	ldr	r3, [pc, #632]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80e4 	beq.w	80014e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_RCC_OscConfig+0x4a>
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	f040 808b 	bne.w	800143c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b01      	cmp	r3, #1
 800132a:	f040 8087 	bne.w	800143c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800132e:	4b93      	ldr	r3, [pc, #588]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x62>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e3ac      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	4b8c      	ldr	r3, [pc, #560]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <HAL_RCC_OscConfig+0x7c>
 8001356:	4b89      	ldr	r3, [pc, #548]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800135e:	e005      	b.n	800136c <HAL_RCC_OscConfig+0x88>
 8001360:	4b86      	ldr	r3, [pc, #536]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800136c:	4293      	cmp	r3, r2
 800136e:	d223      	bcs.n	80013b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fd3f 	bl	8001df8 <RCC_SetFlashLatencyFromMSIRange>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e38d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001384:	4b7d      	ldr	r3, [pc, #500]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a7c      	ldr	r2, [pc, #496]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b7a      	ldr	r3, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4977      	ldr	r1, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	4972      	ldr	r1, [pc, #456]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
 80013b6:	e025      	b.n	8001404 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b8:	4b70      	ldr	r3, [pc, #448]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a6f      	ldr	r2, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b6d      	ldr	r3, [pc, #436]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	496a      	ldr	r1, [pc, #424]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d6:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	4965      	ldr	r1, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d109      	bne.n	8001404 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fcff 	bl	8001df8 <RCC_SetFlashLatencyFromMSIRange>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e34d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001404:	f000 fc36 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001408:	4601      	mov	r1, r0
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	4a5a      	ldr	r2, [pc, #360]	; (8001580 <HAL_RCC_OscConfig+0x29c>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	fa21 f303 	lsr.w	r3, r1, r3
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <HAL_RCC_OscConfig+0x2a0>)
 8001422:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <HAL_RCC_OscConfig+0x2a4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fbc7 	bl	8000bbc <HAL_InitTick>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d052      	beq.n	80014de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	e331      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d032      	beq.n	80014aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a4c      	ldr	r2, [pc, #304]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc00 	bl	8000c54 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001458:	f7ff fbfc 	bl	8000c54 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e31a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a40      	ldr	r2, [pc, #256]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	493b      	ldr	r1, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	4936      	ldr	r1, [pc, #216]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
 80014a8:	e01a      	b.n	80014e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a33      	ldr	r2, [pc, #204]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fbcd 	bl	8000c54 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014be:	f7ff fbc9 	bl	8000c54 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e2e7      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_RCC_OscConfig+0x298>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x1da>
 80014dc:	e000      	b.n	80014e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d074      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x21a>
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b0c      	cmp	r3, #12
 80014f6:	d10e      	bne.n	8001516 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d10b      	bne.n	8001516 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d064      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d160      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e2c4      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x24a>
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a15      	ldr	r2, [pc, #84]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e01d      	b.n	800156a <HAL_RCC_OscConfig+0x286>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001536:	d10c      	bne.n	8001552 <HAL_RCC_OscConfig+0x26e>
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800153e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_RCC_OscConfig+0x298>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e00b      	b.n	800156a <HAL_RCC_OscConfig+0x286>
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <HAL_RCC_OscConfig+0x298>)
 8001564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01c      	beq.n	80015ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fb6f 	bl	8000c54 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001578:	e011      	b.n	800159e <HAL_RCC_OscConfig+0x2ba>
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	08004014 	.word	0x08004014
 8001584:	20000000 	.word	0x20000000
 8001588:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fb62 	bl	8000c54 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e280      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	4baf      	ldr	r3, [pc, #700]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x2a8>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb52 	bl	8000c54 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb4e 	bl	8000c54 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e26c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	4ba5      	ldr	r3, [pc, #660]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2d0>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d060      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x310>
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d116      	bne.n	8001622 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	4b99      	ldr	r3, [pc, #612]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x328>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e249      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b93      	ldr	r3, [pc, #588]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	4990      	ldr	r1, [pc, #576]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	e040      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d023      	beq.n	8001672 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162a:	4b8c      	ldr	r3, [pc, #560]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a8b      	ldr	r2, [pc, #556]	; (800185c <HAL_RCC_OscConfig+0x578>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fb0d 	bl	8000c54 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fb09 	bl	8000c54 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e227      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	4b82      	ldr	r3, [pc, #520]	; (800185c <HAL_RCC_OscConfig+0x578>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b7f      	ldr	r3, [pc, #508]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	061b      	lsls	r3, r3, #24
 800166a:	497c      	ldr	r1, [pc, #496]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
 8001670:	e018      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b7a      	ldr	r3, [pc, #488]	; (800185c <HAL_RCC_OscConfig+0x578>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a79      	ldr	r2, [pc, #484]	; (800185c <HAL_RCC_OscConfig+0x578>)
 8001678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fae9 	bl	8000c54 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fae5 	bl	8000c54 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e203      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	4b70      	ldr	r3, [pc, #448]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03c      	beq.n	800172a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80016ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016be:	4a67      	ldr	r2, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fac4 	bl	8000c54 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fac0 	bl	8000c54 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1de      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e2:	4b5e      	ldr	r3, [pc, #376]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80016e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ef      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3ec>
 80016f0:	e01b      	b.n	800172a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f2:	4b5a      	ldr	r3, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80016f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f8:	4a58      	ldr	r2, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff faa7 	bl	8000c54 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff faa3 	bl	8000c54 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1c1      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171c:	4b4f      	ldr	r3, [pc, #316]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a6 	beq.w	8001884 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10d      	bne.n	8001764 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	4b44      	ldr	r3, [pc, #272]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a43      	ldr	r2, [pc, #268]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_RCC_OscConfig+0x578>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001760:	2301      	movs	r3, #1
 8001762:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_OscConfig+0x57c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d118      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001770:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_OscConfig+0x57c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a3a      	ldr	r2, [pc, #232]	; (8001860 <HAL_RCC_OscConfig+0x57c>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177c:	f7ff fa6a 	bl	8000c54 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7ff fa66 	bl	8000c54 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e184      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <HAL_RCC_OscConfig+0x57c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d108      	bne.n	80017bc <HAL_RCC_OscConfig+0x4d8>
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b0:	4a2a      	ldr	r2, [pc, #168]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ba:	e024      	b.n	8001806 <HAL_RCC_OscConfig+0x522>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d110      	bne.n	80017e6 <HAL_RCC_OscConfig+0x502>
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a24      	ldr	r2, [pc, #144]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e4:	e00f      	b.n	8001806 <HAL_RCC_OscConfig+0x522>
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_RCC_OscConfig+0x578>)
 80017fe:	f023 0304 	bic.w	r3, r3, #4
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d016      	beq.n	800183c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff fa21 	bl	8000c54 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff fa1d 	bl	8000c54 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	; 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e139      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_RCC_OscConfig+0x578>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0ed      	beq.n	8001816 <HAL_RCC_OscConfig+0x532>
 800183a:	e01a      	b.n	8001872 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fa0a 	bl	8000c54 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001842:	e00f      	b.n	8001864 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff fa06 	bl	8000c54 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d906      	bls.n	8001864 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e122      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001864:	4b90      	ldr	r3, [pc, #576]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1e8      	bne.n	8001844 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001872:	7ffb      	ldrb	r3, [r7, #31]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	4a8a      	ldr	r2, [pc, #552]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001882:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8108 	beq.w	8001a9e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	2b02      	cmp	r3, #2
 8001894:	f040 80d0 	bne.w	8001a38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001898:	4b83      	ldr	r3, [pc, #524]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d130      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	3b01      	subs	r3, #1
 80018b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d127      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d11f      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018d8:	2a07      	cmp	r2, #7
 80018da:	bf14      	ite	ne
 80018dc:	2201      	movne	r2, #1
 80018de:	2200      	moveq	r2, #0
 80018e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d113      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	3b01      	subs	r3, #1
 80018f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d109      	bne.n	800190e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	3b01      	subs	r3, #1
 8001908:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d06e      	beq.n	80019ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2b0c      	cmp	r3, #12
 8001912:	d069      	beq.n	80019e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001914:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b7      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001930:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5c      	ldr	r2, [pc, #368]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800193c:	f7ff f98a 	bl	8000c54 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f986 	bl	8000c54 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0a4      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001956:	4b54      	ldr	r3, [pc, #336]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001962:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	4b51      	ldr	r3, [pc, #324]	; (8001aac <HAL_RCC_OscConfig+0x7c8>)
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001972:	3a01      	subs	r2, #1
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	4311      	orrs	r1, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800197c:	0212      	lsls	r2, r2, #8
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001984:	0852      	lsrs	r2, r2, #1
 8001986:	3a01      	subs	r2, #1
 8001988:	0552      	lsls	r2, r2, #21
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001990:	0852      	lsrs	r2, r2, #1
 8001992:	3a01      	subs	r2, #1
 8001994:	0652      	lsls	r2, r2, #25
 8001996:	4311      	orrs	r1, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800199c:	0912      	lsrs	r2, r2, #4
 800199e:	0452      	lsls	r2, r2, #17
 80019a0:	430a      	orrs	r2, r1
 80019a2:	4941      	ldr	r1, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a3e      	ldr	r2, [pc, #248]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b4:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c0:	f7ff f948 	bl	8000c54 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f944 	bl	8000c54 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e062      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e6:	e05a      	b.n	8001a9e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e059      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d152      	bne.n	8001a9e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a10:	f7ff f920 	bl	8000c54 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff f91c 	bl	8000c54 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e03a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x734>
 8001a36:	e032      	b.n	8001a9e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d02d      	beq.n	8001a9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a5c:	f023 0303 	bic.w	r3, r3, #3
 8001a60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f8ef 	bl	8000c54 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff f8eb 	bl	8000c54 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e009      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x7c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x796>
 8001a98:	e001      	b.n	8001a9e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	f99d808c 	.word	0xf99d808c

08001ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0c8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b66      	ldr	r3, [pc, #408]	; (8001c60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d910      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 0207 	bic.w	r2, r3, #7
 8001ada:	4961      	ldr	r1, [pc, #388]	; (8001c60 <HAL_RCC_ClockConfig+0x1b0>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0b0      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d04c      	beq.n	8001b9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b08:	4b56      	ldr	r3, [pc, #344]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d121      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e09e      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d115      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e092      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e086      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b48:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e07e      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 0203 	bic.w	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	493f      	ldr	r1, [pc, #252]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6a:	f7ff f873 	bl	8000c54 <HAL_GetTick>
 8001b6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f7ff f86f 	bl	8000c54 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e066      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 020c 	and.w	r2, r3, #12
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d1eb      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	492c      	ldr	r1, [pc, #176]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_ClockConfig+0x1b0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d210      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_RCC_ClockConfig+0x1b0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4924      	ldr	r1, [pc, #144]	; (8001c60 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e036      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4918      	ldr	r1, [pc, #96]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4910      	ldr	r1, [pc, #64]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c26:	f000 f825 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_ClockConfig+0x1b4>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe ffb6 	bl	8000bbc <HAL_InitTick>
 8001c50:	4603      	mov	r3, r0
 8001c52:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c54:	7afb      	ldrb	r3, [r7, #11]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08004014 	.word	0x08004014
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d121      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d11e      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cd0:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10d      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d102      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	e004      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d133      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0xa4>
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0xaa>
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d1a:	617b      	str	r3, [r7, #20]
      break;
 8001d1c:	e005      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d20:	617b      	str	r3, [r7, #20]
      break;
 8001d22:	e002      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	617b      	str	r3, [r7, #20]
      break;
 8001d28:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	3301      	adds	r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	fb02 f203 	mul.w	r2, r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0e5b      	lsrs	r3, r3, #25
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3724      	adds	r7, #36	; 0x24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	0800402c 	.word	0x0800402c
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4601      	mov	r1, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08004024 	.word	0x08004024

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd0:	f7ff ffda 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4601      	mov	r1, r0
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08004024 	.word	0x08004024

08001df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e10:	f7ff fa04 	bl	800121c <HAL_PWREx_GetVoltageRange>
 8001e14:	6178      	str	r0, [r7, #20]
 8001e16:	e014      	b.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6593      	str	r3, [r2, #88]	; 0x58
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff f9f4 	bl	800121c <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e48:	d10b      	bne.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d919      	bls.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2ba0      	cmp	r3, #160	; 0xa0
 8001e54:	d902      	bls.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e56:	2302      	movs	r3, #2
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e013      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e010      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d902      	bls.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e68:	2303      	movs	r3, #3
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e00a      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d102      	bne.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e74:	2302      	movs	r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e004      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b70      	cmp	r3, #112	; 0x70
 8001e7e:	d101      	bne.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e80:	2301      	movs	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 0207 	bic.w	r2, r3, #7
 8001e8c:	4909      	ldr	r1, [pc, #36]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d03f      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001edc:	d01c      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee2:	d802      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00e      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001ee8:	e01f      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eee:	d003      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ef0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef4:	d01c      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001ef6:	e018      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ef8:	4b85      	ldr	r3, [pc, #532]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4a84      	ldr	r2, [pc, #528]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f04:	e015      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 fab9 	bl	8002484 <RCCEx_PLLSAI1_Config>
 8001f12:	4603      	mov	r3, r0
 8001f14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f16:	e00c      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3320      	adds	r3, #32
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fba0 	bl	8002664 <RCCEx_PLLSAI2_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f28:	e003      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f2e:	e000      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f32:	7cfb      	ldrb	r3, [r7, #19]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10b      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f38:	4b75      	ldr	r3, [pc, #468]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f46:	4972      	ldr	r1, [pc, #456]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f4e:	e001      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d03f      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f68:	d01c      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001f6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6e:	d802      	bhi.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001f74:	e01f      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f7a:	d003      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001f7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f80:	d01c      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001f82:	e018      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f84:	4b62      	ldr	r3, [pc, #392]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a61      	ldr	r2, [pc, #388]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f90:	e015      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fa73 	bl	8002484 <RCCEx_PLLSAI1_Config>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fa2:	e00c      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fb5a 	bl	8002664 <RCCEx_PLLSAI2_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb4:	e003      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fba:	e000      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fc4:	4b52      	ldr	r3, [pc, #328]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fd2:	494f      	ldr	r1, [pc, #316]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fda:	e001      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80a0 	beq.w	800212e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002002:	2300      	movs	r3, #0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a40      	ldr	r2, [pc, #256]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002020:	2301      	movs	r3, #1
 8002022:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002024:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3a      	ldr	r2, [pc, #232]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002030:	f7fe fe10 	bl	8000c54 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002036:	e009      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7fe fe0c 	bl	8000c54 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d902      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	74fb      	strb	r3, [r7, #19]
        break;
 800204a:	e005      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ef      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d15c      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002068:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01f      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	d019      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002086:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002088:	4b21      	ldr	r3, [pc, #132]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d016      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7fe fdcb 	bl	8000c54 <HAL_GetTick>
 80020be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c0:	e00b      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe fdc7 	bl	8000c54 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d902      	bls.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	74fb      	strb	r3, [r7, #19]
            break;
 80020d8:	e006      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ec      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fe:	4904      	ldr	r1, [pc, #16]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002106:	e009      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	74bb      	strb	r3, [r7, #18]
 800210c:	e006      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211c:	7c7b      	ldrb	r3, [r7, #17]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4b9e      	ldr	r3, [pc, #632]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	4a9d      	ldr	r2, [pc, #628]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800213a:	4b98      	ldr	r3, [pc, #608]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f023 0203 	bic.w	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	4994      	ldr	r1, [pc, #592]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800215c:	4b8f      	ldr	r3, [pc, #572]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f023 020c 	bic.w	r2, r3, #12
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	498c      	ldr	r1, [pc, #560]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800217e:	4b87      	ldr	r3, [pc, #540]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4983      	ldr	r1, [pc, #524]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a0:	4b7e      	ldr	r3, [pc, #504]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	497b      	ldr	r1, [pc, #492]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d0:	4972      	ldr	r1, [pc, #456]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e4:	4b6d      	ldr	r3, [pc, #436]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	496a      	ldr	r1, [pc, #424]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002206:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	4961      	ldr	r1, [pc, #388]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002228:	4b5c      	ldr	r3, [pc, #368]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	4959      	ldr	r1, [pc, #356]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224a:	4b54      	ldr	r3, [pc, #336]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	4950      	ldr	r1, [pc, #320]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	4948      	ldr	r1, [pc, #288]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800228e:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	493f      	ldr	r1, [pc, #252]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d028      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022be:	4937      	ldr	r1, [pc, #220]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ce:	d106      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a31      	ldr	r2, [pc, #196]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022da:	60d3      	str	r3, [r2, #12]
 80022dc:	e011      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022e6:	d10c      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f8c8 	bl	8002484 <RCCEx_PLLSAI1_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d028      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002314:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	491f      	ldr	r1, [pc, #124]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232c:	d106      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002338:	60d3      	str	r3, [r2, #12]
 800233a:	e011      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002344:	d10c      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	2101      	movs	r1, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f899 	bl	8002484 <RCCEx_PLLSAI1_Config>
 8002352:	4603      	mov	r3, r0
 8002354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d02b      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800238a:	d109      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a02      	ldr	r2, [pc, #8]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002396:	60d3      	str	r3, [r2, #12]
 8002398:	e014      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2101      	movs	r1, #1
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f867 	bl	8002484 <RCCEx_PLLSAI1_Config>
 80023b6:	4603      	mov	r3, r0
 80023b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02f      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023de:	4928      	ldr	r1, [pc, #160]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ee:	d10d      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f844 	bl	8002484 <RCCEx_PLLSAI1_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d014      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	74bb      	strb	r3, [r7, #18]
 800240a:	e011      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002414:	d10c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3320      	adds	r3, #32
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f921 	bl	8002664 <RCCEx_PLLSAI2_Config>
 8002422:	4603      	mov	r3, r0
 8002424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800244a:	490d      	ldr	r1, [pc, #52]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800246e:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002476:	7cbb      	ldrb	r3, [r7, #18]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000

08002484 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d018      	beq.n	80024d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800249e:	4b70      	ldr	r3, [pc, #448]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0203 	and.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d10d      	bne.n	80024ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
       ||
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024b6:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
       ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d044      	beq.n	8002554 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e041      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d00c      	beq.n	80024f2 <RCCEx_PLLSAI1_Config+0x6e>
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d013      	beq.n	8002504 <RCCEx_PLLSAI1_Config+0x80>
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d120      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024e0:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d11d      	bne.n	8002528 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f0:	e01a      	b.n	8002528 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002502:	e013      	b.n	800252c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10f      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002520:	e006      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
      break;
 8002526:	e004      	b.n	8002532 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002528:	bf00      	nop
 800252a:	e002      	b.n	8002532 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800252c:	bf00      	nop
 800252e:	e000      	b.n	8002532 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002530:	bf00      	nop
    }

    if(status == HAL_OK)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10d      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002538:	4b49      	ldr	r3, [pc, #292]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	3b01      	subs	r3, #1
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	430b      	orrs	r3, r1
 800254e:	4944      	ldr	r1, [pc, #272]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d17d      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a40      	ldr	r2, [pc, #256]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002566:	f7fe fb75 	bl	8000c54 <HAL_GetTick>
 800256a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800256c:	e009      	b.n	8002582 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800256e:	f7fe fb71 	bl	8000c54 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d902      	bls.n	8002582 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	73fb      	strb	r3, [r7, #15]
        break;
 8002580:	e005      	b.n	800258e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ef      	bne.n	800256e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d160      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d111      	bne.n	80025be <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	0211      	lsls	r1, r2, #8
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68d2      	ldr	r2, [r2, #12]
 80025b0:	0912      	lsrs	r2, r2, #4
 80025b2:	0452      	lsls	r2, r2, #17
 80025b4:	430a      	orrs	r2, r1
 80025b6:	492a      	ldr	r1, [pc, #168]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	610b      	str	r3, [r1, #16]
 80025bc:	e027      	b.n	800260e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d112      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c4:	4b26      	ldr	r3, [pc, #152]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
 80025d4:	0211      	lsls	r1, r2, #8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6912      	ldr	r2, [r2, #16]
 80025da:	0852      	lsrs	r2, r2, #1
 80025dc:	3a01      	subs	r2, #1
 80025de:	0552      	lsls	r2, r2, #21
 80025e0:	430a      	orrs	r2, r1
 80025e2:	491f      	ldr	r1, [pc, #124]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	610b      	str	r3, [r1, #16]
 80025e8:	e011      	b.n	800260e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6892      	ldr	r2, [r2, #8]
 80025fa:	0211      	lsls	r1, r2, #8
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6952      	ldr	r2, [r2, #20]
 8002600:	0852      	lsrs	r2, r2, #1
 8002602:	3a01      	subs	r2, #1
 8002604:	0652      	lsls	r2, r2, #25
 8002606:	430a      	orrs	r2, r1
 8002608:	4915      	ldr	r1, [pc, #84]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002618:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fb1b 	bl	8000c54 <HAL_GetTick>
 800261e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002620:	e009      	b.n	8002636 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002622:	f7fe fb17 	bl	8000c54 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d902      	bls.n	8002636 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	73fb      	strb	r3, [r7, #15]
          break;
 8002634:	e005      	b.n	8002642 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ef      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4903      	ldr	r1, [pc, #12]	; (8002660 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000

08002664 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002672:	4b68      	ldr	r3, [pc, #416]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d018      	beq.n	80026b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d10d      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
       ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002696:	4b5f      	ldr	r3, [pc, #380]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
       ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d044      	beq.n	8002734 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	e041      	b.n	8002734 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d00c      	beq.n	80026d2 <RCCEx_PLLSAI2_Config+0x6e>
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d013      	beq.n	80026e4 <RCCEx_PLLSAI2_Config+0x80>
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d120      	bne.n	8002702 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026c0:	4b54      	ldr	r3, [pc, #336]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d11d      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d0:	e01a      	b.n	8002708 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026d2:	4b50      	ldr	r3, [pc, #320]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e2:	e013      	b.n	800270c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10f      	bne.n	8002710 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002700:	e006      	b.n	8002710 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      break;
 8002706:	e004      	b.n	8002712 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002708:	bf00      	nop
 800270a:	e002      	b.n	8002712 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800270c:	bf00      	nop
 800270e:	e000      	b.n	8002712 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002710:	bf00      	nop
    }

    if(status == HAL_OK)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10d      	bne.n	8002734 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002718:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	3b01      	subs	r3, #1
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	430b      	orrs	r3, r1
 800272e:	4939      	ldr	r1, [pc, #228]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d167      	bne.n	800280a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a35      	ldr	r2, [pc, #212]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002746:	f7fe fa85 	bl	8000c54 <HAL_GetTick>
 800274a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800274c:	e009      	b.n	8002762 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800274e:	f7fe fa81 	bl	8000c54 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d902      	bls.n	8002762 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	73fb      	strb	r3, [r7, #15]
        break;
 8002760:	e005      	b.n	800276e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ef      	bne.n	800274e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d14a      	bne.n	800280a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d111      	bne.n	800279e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6892      	ldr	r2, [r2, #8]
 800278a:	0211      	lsls	r1, r2, #8
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68d2      	ldr	r2, [r2, #12]
 8002790:	0912      	lsrs	r2, r2, #4
 8002792:	0452      	lsls	r2, r2, #17
 8002794:	430a      	orrs	r2, r1
 8002796:	491f      	ldr	r1, [pc, #124]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	614b      	str	r3, [r1, #20]
 800279c:	e011      	b.n	80027c2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6892      	ldr	r2, [r2, #8]
 80027ae:	0211      	lsls	r1, r2, #8
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6912      	ldr	r2, [r2, #16]
 80027b4:	0852      	lsrs	r2, r2, #1
 80027b6:	3a01      	subs	r2, #1
 80027b8:	0652      	lsls	r2, r2, #25
 80027ba:	430a      	orrs	r2, r1
 80027bc:	4915      	ldr	r1, [pc, #84]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a13      	ldr	r2, [pc, #76]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe fa41 	bl	8000c54 <HAL_GetTick>
 80027d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027d4:	e009      	b.n	80027ea <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027d6:	f7fe fa3d 	bl	8000c54 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d902      	bls.n	80027ea <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	73fb      	strb	r3, [r7, #15]
          break;
 80027e8:	e005      	b.n	80027f6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ef      	beq.n	80027d6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	4903      	ldr	r1, [pc, #12]	; (8002814 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e040      	b.n	80028ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe f8a2 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f98c 	bl	8002b74 <UART_SetConfig>
 800285c:	4603      	mov	r3, r0
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e022      	b.n	80028ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fcf2 	bl	8003258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fd79 	bl	800339c <UART_CheckIdleState>
 80028aa:	4603      	mov	r3, r0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	f040 8081 	bne.w	80029d0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_UART_Transmit+0x26>
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e079      	b.n	80029d2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_UART_Transmit+0x38>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e072      	b.n	80029d2 <HAL_UART_Transmit+0x11e>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2221      	movs	r2, #33	; 0x21
 80028fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002900:	f7fe f9a8 	bl	8000c54 <HAL_GetTick>
 8002904:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	88fa      	ldrh	r2, [r7, #6]
 800290a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d108      	bne.n	8002932 <HAL_UART_Transmit+0x7e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e003      	b.n	800293a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002942:	e02d      	b.n	80029a0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fd69 	bl	8003426 <UART_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e039      	b.n	80029d2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002970:	b292      	uxth	r2, r2
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	3302      	adds	r3, #2
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	e008      	b.n	800298e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b292      	uxth	r2, r2
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	3301      	adds	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1cb      	bne.n	8002944 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2200      	movs	r2, #0
 80029b4:	2140      	movs	r1, #64	; 0x40
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fd35 	bl	8003426 <UART_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e005      	b.n	80029d2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b08a      	sub	sp, #40	; 0x28
 80029de:	af02      	add	r7, sp, #8
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	f040 80bb 	bne.w	8002b6a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_UART_Receive+0x26>
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0b3      	b.n	8002b6c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_UART_Receive+0x38>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0ac      	b.n	8002b6c <HAL_UART_Receive+0x192>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2222      	movs	r2, #34	; 0x22
 8002a24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a26:	f7fe f915 	bl	8000c54 <HAL_GetTick>
 8002a2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d10e      	bne.n	8002a64 <HAL_UART_Receive+0x8a>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_UART_Receive+0x80>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a58:	e02d      	b.n	8002ab6 <HAL_UART_Receive+0xdc>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a62:	e028      	b.n	8002ab6 <HAL_UART_Receive+0xdc>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <HAL_UART_Receive+0xae>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_Receive+0xa4>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a7c:	e01b      	b.n	8002ab6 <HAL_UART_Receive+0xdc>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	227f      	movs	r2, #127	; 0x7f
 8002a82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a86:	e016      	b.n	8002ab6 <HAL_UART_Receive+0xdc>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a90:	d10d      	bne.n	8002aae <HAL_UART_Receive+0xd4>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <HAL_UART_Receive+0xca>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	227f      	movs	r2, #127	; 0x7f
 8002a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aa2:	e008      	b.n	8002ab6 <HAL_UART_Receive+0xdc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	223f      	movs	r2, #63	; 0x3f
 8002aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aac:	e003      	b.n	8002ab6 <HAL_UART_Receive+0xdc>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002abc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	d108      	bne.n	8002ada <HAL_UART_Receive+0x100>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	e003      	b.n	8002ae2 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002aea:	e033      	b.n	8002b54 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2120      	movs	r1, #32
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fc95 	bl	8003426 <UART_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e032      	b.n	8002b6c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10c      	bne.n	8002b26 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	8a7b      	ldrh	r3, [r7, #18]
 8002b16:	4013      	ands	r3, r2
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3302      	adds	r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e00d      	b.n	8002b42 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	8a7b      	ldrh	r3, [r7, #18]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4013      	ands	r3, r2
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1c5      	bne.n	8002aec <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002b78:	b08a      	sub	sp, #40	; 0x28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4bb8      	ldr	r3, [pc, #736]	; (8002e8c <UART_SetConfig+0x318>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4aae      	ldr	r2, [pc, #696]	; (8002e90 <UART_SetConfig+0x31c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	4313      	orrs	r3, r2
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4aa5      	ldr	r2, [pc, #660]	; (8002e94 <UART_SetConfig+0x320>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d126      	bne.n	8002c52 <UART_SetConfig+0xde>
 8002c04:	4ba4      	ldr	r3, [pc, #656]	; (8002e98 <UART_SetConfig+0x324>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d81a      	bhi.n	8002c48 <UART_SetConfig+0xd4>
 8002c12:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <UART_SetConfig+0xa4>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c39 	.word	0x08002c39
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c41 	.word	0x08002c41
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c2e:	e105      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002c30:	2302      	movs	r3, #2
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c36:	e101      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c3e:	e0fd      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002c40:	2308      	movs	r3, #8
 8002c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c46:	e0f9      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002c48:	2310      	movs	r3, #16
 8002c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c4e:	bf00      	nop
 8002c50:	e0f4      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a91      	ldr	r2, [pc, #580]	; (8002e9c <UART_SetConfig+0x328>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d138      	bne.n	8002cce <UART_SetConfig+0x15a>
 8002c5c:	4b8e      	ldr	r3, [pc, #568]	; (8002e98 <UART_SetConfig+0x324>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	d82c      	bhi.n	8002cc4 <UART_SetConfig+0x150>
 8002c6a:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <UART_SetConfig+0xfc>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002ca5 	.word	0x08002ca5
 8002c74:	08002cc5 	.word	0x08002cc5
 8002c78:	08002cc5 	.word	0x08002cc5
 8002c7c:	08002cc5 	.word	0x08002cc5
 8002c80:	08002cb5 	.word	0x08002cb5
 8002c84:	08002cc5 	.word	0x08002cc5
 8002c88:	08002cc5 	.word	0x08002cc5
 8002c8c:	08002cc5 	.word	0x08002cc5
 8002c90:	08002cad 	.word	0x08002cad
 8002c94:	08002cc5 	.word	0x08002cc5
 8002c98:	08002cc5 	.word	0x08002cc5
 8002c9c:	08002cc5 	.word	0x08002cc5
 8002ca0:	08002cbd 	.word	0x08002cbd
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002caa:	e0c7      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002cac:	2302      	movs	r3, #2
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb2:	e0c3      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cba:	e0bf      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc2:	e0bb      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cca:	bf00      	nop
 8002ccc:	e0b6      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a73      	ldr	r2, [pc, #460]	; (8002ea0 <UART_SetConfig+0x32c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d125      	bne.n	8002d24 <UART_SetConfig+0x1b0>
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <UART_SetConfig+0x324>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d011      	beq.n	8002d0a <UART_SetConfig+0x196>
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d802      	bhi.n	8002cf0 <UART_SetConfig+0x17c>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <UART_SetConfig+0x186>
 8002cee:	e014      	b.n	8002d1a <UART_SetConfig+0x1a6>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d006      	beq.n	8002d02 <UART_SetConfig+0x18e>
 8002cf4:	2b30      	cmp	r3, #48	; 0x30
 8002cf6:	d00c      	beq.n	8002d12 <UART_SetConfig+0x19e>
 8002cf8:	e00f      	b.n	8002d1a <UART_SetConfig+0x1a6>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d00:	e09c      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d02:	2302      	movs	r3, #2
 8002d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d08:	e098      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d10:	e094      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d12:	2308      	movs	r3, #8
 8002d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d18:	e090      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d1a:	2310      	movs	r3, #16
 8002d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d20:	bf00      	nop
 8002d22:	e08b      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a5e      	ldr	r2, [pc, #376]	; (8002ea4 <UART_SetConfig+0x330>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d125      	bne.n	8002d7a <UART_SetConfig+0x206>
 8002d2e:	4b5a      	ldr	r3, [pc, #360]	; (8002e98 <UART_SetConfig+0x324>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d011      	beq.n	8002d60 <UART_SetConfig+0x1ec>
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d802      	bhi.n	8002d46 <UART_SetConfig+0x1d2>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <UART_SetConfig+0x1dc>
 8002d44:	e014      	b.n	8002d70 <UART_SetConfig+0x1fc>
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d006      	beq.n	8002d58 <UART_SetConfig+0x1e4>
 8002d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d4c:	d00c      	beq.n	8002d68 <UART_SetConfig+0x1f4>
 8002d4e:	e00f      	b.n	8002d70 <UART_SetConfig+0x1fc>
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d56:	e071      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5e:	e06d      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d60:	2304      	movs	r3, #4
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d66:	e069      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d68:	2308      	movs	r3, #8
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6e:	e065      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d70:	2310      	movs	r3, #16
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	bf00      	nop
 8002d78:	e060      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <UART_SetConfig+0x334>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d129      	bne.n	8002dd8 <UART_SetConfig+0x264>
 8002d84:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <UART_SetConfig+0x324>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d92:	d014      	beq.n	8002dbe <UART_SetConfig+0x24a>
 8002d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d98:	d802      	bhi.n	8002da0 <UART_SetConfig+0x22c>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <UART_SetConfig+0x23a>
 8002d9e:	e016      	b.n	8002dce <UART_SetConfig+0x25a>
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d007      	beq.n	8002db6 <UART_SetConfig+0x242>
 8002da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002daa:	d00c      	beq.n	8002dc6 <UART_SetConfig+0x252>
 8002dac:	e00f      	b.n	8002dce <UART_SetConfig+0x25a>
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db4:	e042      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002db6:	2302      	movs	r3, #2
 8002db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbc:	e03e      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc4:	e03a      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dcc:	e036      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002dce:	2310      	movs	r3, #16
 8002dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd4:	bf00      	nop
 8002dd6:	e031      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <UART_SetConfig+0x31c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d129      	bne.n	8002e36 <UART_SetConfig+0x2c2>
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <UART_SetConfig+0x324>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df0:	d014      	beq.n	8002e1c <UART_SetConfig+0x2a8>
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df6:	d802      	bhi.n	8002dfe <UART_SetConfig+0x28a>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <UART_SetConfig+0x298>
 8002dfc:	e016      	b.n	8002e2c <UART_SetConfig+0x2b8>
 8002dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e02:	d007      	beq.n	8002e14 <UART_SetConfig+0x2a0>
 8002e04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e08:	d00c      	beq.n	8002e24 <UART_SetConfig+0x2b0>
 8002e0a:	e00f      	b.n	8002e2c <UART_SetConfig+0x2b8>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e12:	e013      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002e14:	2302      	movs	r3, #2
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1a:	e00f      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e22:	e00b      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002e24:	2308      	movs	r3, #8
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2a:	e007      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e32:	bf00      	nop
 8002e34:	e002      	b.n	8002e3c <UART_SetConfig+0x2c8>
 8002e36:	2310      	movs	r3, #16
 8002e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <UART_SetConfig+0x31c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	f040 80fe 	bne.w	8003044 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d837      	bhi.n	8002ec0 <UART_SetConfig+0x34c>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <UART_SetConfig+0x2e4>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002ec1 	.word	0x08002ec1
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08002ec1 	.word	0x08002ec1
 8002e68:	08002eb1 	.word	0x08002eb1
 8002e6c:	08002ec1 	.word	0x08002ec1
 8002e70:	08002ec1 	.word	0x08002ec1
 8002e74:	08002ec1 	.word	0x08002ec1
 8002e78:	08002eb9 	.word	0x08002eb9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f7fe ff90 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002e80:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e82:	e020      	b.n	8002ec6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <UART_SetConfig+0x338>)
 8002e86:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e88:	e01d      	b.n	8002ec6 <UART_SetConfig+0x352>
 8002e8a:	bf00      	nop
 8002e8c:	efff69f3 	.word	0xefff69f3
 8002e90:	40008000 	.word	0x40008000
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40004400 	.word	0x40004400
 8002ea0:	40004800 	.word	0x40004800
 8002ea4:	40004c00 	.word	0x40004c00
 8002ea8:	40005000 	.word	0x40005000
 8002eac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002eb0:	f7fe fee0 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002eb4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002eb6:	e006      	b.n	8002ec6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ebc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ebe:	e002      	b.n	8002ec6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	76fb      	strb	r3, [r7, #27]
        break;
 8002ec4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 81b9 	beq.w	8003240 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d305      	bcc.n	8002eea <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d902      	bls.n	8002ef0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	76fb      	strb	r3, [r7, #27]
 8002eee:	e1a7      	b.n	8003240 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8002ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f200 8092 	bhi.w	800301e <UART_SetConfig+0x4aa>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <UART_SetConfig+0x38c>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	0800301f 	.word	0x0800301f
 8002f08:	08002f73 	.word	0x08002f73
 8002f0c:	0800301f 	.word	0x0800301f
 8002f10:	08002fa7 	.word	0x08002fa7
 8002f14:	0800301f 	.word	0x0800301f
 8002f18:	0800301f 	.word	0x0800301f
 8002f1c:	0800301f 	.word	0x0800301f
 8002f20:	08002ff5 	.word	0x08002ff5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002f24:	f7fe ff3c 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002f28:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	f04f 0400 	mov.w	r4, #0
 8002f3a:	0214      	lsls	r4, r2, #8
 8002f3c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f40:	020b      	lsls	r3, r1, #8
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6852      	ldr	r2, [r2, #4]
 8002f46:	0852      	lsrs	r2, r2, #1
 8002f48:	4611      	mov	r1, r2
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	eb13 0b01 	adds.w	fp, r3, r1
 8002f52:	eb44 0c02 	adc.w	ip, r4, r2
 8002f56:	4658      	mov	r0, fp
 8002f58:	4661      	mov	r1, ip
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f04f 0400 	mov.w	r4, #0
 8002f62:	461a      	mov	r2, r3
 8002f64:	4623      	mov	r3, r4
 8002f66:	f7fd f98b 	bl	8000280 <__aeabi_uldivmod>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f70:	e058      	b.n	8003024 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	f04f 0400 	mov.w	r4, #0
 8002f7c:	49ae      	ldr	r1, [pc, #696]	; (8003238 <UART_SetConfig+0x6c4>)
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	eb13 0b01 	adds.w	fp, r3, r1
 8002f86:	eb44 0c02 	adc.w	ip, r4, r2
 8002f8a:	4658      	mov	r0, fp
 8002f8c:	4661      	mov	r1, ip
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f04f 0400 	mov.w	r4, #0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4623      	mov	r3, r4
 8002f9a:	f7fd f971 	bl	8000280 <__aeabi_uldivmod>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002fa4:	e03e      	b.n	8003024 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002fa6:	f7fe fe65 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002faa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	f04f 0400 	mov.w	r4, #0
 8002fbc:	0214      	lsls	r4, r2, #8
 8002fbe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002fc2:	020b      	lsls	r3, r1, #8
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6852      	ldr	r2, [r2, #4]
 8002fc8:	0852      	lsrs	r2, r2, #1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	eb13 0b01 	adds.w	fp, r3, r1
 8002fd4:	eb44 0c02 	adc.w	ip, r4, r2
 8002fd8:	4658      	mov	r0, fp
 8002fda:	4661      	mov	r1, ip
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f04f 0400 	mov.w	r4, #0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	f7fd f94a 	bl	8000280 <__aeabi_uldivmod>
 8002fec:	4603      	mov	r3, r0
 8002fee:	460c      	mov	r4, r1
 8002ff0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ff2:	e017      	b.n	8003024 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	f04f 0400 	mov.w	r4, #0
 8002ffe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003002:	f144 0100 	adc.w	r1, r4, #0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f04f 0400 	mov.w	r4, #0
 800300e:	461a      	mov	r2, r3
 8003010:	4623      	mov	r3, r4
 8003012:	f7fd f935 	bl	8000280 <__aeabi_uldivmod>
 8003016:	4603      	mov	r3, r0
 8003018:	460c      	mov	r4, r1
 800301a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800301c:	e002      	b.n	8003024 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	76fb      	strb	r3, [r7, #27]
            break;
 8003022:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800302a:	d308      	bcc.n	800303e <UART_SetConfig+0x4ca>
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003032:	d204      	bcs.n	800303e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	e100      	b.n	8003240 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	76fb      	strb	r3, [r7, #27]
 8003042:	e0fd      	b.n	8003240 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304c:	f040 8084 	bne.w	8003158 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003054:	2b08      	cmp	r3, #8
 8003056:	d85f      	bhi.n	8003118 <UART_SetConfig+0x5a4>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <UART_SetConfig+0x4ec>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003085 	.word	0x08003085
 8003064:	080030a5 	.word	0x080030a5
 8003068:	080030c5 	.word	0x080030c5
 800306c:	08003119 	.word	0x08003119
 8003070:	080030e1 	.word	0x080030e1
 8003074:	08003119 	.word	0x08003119
 8003078:	08003119 	.word	0x08003119
 800307c:	08003119 	.word	0x08003119
 8003080:	08003101 	.word	0x08003101
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003084:	f7fe fe8c 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003088:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	005a      	lsls	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	b29b      	uxth	r3, r3
 80030a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030a2:	e03c      	b.n	800311e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030a4:	f7fe fe92 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 80030a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	b29b      	uxth	r3, r3
 80030c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030c2:	e02c      	b.n	800311e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80030ce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6852      	ldr	r2, [r2, #4]
 80030d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030de:	e01e      	b.n	800311e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e0:	f7fe fdc8 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 80030e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	005a      	lsls	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030fe:	e00e      	b.n	800311e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	b29b      	uxth	r3, r3
 8003114:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003116:	e002      	b.n	800311e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	76fb      	strb	r3, [r7, #27]
        break;
 800311c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d916      	bls.n	8003152 <UART_SetConfig+0x5de>
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d212      	bcs.n	8003152 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	b29b      	uxth	r3, r3
 8003130:	f023 030f 	bic.w	r3, r3, #15
 8003134:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	b29b      	uxth	r3, r3
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	b29a      	uxth	r2, r3
 8003142:	89fb      	ldrh	r3, [r7, #14]
 8003144:	4313      	orrs	r3, r2
 8003146:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	89fa      	ldrh	r2, [r7, #14]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e076      	b.n	8003240 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	76fb      	strb	r3, [r7, #27]
 8003156:	e073      	b.n	8003240 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8003158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800315c:	2b08      	cmp	r3, #8
 800315e:	d85c      	bhi.n	800321a <UART_SetConfig+0x6a6>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <UART_SetConfig+0x5f4>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800318d 	.word	0x0800318d
 800316c:	080031ab 	.word	0x080031ab
 8003170:	080031c9 	.word	0x080031c9
 8003174:	0800321b 	.word	0x0800321b
 8003178:	080031e5 	.word	0x080031e5
 800317c:	0800321b 	.word	0x0800321b
 8003180:	0800321b 	.word	0x0800321b
 8003184:	0800321b 	.word	0x0800321b
 8003188:	08003203 	.word	0x08003203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318c:	f7fe fe08 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003190:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	085a      	lsrs	r2, r3, #1
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	441a      	add	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031a8:	e03a      	b.n	8003220 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031aa:	f7fe fe0f 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 80031ae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	085a      	lsrs	r2, r3, #1
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031c6:	e02b      	b.n	8003220 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80031d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6852      	ldr	r2, [r2, #4]
 80031da:	fbb3 f3f2 	udiv	r3, r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031e2:	e01d      	b.n	8003220 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e4:	f7fe fd46 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 80031e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	085a      	lsrs	r2, r3, #1
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	441a      	add	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003200:	e00e      	b.n	8003220 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	b29b      	uxth	r3, r3
 8003216:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003218:	e002      	b.n	8003220 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	76fb      	strb	r3, [r7, #27]
        break;
 800321e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	d90a      	bls.n	800323c <UART_SetConfig+0x6c8>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d206      	bcs.n	800323c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	e003      	b.n	8003240 <UART_SetConfig+0x6cc>
 8003238:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800324c:	7efb      	ldrb	r3, [r7, #27]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01a      	beq.n	800336e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003356:	d10a      	bne.n	800336e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80033aa:	f7fd fc53 	bl	8000c54 <HAL_GetTick>
 80033ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d10e      	bne.n	80033dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f82a 	bl	8003426 <UART_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e020      	b.n	800341e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d10e      	bne.n	8003408 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f814 	bl	8003426 <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e00a      	b.n	800341e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003436:	e05d      	b.n	80034f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800343e:	d059      	beq.n	80034f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fd fc08 	bl	8000c54 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <UART_WaitOnFlagUntilTimeout+0x30>
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11b      	bne.n	800348e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003464:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e042      	b.n	8003514 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02b      	beq.n	80034f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034aa:	d123      	bne.n	80034f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034b4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034c4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e00f      	b.n	8003514 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	429a      	cmp	r2, r3
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	429a      	cmp	r2, r3
 8003510:	d092      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <atoi>:
 800351c:	220a      	movs	r2, #10
 800351e:	2100      	movs	r1, #0
 8003520:	f000 b8ce 	b.w	80036c0 <strtol>

08003524 <__errno>:
 8003524:	4b01      	ldr	r3, [pc, #4]	; (800352c <__errno+0x8>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	2000000c 	.word	0x2000000c

08003530 <__libc_init_array>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4e0d      	ldr	r6, [pc, #52]	; (8003568 <__libc_init_array+0x38>)
 8003534:	4c0d      	ldr	r4, [pc, #52]	; (800356c <__libc_init_array+0x3c>)
 8003536:	1ba4      	subs	r4, r4, r6
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	2500      	movs	r5, #0
 800353c:	42a5      	cmp	r5, r4
 800353e:	d109      	bne.n	8003554 <__libc_init_array+0x24>
 8003540:	4e0b      	ldr	r6, [pc, #44]	; (8003570 <__libc_init_array+0x40>)
 8003542:	4c0c      	ldr	r4, [pc, #48]	; (8003574 <__libc_init_array+0x44>)
 8003544:	f000 fcdc 	bl	8003f00 <_init>
 8003548:	1ba4      	subs	r4, r4, r6
 800354a:	10a4      	asrs	r4, r4, #2
 800354c:	2500      	movs	r5, #0
 800354e:	42a5      	cmp	r5, r4
 8003550:	d105      	bne.n	800355e <__libc_init_array+0x2e>
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003558:	4798      	blx	r3
 800355a:	3501      	adds	r5, #1
 800355c:	e7ee      	b.n	800353c <__libc_init_array+0xc>
 800355e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003562:	4798      	blx	r3
 8003564:	3501      	adds	r5, #1
 8003566:	e7f2      	b.n	800354e <__libc_init_array+0x1e>
 8003568:	080041a4 	.word	0x080041a4
 800356c:	080041a4 	.word	0x080041a4
 8003570:	080041a4 	.word	0x080041a4
 8003574:	080041a8 	.word	0x080041a8

08003578 <memset>:
 8003578:	4402      	add	r2, r0
 800357a:	4603      	mov	r3, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <siprintf>:
 8003588:	b40e      	push	{r1, r2, r3}
 800358a:	b500      	push	{lr}
 800358c:	b09c      	sub	sp, #112	; 0x70
 800358e:	ab1d      	add	r3, sp, #116	; 0x74
 8003590:	9002      	str	r0, [sp, #8]
 8003592:	9006      	str	r0, [sp, #24]
 8003594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003598:	4809      	ldr	r0, [pc, #36]	; (80035c0 <siprintf+0x38>)
 800359a:	9107      	str	r1, [sp, #28]
 800359c:	9104      	str	r1, [sp, #16]
 800359e:	4909      	ldr	r1, [pc, #36]	; (80035c4 <siprintf+0x3c>)
 80035a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80035a4:	9105      	str	r1, [sp, #20]
 80035a6:	6800      	ldr	r0, [r0, #0]
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	a902      	add	r1, sp, #8
 80035ac:	f000 f90e 	bl	80037cc <_svfiprintf_r>
 80035b0:	9b02      	ldr	r3, [sp, #8]
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	b01c      	add	sp, #112	; 0x70
 80035b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035bc:	b003      	add	sp, #12
 80035be:	4770      	bx	lr
 80035c0:	2000000c 	.word	0x2000000c
 80035c4:	ffff0208 	.word	0xffff0208

080035c8 <_strtol_l.isra.0>:
 80035c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035cc:	4680      	mov	r8, r0
 80035ce:	4689      	mov	r9, r1
 80035d0:	4692      	mov	sl, r2
 80035d2:	461e      	mov	r6, r3
 80035d4:	460f      	mov	r7, r1
 80035d6:	463d      	mov	r5, r7
 80035d8:	9808      	ldr	r0, [sp, #32]
 80035da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035de:	f000 f885 	bl	80036ec <__locale_ctype_ptr_l>
 80035e2:	4420      	add	r0, r4
 80035e4:	7843      	ldrb	r3, [r0, #1]
 80035e6:	f013 0308 	ands.w	r3, r3, #8
 80035ea:	d132      	bne.n	8003652 <_strtol_l.isra.0+0x8a>
 80035ec:	2c2d      	cmp	r4, #45	; 0x2d
 80035ee:	d132      	bne.n	8003656 <_strtol_l.isra.0+0x8e>
 80035f0:	787c      	ldrb	r4, [r7, #1]
 80035f2:	1cbd      	adds	r5, r7, #2
 80035f4:	2201      	movs	r2, #1
 80035f6:	2e00      	cmp	r6, #0
 80035f8:	d05d      	beq.n	80036b6 <_strtol_l.isra.0+0xee>
 80035fa:	2e10      	cmp	r6, #16
 80035fc:	d109      	bne.n	8003612 <_strtol_l.isra.0+0x4a>
 80035fe:	2c30      	cmp	r4, #48	; 0x30
 8003600:	d107      	bne.n	8003612 <_strtol_l.isra.0+0x4a>
 8003602:	782b      	ldrb	r3, [r5, #0]
 8003604:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003608:	2b58      	cmp	r3, #88	; 0x58
 800360a:	d14f      	bne.n	80036ac <_strtol_l.isra.0+0xe4>
 800360c:	786c      	ldrb	r4, [r5, #1]
 800360e:	2610      	movs	r6, #16
 8003610:	3502      	adds	r5, #2
 8003612:	2a00      	cmp	r2, #0
 8003614:	bf14      	ite	ne
 8003616:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800361a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800361e:	2700      	movs	r7, #0
 8003620:	fbb1 fcf6 	udiv	ip, r1, r6
 8003624:	4638      	mov	r0, r7
 8003626:	fb06 1e1c 	mls	lr, r6, ip, r1
 800362a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800362e:	2b09      	cmp	r3, #9
 8003630:	d817      	bhi.n	8003662 <_strtol_l.isra.0+0x9a>
 8003632:	461c      	mov	r4, r3
 8003634:	42a6      	cmp	r6, r4
 8003636:	dd23      	ble.n	8003680 <_strtol_l.isra.0+0xb8>
 8003638:	1c7b      	adds	r3, r7, #1
 800363a:	d007      	beq.n	800364c <_strtol_l.isra.0+0x84>
 800363c:	4584      	cmp	ip, r0
 800363e:	d31c      	bcc.n	800367a <_strtol_l.isra.0+0xb2>
 8003640:	d101      	bne.n	8003646 <_strtol_l.isra.0+0x7e>
 8003642:	45a6      	cmp	lr, r4
 8003644:	db19      	blt.n	800367a <_strtol_l.isra.0+0xb2>
 8003646:	fb00 4006 	mla	r0, r0, r6, r4
 800364a:	2701      	movs	r7, #1
 800364c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003650:	e7eb      	b.n	800362a <_strtol_l.isra.0+0x62>
 8003652:	462f      	mov	r7, r5
 8003654:	e7bf      	b.n	80035d6 <_strtol_l.isra.0+0xe>
 8003656:	2c2b      	cmp	r4, #43	; 0x2b
 8003658:	bf04      	itt	eq
 800365a:	1cbd      	addeq	r5, r7, #2
 800365c:	787c      	ldrbeq	r4, [r7, #1]
 800365e:	461a      	mov	r2, r3
 8003660:	e7c9      	b.n	80035f6 <_strtol_l.isra.0+0x2e>
 8003662:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003666:	2b19      	cmp	r3, #25
 8003668:	d801      	bhi.n	800366e <_strtol_l.isra.0+0xa6>
 800366a:	3c37      	subs	r4, #55	; 0x37
 800366c:	e7e2      	b.n	8003634 <_strtol_l.isra.0+0x6c>
 800366e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003672:	2b19      	cmp	r3, #25
 8003674:	d804      	bhi.n	8003680 <_strtol_l.isra.0+0xb8>
 8003676:	3c57      	subs	r4, #87	; 0x57
 8003678:	e7dc      	b.n	8003634 <_strtol_l.isra.0+0x6c>
 800367a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800367e:	e7e5      	b.n	800364c <_strtol_l.isra.0+0x84>
 8003680:	1c7b      	adds	r3, r7, #1
 8003682:	d108      	bne.n	8003696 <_strtol_l.isra.0+0xce>
 8003684:	2322      	movs	r3, #34	; 0x22
 8003686:	f8c8 3000 	str.w	r3, [r8]
 800368a:	4608      	mov	r0, r1
 800368c:	f1ba 0f00 	cmp.w	sl, #0
 8003690:	d107      	bne.n	80036a2 <_strtol_l.isra.0+0xda>
 8003692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003696:	b102      	cbz	r2, 800369a <_strtol_l.isra.0+0xd2>
 8003698:	4240      	negs	r0, r0
 800369a:	f1ba 0f00 	cmp.w	sl, #0
 800369e:	d0f8      	beq.n	8003692 <_strtol_l.isra.0+0xca>
 80036a0:	b10f      	cbz	r7, 80036a6 <_strtol_l.isra.0+0xde>
 80036a2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80036a6:	f8ca 9000 	str.w	r9, [sl]
 80036aa:	e7f2      	b.n	8003692 <_strtol_l.isra.0+0xca>
 80036ac:	2430      	movs	r4, #48	; 0x30
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	d1af      	bne.n	8003612 <_strtol_l.isra.0+0x4a>
 80036b2:	2608      	movs	r6, #8
 80036b4:	e7ad      	b.n	8003612 <_strtol_l.isra.0+0x4a>
 80036b6:	2c30      	cmp	r4, #48	; 0x30
 80036b8:	d0a3      	beq.n	8003602 <_strtol_l.isra.0+0x3a>
 80036ba:	260a      	movs	r6, #10
 80036bc:	e7a9      	b.n	8003612 <_strtol_l.isra.0+0x4a>
	...

080036c0 <strtol>:
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <strtol+0x24>)
 80036c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036c4:	681c      	ldr	r4, [r3, #0]
 80036c6:	4d08      	ldr	r5, [pc, #32]	; (80036e8 <strtol+0x28>)
 80036c8:	6a23      	ldr	r3, [r4, #32]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf08      	it	eq
 80036ce:	462b      	moveq	r3, r5
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	460a      	mov	r2, r1
 80036d6:	4601      	mov	r1, r0
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff ff75 	bl	80035c8 <_strtol_l.isra.0>
 80036de:	b003      	add	sp, #12
 80036e0:	bd30      	pop	{r4, r5, pc}
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c
 80036e8:	20000070 	.word	0x20000070

080036ec <__locale_ctype_ptr_l>:
 80036ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80036f0:	4770      	bx	lr

080036f2 <__ascii_mbtowc>:
 80036f2:	b082      	sub	sp, #8
 80036f4:	b901      	cbnz	r1, 80036f8 <__ascii_mbtowc+0x6>
 80036f6:	a901      	add	r1, sp, #4
 80036f8:	b142      	cbz	r2, 800370c <__ascii_mbtowc+0x1a>
 80036fa:	b14b      	cbz	r3, 8003710 <__ascii_mbtowc+0x1e>
 80036fc:	7813      	ldrb	r3, [r2, #0]
 80036fe:	600b      	str	r3, [r1, #0]
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	1c10      	adds	r0, r2, #0
 8003704:	bf18      	it	ne
 8003706:	2001      	movne	r0, #1
 8003708:	b002      	add	sp, #8
 800370a:	4770      	bx	lr
 800370c:	4610      	mov	r0, r2
 800370e:	e7fb      	b.n	8003708 <__ascii_mbtowc+0x16>
 8003710:	f06f 0001 	mvn.w	r0, #1
 8003714:	e7f8      	b.n	8003708 <__ascii_mbtowc+0x16>

08003716 <__ssputs_r>:
 8003716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371a:	688e      	ldr	r6, [r1, #8]
 800371c:	429e      	cmp	r6, r3
 800371e:	4682      	mov	sl, r0
 8003720:	460c      	mov	r4, r1
 8003722:	4690      	mov	r8, r2
 8003724:	4699      	mov	r9, r3
 8003726:	d837      	bhi.n	8003798 <__ssputs_r+0x82>
 8003728:	898a      	ldrh	r2, [r1, #12]
 800372a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800372e:	d031      	beq.n	8003794 <__ssputs_r+0x7e>
 8003730:	6825      	ldr	r5, [r4, #0]
 8003732:	6909      	ldr	r1, [r1, #16]
 8003734:	1a6f      	subs	r7, r5, r1
 8003736:	6965      	ldr	r5, [r4, #20]
 8003738:	2302      	movs	r3, #2
 800373a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800373e:	fb95 f5f3 	sdiv	r5, r5, r3
 8003742:	f109 0301 	add.w	r3, r9, #1
 8003746:	443b      	add	r3, r7
 8003748:	429d      	cmp	r5, r3
 800374a:	bf38      	it	cc
 800374c:	461d      	movcc	r5, r3
 800374e:	0553      	lsls	r3, r2, #21
 8003750:	d530      	bpl.n	80037b4 <__ssputs_r+0x9e>
 8003752:	4629      	mov	r1, r5
 8003754:	f000 fb3a 	bl	8003dcc <_malloc_r>
 8003758:	4606      	mov	r6, r0
 800375a:	b950      	cbnz	r0, 8003772 <__ssputs_r+0x5c>
 800375c:	230c      	movs	r3, #12
 800375e:	f8ca 3000 	str.w	r3, [sl]
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003768:	81a3      	strh	r3, [r4, #12]
 800376a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003772:	463a      	mov	r2, r7
 8003774:	6921      	ldr	r1, [r4, #16]
 8003776:	f000 fab6 	bl	8003ce6 <memcpy>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003784:	81a3      	strh	r3, [r4, #12]
 8003786:	6126      	str	r6, [r4, #16]
 8003788:	6165      	str	r5, [r4, #20]
 800378a:	443e      	add	r6, r7
 800378c:	1bed      	subs	r5, r5, r7
 800378e:	6026      	str	r6, [r4, #0]
 8003790:	60a5      	str	r5, [r4, #8]
 8003792:	464e      	mov	r6, r9
 8003794:	454e      	cmp	r6, r9
 8003796:	d900      	bls.n	800379a <__ssputs_r+0x84>
 8003798:	464e      	mov	r6, r9
 800379a:	4632      	mov	r2, r6
 800379c:	4641      	mov	r1, r8
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	f000 faac 	bl	8003cfc <memmove>
 80037a4:	68a3      	ldr	r3, [r4, #8]
 80037a6:	1b9b      	subs	r3, r3, r6
 80037a8:	60a3      	str	r3, [r4, #8]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	441e      	add	r6, r3
 80037ae:	6026      	str	r6, [r4, #0]
 80037b0:	2000      	movs	r0, #0
 80037b2:	e7dc      	b.n	800376e <__ssputs_r+0x58>
 80037b4:	462a      	mov	r2, r5
 80037b6:	f000 fb63 	bl	8003e80 <_realloc_r>
 80037ba:	4606      	mov	r6, r0
 80037bc:	2800      	cmp	r0, #0
 80037be:	d1e2      	bne.n	8003786 <__ssputs_r+0x70>
 80037c0:	6921      	ldr	r1, [r4, #16]
 80037c2:	4650      	mov	r0, sl
 80037c4:	f000 fab4 	bl	8003d30 <_free_r>
 80037c8:	e7c8      	b.n	800375c <__ssputs_r+0x46>
	...

080037cc <_svfiprintf_r>:
 80037cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d0:	461d      	mov	r5, r3
 80037d2:	898b      	ldrh	r3, [r1, #12]
 80037d4:	061f      	lsls	r7, r3, #24
 80037d6:	b09d      	sub	sp, #116	; 0x74
 80037d8:	4680      	mov	r8, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	4616      	mov	r6, r2
 80037de:	d50f      	bpl.n	8003800 <_svfiprintf_r+0x34>
 80037e0:	690b      	ldr	r3, [r1, #16]
 80037e2:	b96b      	cbnz	r3, 8003800 <_svfiprintf_r+0x34>
 80037e4:	2140      	movs	r1, #64	; 0x40
 80037e6:	f000 faf1 	bl	8003dcc <_malloc_r>
 80037ea:	6020      	str	r0, [r4, #0]
 80037ec:	6120      	str	r0, [r4, #16]
 80037ee:	b928      	cbnz	r0, 80037fc <_svfiprintf_r+0x30>
 80037f0:	230c      	movs	r3, #12
 80037f2:	f8c8 3000 	str.w	r3, [r8]
 80037f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037fa:	e0c8      	b.n	800398e <_svfiprintf_r+0x1c2>
 80037fc:	2340      	movs	r3, #64	; 0x40
 80037fe:	6163      	str	r3, [r4, #20]
 8003800:	2300      	movs	r3, #0
 8003802:	9309      	str	r3, [sp, #36]	; 0x24
 8003804:	2320      	movs	r3, #32
 8003806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800380a:	2330      	movs	r3, #48	; 0x30
 800380c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003810:	9503      	str	r5, [sp, #12]
 8003812:	f04f 0b01 	mov.w	fp, #1
 8003816:	4637      	mov	r7, r6
 8003818:	463d      	mov	r5, r7
 800381a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800381e:	b10b      	cbz	r3, 8003824 <_svfiprintf_r+0x58>
 8003820:	2b25      	cmp	r3, #37	; 0x25
 8003822:	d13e      	bne.n	80038a2 <_svfiprintf_r+0xd6>
 8003824:	ebb7 0a06 	subs.w	sl, r7, r6
 8003828:	d00b      	beq.n	8003842 <_svfiprintf_r+0x76>
 800382a:	4653      	mov	r3, sl
 800382c:	4632      	mov	r2, r6
 800382e:	4621      	mov	r1, r4
 8003830:	4640      	mov	r0, r8
 8003832:	f7ff ff70 	bl	8003716 <__ssputs_r>
 8003836:	3001      	adds	r0, #1
 8003838:	f000 80a4 	beq.w	8003984 <_svfiprintf_r+0x1b8>
 800383c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800383e:	4453      	add	r3, sl
 8003840:	9309      	str	r3, [sp, #36]	; 0x24
 8003842:	783b      	ldrb	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 809d 	beq.w	8003984 <_svfiprintf_r+0x1b8>
 800384a:	2300      	movs	r3, #0
 800384c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003854:	9304      	str	r3, [sp, #16]
 8003856:	9307      	str	r3, [sp, #28]
 8003858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800385c:	931a      	str	r3, [sp, #104]	; 0x68
 800385e:	462f      	mov	r7, r5
 8003860:	2205      	movs	r2, #5
 8003862:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003866:	4850      	ldr	r0, [pc, #320]	; (80039a8 <_svfiprintf_r+0x1dc>)
 8003868:	f7fc fcba 	bl	80001e0 <memchr>
 800386c:	9b04      	ldr	r3, [sp, #16]
 800386e:	b9d0      	cbnz	r0, 80038a6 <_svfiprintf_r+0xda>
 8003870:	06d9      	lsls	r1, r3, #27
 8003872:	bf44      	itt	mi
 8003874:	2220      	movmi	r2, #32
 8003876:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800387a:	071a      	lsls	r2, r3, #28
 800387c:	bf44      	itt	mi
 800387e:	222b      	movmi	r2, #43	; 0x2b
 8003880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003884:	782a      	ldrb	r2, [r5, #0]
 8003886:	2a2a      	cmp	r2, #42	; 0x2a
 8003888:	d015      	beq.n	80038b6 <_svfiprintf_r+0xea>
 800388a:	9a07      	ldr	r2, [sp, #28]
 800388c:	462f      	mov	r7, r5
 800388e:	2000      	movs	r0, #0
 8003890:	250a      	movs	r5, #10
 8003892:	4639      	mov	r1, r7
 8003894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003898:	3b30      	subs	r3, #48	; 0x30
 800389a:	2b09      	cmp	r3, #9
 800389c:	d94d      	bls.n	800393a <_svfiprintf_r+0x16e>
 800389e:	b1b8      	cbz	r0, 80038d0 <_svfiprintf_r+0x104>
 80038a0:	e00f      	b.n	80038c2 <_svfiprintf_r+0xf6>
 80038a2:	462f      	mov	r7, r5
 80038a4:	e7b8      	b.n	8003818 <_svfiprintf_r+0x4c>
 80038a6:	4a40      	ldr	r2, [pc, #256]	; (80039a8 <_svfiprintf_r+0x1dc>)
 80038a8:	1a80      	subs	r0, r0, r2
 80038aa:	fa0b f000 	lsl.w	r0, fp, r0
 80038ae:	4318      	orrs	r0, r3
 80038b0:	9004      	str	r0, [sp, #16]
 80038b2:	463d      	mov	r5, r7
 80038b4:	e7d3      	b.n	800385e <_svfiprintf_r+0x92>
 80038b6:	9a03      	ldr	r2, [sp, #12]
 80038b8:	1d11      	adds	r1, r2, #4
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	9103      	str	r1, [sp, #12]
 80038be:	2a00      	cmp	r2, #0
 80038c0:	db01      	blt.n	80038c6 <_svfiprintf_r+0xfa>
 80038c2:	9207      	str	r2, [sp, #28]
 80038c4:	e004      	b.n	80038d0 <_svfiprintf_r+0x104>
 80038c6:	4252      	negs	r2, r2
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	9207      	str	r2, [sp, #28]
 80038ce:	9304      	str	r3, [sp, #16]
 80038d0:	783b      	ldrb	r3, [r7, #0]
 80038d2:	2b2e      	cmp	r3, #46	; 0x2e
 80038d4:	d10c      	bne.n	80038f0 <_svfiprintf_r+0x124>
 80038d6:	787b      	ldrb	r3, [r7, #1]
 80038d8:	2b2a      	cmp	r3, #42	; 0x2a
 80038da:	d133      	bne.n	8003944 <_svfiprintf_r+0x178>
 80038dc:	9b03      	ldr	r3, [sp, #12]
 80038de:	1d1a      	adds	r2, r3, #4
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	9203      	str	r2, [sp, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bfb8      	it	lt
 80038e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80038ec:	3702      	adds	r7, #2
 80038ee:	9305      	str	r3, [sp, #20]
 80038f0:	4d2e      	ldr	r5, [pc, #184]	; (80039ac <_svfiprintf_r+0x1e0>)
 80038f2:	7839      	ldrb	r1, [r7, #0]
 80038f4:	2203      	movs	r2, #3
 80038f6:	4628      	mov	r0, r5
 80038f8:	f7fc fc72 	bl	80001e0 <memchr>
 80038fc:	b138      	cbz	r0, 800390e <_svfiprintf_r+0x142>
 80038fe:	2340      	movs	r3, #64	; 0x40
 8003900:	1b40      	subs	r0, r0, r5
 8003902:	fa03 f000 	lsl.w	r0, r3, r0
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	4303      	orrs	r3, r0
 800390a:	3701      	adds	r7, #1
 800390c:	9304      	str	r3, [sp, #16]
 800390e:	7839      	ldrb	r1, [r7, #0]
 8003910:	4827      	ldr	r0, [pc, #156]	; (80039b0 <_svfiprintf_r+0x1e4>)
 8003912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003916:	2206      	movs	r2, #6
 8003918:	1c7e      	adds	r6, r7, #1
 800391a:	f7fc fc61 	bl	80001e0 <memchr>
 800391e:	2800      	cmp	r0, #0
 8003920:	d038      	beq.n	8003994 <_svfiprintf_r+0x1c8>
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <_svfiprintf_r+0x1e8>)
 8003924:	bb13      	cbnz	r3, 800396c <_svfiprintf_r+0x1a0>
 8003926:	9b03      	ldr	r3, [sp, #12]
 8003928:	3307      	adds	r3, #7
 800392a:	f023 0307 	bic.w	r3, r3, #7
 800392e:	3308      	adds	r3, #8
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003934:	444b      	add	r3, r9
 8003936:	9309      	str	r3, [sp, #36]	; 0x24
 8003938:	e76d      	b.n	8003816 <_svfiprintf_r+0x4a>
 800393a:	fb05 3202 	mla	r2, r5, r2, r3
 800393e:	2001      	movs	r0, #1
 8003940:	460f      	mov	r7, r1
 8003942:	e7a6      	b.n	8003892 <_svfiprintf_r+0xc6>
 8003944:	2300      	movs	r3, #0
 8003946:	3701      	adds	r7, #1
 8003948:	9305      	str	r3, [sp, #20]
 800394a:	4619      	mov	r1, r3
 800394c:	250a      	movs	r5, #10
 800394e:	4638      	mov	r0, r7
 8003950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003954:	3a30      	subs	r2, #48	; 0x30
 8003956:	2a09      	cmp	r2, #9
 8003958:	d903      	bls.n	8003962 <_svfiprintf_r+0x196>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0c8      	beq.n	80038f0 <_svfiprintf_r+0x124>
 800395e:	9105      	str	r1, [sp, #20]
 8003960:	e7c6      	b.n	80038f0 <_svfiprintf_r+0x124>
 8003962:	fb05 2101 	mla	r1, r5, r1, r2
 8003966:	2301      	movs	r3, #1
 8003968:	4607      	mov	r7, r0
 800396a:	e7f0      	b.n	800394e <_svfiprintf_r+0x182>
 800396c:	ab03      	add	r3, sp, #12
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4622      	mov	r2, r4
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <_svfiprintf_r+0x1ec>)
 8003974:	a904      	add	r1, sp, #16
 8003976:	4640      	mov	r0, r8
 8003978:	f3af 8000 	nop.w
 800397c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003980:	4681      	mov	r9, r0
 8003982:	d1d6      	bne.n	8003932 <_svfiprintf_r+0x166>
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	065b      	lsls	r3, r3, #25
 8003988:	f53f af35 	bmi.w	80037f6 <_svfiprintf_r+0x2a>
 800398c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800398e:	b01d      	add	sp, #116	; 0x74
 8003990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003994:	ab03      	add	r3, sp, #12
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	4622      	mov	r2, r4
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <_svfiprintf_r+0x1ec>)
 800399c:	a904      	add	r1, sp, #16
 800399e:	4640      	mov	r0, r8
 80039a0:	f000 f882 	bl	8003aa8 <_printf_i>
 80039a4:	e7ea      	b.n	800397c <_svfiprintf_r+0x1b0>
 80039a6:	bf00      	nop
 80039a8:	08004066 	.word	0x08004066
 80039ac:	0800406c 	.word	0x0800406c
 80039b0:	08004070 	.word	0x08004070
 80039b4:	00000000 	.word	0x00000000
 80039b8:	08003717 	.word	0x08003717

080039bc <_printf_common>:
 80039bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c0:	4691      	mov	r9, r2
 80039c2:	461f      	mov	r7, r3
 80039c4:	688a      	ldr	r2, [r1, #8]
 80039c6:	690b      	ldr	r3, [r1, #16]
 80039c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bfb8      	it	lt
 80039d0:	4613      	movlt	r3, r2
 80039d2:	f8c9 3000 	str.w	r3, [r9]
 80039d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039da:	4606      	mov	r6, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	b112      	cbz	r2, 80039e6 <_printf_common+0x2a>
 80039e0:	3301      	adds	r3, #1
 80039e2:	f8c9 3000 	str.w	r3, [r9]
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	0699      	lsls	r1, r3, #26
 80039ea:	bf42      	ittt	mi
 80039ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80039f0:	3302      	addmi	r3, #2
 80039f2:	f8c9 3000 	strmi.w	r3, [r9]
 80039f6:	6825      	ldr	r5, [r4, #0]
 80039f8:	f015 0506 	ands.w	r5, r5, #6
 80039fc:	d107      	bne.n	8003a0e <_printf_common+0x52>
 80039fe:	f104 0a19 	add.w	sl, r4, #25
 8003a02:	68e3      	ldr	r3, [r4, #12]
 8003a04:	f8d9 2000 	ldr.w	r2, [r9]
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	42ab      	cmp	r3, r5
 8003a0c:	dc28      	bgt.n	8003a60 <_printf_common+0xa4>
 8003a0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	3300      	adds	r3, #0
 8003a16:	bf18      	it	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	0692      	lsls	r2, r2, #26
 8003a1c:	d42d      	bmi.n	8003a7a <_printf_common+0xbe>
 8003a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a22:	4639      	mov	r1, r7
 8003a24:	4630      	mov	r0, r6
 8003a26:	47c0      	blx	r8
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d020      	beq.n	8003a6e <_printf_common+0xb2>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	68e5      	ldr	r5, [r4, #12]
 8003a30:	f8d9 2000 	ldr.w	r2, [r9]
 8003a34:	f003 0306 	and.w	r3, r3, #6
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	bf08      	it	eq
 8003a3c:	1aad      	subeq	r5, r5, r2
 8003a3e:	68a3      	ldr	r3, [r4, #8]
 8003a40:	6922      	ldr	r2, [r4, #16]
 8003a42:	bf0c      	ite	eq
 8003a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a48:	2500      	movne	r5, #0
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	bfc4      	itt	gt
 8003a4e:	1a9b      	subgt	r3, r3, r2
 8003a50:	18ed      	addgt	r5, r5, r3
 8003a52:	f04f 0900 	mov.w	r9, #0
 8003a56:	341a      	adds	r4, #26
 8003a58:	454d      	cmp	r5, r9
 8003a5a:	d11a      	bne.n	8003a92 <_printf_common+0xd6>
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	e008      	b.n	8003a72 <_printf_common+0xb6>
 8003a60:	2301      	movs	r3, #1
 8003a62:	4652      	mov	r2, sl
 8003a64:	4639      	mov	r1, r7
 8003a66:	4630      	mov	r0, r6
 8003a68:	47c0      	blx	r8
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d103      	bne.n	8003a76 <_printf_common+0xba>
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a76:	3501      	adds	r5, #1
 8003a78:	e7c3      	b.n	8003a02 <_printf_common+0x46>
 8003a7a:	18e1      	adds	r1, r4, r3
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	2030      	movs	r0, #48	; 0x30
 8003a80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a84:	4422      	add	r2, r4
 8003a86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a8e:	3302      	adds	r3, #2
 8003a90:	e7c5      	b.n	8003a1e <_printf_common+0x62>
 8003a92:	2301      	movs	r3, #1
 8003a94:	4622      	mov	r2, r4
 8003a96:	4639      	mov	r1, r7
 8003a98:	4630      	mov	r0, r6
 8003a9a:	47c0      	blx	r8
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d0e6      	beq.n	8003a6e <_printf_common+0xb2>
 8003aa0:	f109 0901 	add.w	r9, r9, #1
 8003aa4:	e7d8      	b.n	8003a58 <_printf_common+0x9c>
	...

08003aa8 <_printf_i>:
 8003aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003aac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	7e09      	ldrb	r1, [r1, #24]
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	296e      	cmp	r1, #110	; 0x6e
 8003ab8:	4617      	mov	r7, r2
 8003aba:	4606      	mov	r6, r0
 8003abc:	4698      	mov	r8, r3
 8003abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ac0:	f000 80b3 	beq.w	8003c2a <_printf_i+0x182>
 8003ac4:	d822      	bhi.n	8003b0c <_printf_i+0x64>
 8003ac6:	2963      	cmp	r1, #99	; 0x63
 8003ac8:	d036      	beq.n	8003b38 <_printf_i+0x90>
 8003aca:	d80a      	bhi.n	8003ae2 <_printf_i+0x3a>
 8003acc:	2900      	cmp	r1, #0
 8003ace:	f000 80b9 	beq.w	8003c44 <_printf_i+0x19c>
 8003ad2:	2958      	cmp	r1, #88	; 0x58
 8003ad4:	f000 8083 	beq.w	8003bde <_printf_i+0x136>
 8003ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003adc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ae0:	e032      	b.n	8003b48 <_printf_i+0xa0>
 8003ae2:	2964      	cmp	r1, #100	; 0x64
 8003ae4:	d001      	beq.n	8003aea <_printf_i+0x42>
 8003ae6:	2969      	cmp	r1, #105	; 0x69
 8003ae8:	d1f6      	bne.n	8003ad8 <_printf_i+0x30>
 8003aea:	6820      	ldr	r0, [r4, #0]
 8003aec:	6813      	ldr	r3, [r2, #0]
 8003aee:	0605      	lsls	r5, r0, #24
 8003af0:	f103 0104 	add.w	r1, r3, #4
 8003af4:	d52a      	bpl.n	8003b4c <_printf_i+0xa4>
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6011      	str	r1, [r2, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da03      	bge.n	8003b06 <_printf_i+0x5e>
 8003afe:	222d      	movs	r2, #45	; 0x2d
 8003b00:	425b      	negs	r3, r3
 8003b02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003b06:	486f      	ldr	r0, [pc, #444]	; (8003cc4 <_printf_i+0x21c>)
 8003b08:	220a      	movs	r2, #10
 8003b0a:	e039      	b.n	8003b80 <_printf_i+0xd8>
 8003b0c:	2973      	cmp	r1, #115	; 0x73
 8003b0e:	f000 809d 	beq.w	8003c4c <_printf_i+0x1a4>
 8003b12:	d808      	bhi.n	8003b26 <_printf_i+0x7e>
 8003b14:	296f      	cmp	r1, #111	; 0x6f
 8003b16:	d020      	beq.n	8003b5a <_printf_i+0xb2>
 8003b18:	2970      	cmp	r1, #112	; 0x70
 8003b1a:	d1dd      	bne.n	8003ad8 <_printf_i+0x30>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	f043 0320 	orr.w	r3, r3, #32
 8003b22:	6023      	str	r3, [r4, #0]
 8003b24:	e003      	b.n	8003b2e <_printf_i+0x86>
 8003b26:	2975      	cmp	r1, #117	; 0x75
 8003b28:	d017      	beq.n	8003b5a <_printf_i+0xb2>
 8003b2a:	2978      	cmp	r1, #120	; 0x78
 8003b2c:	d1d4      	bne.n	8003ad8 <_printf_i+0x30>
 8003b2e:	2378      	movs	r3, #120	; 0x78
 8003b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b34:	4864      	ldr	r0, [pc, #400]	; (8003cc8 <_printf_i+0x220>)
 8003b36:	e055      	b.n	8003be4 <_printf_i+0x13c>
 8003b38:	6813      	ldr	r3, [r2, #0]
 8003b3a:	1d19      	adds	r1, r3, #4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6011      	str	r1, [r2, #0]
 8003b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e08c      	b.n	8003c66 <_printf_i+0x1be>
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6011      	str	r1, [r2, #0]
 8003b50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b54:	bf18      	it	ne
 8003b56:	b21b      	sxthne	r3, r3
 8003b58:	e7cf      	b.n	8003afa <_printf_i+0x52>
 8003b5a:	6813      	ldr	r3, [r2, #0]
 8003b5c:	6825      	ldr	r5, [r4, #0]
 8003b5e:	1d18      	adds	r0, r3, #4
 8003b60:	6010      	str	r0, [r2, #0]
 8003b62:	0628      	lsls	r0, r5, #24
 8003b64:	d501      	bpl.n	8003b6a <_printf_i+0xc2>
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	e002      	b.n	8003b70 <_printf_i+0xc8>
 8003b6a:	0668      	lsls	r0, r5, #25
 8003b6c:	d5fb      	bpl.n	8003b66 <_printf_i+0xbe>
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	4854      	ldr	r0, [pc, #336]	; (8003cc4 <_printf_i+0x21c>)
 8003b72:	296f      	cmp	r1, #111	; 0x6f
 8003b74:	bf14      	ite	ne
 8003b76:	220a      	movne	r2, #10
 8003b78:	2208      	moveq	r2, #8
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b80:	6865      	ldr	r5, [r4, #4]
 8003b82:	60a5      	str	r5, [r4, #8]
 8003b84:	2d00      	cmp	r5, #0
 8003b86:	f2c0 8095 	blt.w	8003cb4 <_printf_i+0x20c>
 8003b8a:	6821      	ldr	r1, [r4, #0]
 8003b8c:	f021 0104 	bic.w	r1, r1, #4
 8003b90:	6021      	str	r1, [r4, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d13d      	bne.n	8003c12 <_printf_i+0x16a>
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	f040 808e 	bne.w	8003cb8 <_printf_i+0x210>
 8003b9c:	4665      	mov	r5, ip
 8003b9e:	2a08      	cmp	r2, #8
 8003ba0:	d10b      	bne.n	8003bba <_printf_i+0x112>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	07db      	lsls	r3, r3, #31
 8003ba6:	d508      	bpl.n	8003bba <_printf_i+0x112>
 8003ba8:	6923      	ldr	r3, [r4, #16]
 8003baa:	6862      	ldr	r2, [r4, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	bfde      	ittt	le
 8003bb0:	2330      	movle	r3, #48	; 0x30
 8003bb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bb6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003bba:	ebac 0305 	sub.w	r3, ip, r5
 8003bbe:	6123      	str	r3, [r4, #16]
 8003bc0:	f8cd 8000 	str.w	r8, [sp]
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	aa03      	add	r2, sp, #12
 8003bc8:	4621      	mov	r1, r4
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f7ff fef6 	bl	80039bc <_printf_common>
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d14d      	bne.n	8003c70 <_printf_i+0x1c8>
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bd8:	b005      	add	sp, #20
 8003bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bde:	4839      	ldr	r0, [pc, #228]	; (8003cc4 <_printf_i+0x21c>)
 8003be0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003be4:	6813      	ldr	r3, [r2, #0]
 8003be6:	6821      	ldr	r1, [r4, #0]
 8003be8:	1d1d      	adds	r5, r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6015      	str	r5, [r2, #0]
 8003bee:	060a      	lsls	r2, r1, #24
 8003bf0:	d50b      	bpl.n	8003c0a <_printf_i+0x162>
 8003bf2:	07ca      	lsls	r2, r1, #31
 8003bf4:	bf44      	itt	mi
 8003bf6:	f041 0120 	orrmi.w	r1, r1, #32
 8003bfa:	6021      	strmi	r1, [r4, #0]
 8003bfc:	b91b      	cbnz	r3, 8003c06 <_printf_i+0x15e>
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	f022 0220 	bic.w	r2, r2, #32
 8003c04:	6022      	str	r2, [r4, #0]
 8003c06:	2210      	movs	r2, #16
 8003c08:	e7b7      	b.n	8003b7a <_printf_i+0xd2>
 8003c0a:	064d      	lsls	r5, r1, #25
 8003c0c:	bf48      	it	mi
 8003c0e:	b29b      	uxthmi	r3, r3
 8003c10:	e7ef      	b.n	8003bf2 <_printf_i+0x14a>
 8003c12:	4665      	mov	r5, ip
 8003c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c18:	fb02 3311 	mls	r3, r2, r1, r3
 8003c1c:	5cc3      	ldrb	r3, [r0, r3]
 8003c1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003c22:	460b      	mov	r3, r1
 8003c24:	2900      	cmp	r1, #0
 8003c26:	d1f5      	bne.n	8003c14 <_printf_i+0x16c>
 8003c28:	e7b9      	b.n	8003b9e <_printf_i+0xf6>
 8003c2a:	6813      	ldr	r3, [r2, #0]
 8003c2c:	6825      	ldr	r5, [r4, #0]
 8003c2e:	6961      	ldr	r1, [r4, #20]
 8003c30:	1d18      	adds	r0, r3, #4
 8003c32:	6010      	str	r0, [r2, #0]
 8003c34:	0628      	lsls	r0, r5, #24
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	d501      	bpl.n	8003c3e <_printf_i+0x196>
 8003c3a:	6019      	str	r1, [r3, #0]
 8003c3c:	e002      	b.n	8003c44 <_printf_i+0x19c>
 8003c3e:	066a      	lsls	r2, r5, #25
 8003c40:	d5fb      	bpl.n	8003c3a <_printf_i+0x192>
 8003c42:	8019      	strh	r1, [r3, #0]
 8003c44:	2300      	movs	r3, #0
 8003c46:	6123      	str	r3, [r4, #16]
 8003c48:	4665      	mov	r5, ip
 8003c4a:	e7b9      	b.n	8003bc0 <_printf_i+0x118>
 8003c4c:	6813      	ldr	r3, [r2, #0]
 8003c4e:	1d19      	adds	r1, r3, #4
 8003c50:	6011      	str	r1, [r2, #0]
 8003c52:	681d      	ldr	r5, [r3, #0]
 8003c54:	6862      	ldr	r2, [r4, #4]
 8003c56:	2100      	movs	r1, #0
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f7fc fac1 	bl	80001e0 <memchr>
 8003c5e:	b108      	cbz	r0, 8003c64 <_printf_i+0x1bc>
 8003c60:	1b40      	subs	r0, r0, r5
 8003c62:	6060      	str	r0, [r4, #4]
 8003c64:	6863      	ldr	r3, [r4, #4]
 8003c66:	6123      	str	r3, [r4, #16]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c6e:	e7a7      	b.n	8003bc0 <_printf_i+0x118>
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	462a      	mov	r2, r5
 8003c74:	4639      	mov	r1, r7
 8003c76:	4630      	mov	r0, r6
 8003c78:	47c0      	blx	r8
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	d0aa      	beq.n	8003bd4 <_printf_i+0x12c>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	079b      	lsls	r3, r3, #30
 8003c82:	d413      	bmi.n	8003cac <_printf_i+0x204>
 8003c84:	68e0      	ldr	r0, [r4, #12]
 8003c86:	9b03      	ldr	r3, [sp, #12]
 8003c88:	4298      	cmp	r0, r3
 8003c8a:	bfb8      	it	lt
 8003c8c:	4618      	movlt	r0, r3
 8003c8e:	e7a3      	b.n	8003bd8 <_printf_i+0x130>
 8003c90:	2301      	movs	r3, #1
 8003c92:	464a      	mov	r2, r9
 8003c94:	4639      	mov	r1, r7
 8003c96:	4630      	mov	r0, r6
 8003c98:	47c0      	blx	r8
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d09a      	beq.n	8003bd4 <_printf_i+0x12c>
 8003c9e:	3501      	adds	r5, #1
 8003ca0:	68e3      	ldr	r3, [r4, #12]
 8003ca2:	9a03      	ldr	r2, [sp, #12]
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	42ab      	cmp	r3, r5
 8003ca8:	dcf2      	bgt.n	8003c90 <_printf_i+0x1e8>
 8003caa:	e7eb      	b.n	8003c84 <_printf_i+0x1dc>
 8003cac:	2500      	movs	r5, #0
 8003cae:	f104 0919 	add.w	r9, r4, #25
 8003cb2:	e7f5      	b.n	8003ca0 <_printf_i+0x1f8>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ac      	bne.n	8003c12 <_printf_i+0x16a>
 8003cb8:	7803      	ldrb	r3, [r0, #0]
 8003cba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cc2:	e76c      	b.n	8003b9e <_printf_i+0xf6>
 8003cc4:	08004077 	.word	0x08004077
 8003cc8:	08004088 	.word	0x08004088

08003ccc <__ascii_wctomb>:
 8003ccc:	b149      	cbz	r1, 8003ce2 <__ascii_wctomb+0x16>
 8003cce:	2aff      	cmp	r2, #255	; 0xff
 8003cd0:	bf85      	ittet	hi
 8003cd2:	238a      	movhi	r3, #138	; 0x8a
 8003cd4:	6003      	strhi	r3, [r0, #0]
 8003cd6:	700a      	strbls	r2, [r1, #0]
 8003cd8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8003cdc:	bf98      	it	ls
 8003cde:	2001      	movls	r0, #1
 8003ce0:	4770      	bx	lr
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	4770      	bx	lr

08003ce6 <memcpy>:
 8003ce6:	b510      	push	{r4, lr}
 8003ce8:	1e43      	subs	r3, r0, #1
 8003cea:	440a      	add	r2, r1
 8003cec:	4291      	cmp	r1, r2
 8003cee:	d100      	bne.n	8003cf2 <memcpy+0xc>
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cfa:	e7f7      	b.n	8003cec <memcpy+0x6>

08003cfc <memmove>:
 8003cfc:	4288      	cmp	r0, r1
 8003cfe:	b510      	push	{r4, lr}
 8003d00:	eb01 0302 	add.w	r3, r1, r2
 8003d04:	d807      	bhi.n	8003d16 <memmove+0x1a>
 8003d06:	1e42      	subs	r2, r0, #1
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	d00a      	beq.n	8003d22 <memmove+0x26>
 8003d0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d10:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003d14:	e7f8      	b.n	8003d08 <memmove+0xc>
 8003d16:	4283      	cmp	r3, r0
 8003d18:	d9f5      	bls.n	8003d06 <memmove+0xa>
 8003d1a:	1881      	adds	r1, r0, r2
 8003d1c:	1ad2      	subs	r2, r2, r3
 8003d1e:	42d3      	cmn	r3, r2
 8003d20:	d100      	bne.n	8003d24 <memmove+0x28>
 8003d22:	bd10      	pop	{r4, pc}
 8003d24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d28:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003d2c:	e7f7      	b.n	8003d1e <memmove+0x22>
	...

08003d30 <_free_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4605      	mov	r5, r0
 8003d34:	2900      	cmp	r1, #0
 8003d36:	d045      	beq.n	8003dc4 <_free_r+0x94>
 8003d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3c:	1f0c      	subs	r4, r1, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bfb8      	it	lt
 8003d42:	18e4      	addlt	r4, r4, r3
 8003d44:	f000 f8d2 	bl	8003eec <__malloc_lock>
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <_free_r+0x98>)
 8003d4a:	6813      	ldr	r3, [r2, #0]
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	b933      	cbnz	r3, 8003d5e <_free_r+0x2e>
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	6014      	str	r4, [r2, #0]
 8003d54:	4628      	mov	r0, r5
 8003d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d5a:	f000 b8c8 	b.w	8003eee <__malloc_unlock>
 8003d5e:	42a3      	cmp	r3, r4
 8003d60:	d90c      	bls.n	8003d7c <_free_r+0x4c>
 8003d62:	6821      	ldr	r1, [r4, #0]
 8003d64:	1862      	adds	r2, r4, r1
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bf04      	itt	eq
 8003d6a:	681a      	ldreq	r2, [r3, #0]
 8003d6c:	685b      	ldreq	r3, [r3, #4]
 8003d6e:	6063      	str	r3, [r4, #4]
 8003d70:	bf04      	itt	eq
 8003d72:	1852      	addeq	r2, r2, r1
 8003d74:	6022      	streq	r2, [r4, #0]
 8003d76:	6004      	str	r4, [r0, #0]
 8003d78:	e7ec      	b.n	8003d54 <_free_r+0x24>
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	b10a      	cbz	r2, 8003d84 <_free_r+0x54>
 8003d80:	42a2      	cmp	r2, r4
 8003d82:	d9fa      	bls.n	8003d7a <_free_r+0x4a>
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	1858      	adds	r0, r3, r1
 8003d88:	42a0      	cmp	r0, r4
 8003d8a:	d10b      	bne.n	8003da4 <_free_r+0x74>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	4401      	add	r1, r0
 8003d90:	1858      	adds	r0, r3, r1
 8003d92:	4282      	cmp	r2, r0
 8003d94:	6019      	str	r1, [r3, #0]
 8003d96:	d1dd      	bne.n	8003d54 <_free_r+0x24>
 8003d98:	6810      	ldr	r0, [r2, #0]
 8003d9a:	6852      	ldr	r2, [r2, #4]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	4401      	add	r1, r0
 8003da0:	6019      	str	r1, [r3, #0]
 8003da2:	e7d7      	b.n	8003d54 <_free_r+0x24>
 8003da4:	d902      	bls.n	8003dac <_free_r+0x7c>
 8003da6:	230c      	movs	r3, #12
 8003da8:	602b      	str	r3, [r5, #0]
 8003daa:	e7d3      	b.n	8003d54 <_free_r+0x24>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	1821      	adds	r1, r4, r0
 8003db0:	428a      	cmp	r2, r1
 8003db2:	bf04      	itt	eq
 8003db4:	6811      	ldreq	r1, [r2, #0]
 8003db6:	6852      	ldreq	r2, [r2, #4]
 8003db8:	6062      	str	r2, [r4, #4]
 8003dba:	bf04      	itt	eq
 8003dbc:	1809      	addeq	r1, r1, r0
 8003dbe:	6021      	streq	r1, [r4, #0]
 8003dc0:	605c      	str	r4, [r3, #4]
 8003dc2:	e7c7      	b.n	8003d54 <_free_r+0x24>
 8003dc4:	bd38      	pop	{r3, r4, r5, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200001fc 	.word	0x200001fc

08003dcc <_malloc_r>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	1ccd      	adds	r5, r1, #3
 8003dd0:	f025 0503 	bic.w	r5, r5, #3
 8003dd4:	3508      	adds	r5, #8
 8003dd6:	2d0c      	cmp	r5, #12
 8003dd8:	bf38      	it	cc
 8003dda:	250c      	movcc	r5, #12
 8003ddc:	2d00      	cmp	r5, #0
 8003dde:	4606      	mov	r6, r0
 8003de0:	db01      	blt.n	8003de6 <_malloc_r+0x1a>
 8003de2:	42a9      	cmp	r1, r5
 8003de4:	d903      	bls.n	8003dee <_malloc_r+0x22>
 8003de6:	230c      	movs	r3, #12
 8003de8:	6033      	str	r3, [r6, #0]
 8003dea:	2000      	movs	r0, #0
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	f000 f87d 	bl	8003eec <__malloc_lock>
 8003df2:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <_malloc_r+0xac>)
 8003df4:	6814      	ldr	r4, [r2, #0]
 8003df6:	4621      	mov	r1, r4
 8003df8:	b991      	cbnz	r1, 8003e20 <_malloc_r+0x54>
 8003dfa:	4c20      	ldr	r4, [pc, #128]	; (8003e7c <_malloc_r+0xb0>)
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	b91b      	cbnz	r3, 8003e08 <_malloc_r+0x3c>
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 f863 	bl	8003ecc <_sbrk_r>
 8003e06:	6020      	str	r0, [r4, #0]
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f000 f85e 	bl	8003ecc <_sbrk_r>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d124      	bne.n	8003e5e <_malloc_r+0x92>
 8003e14:	230c      	movs	r3, #12
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f000 f868 	bl	8003eee <__malloc_unlock>
 8003e1e:	e7e4      	b.n	8003dea <_malloc_r+0x1e>
 8003e20:	680b      	ldr	r3, [r1, #0]
 8003e22:	1b5b      	subs	r3, r3, r5
 8003e24:	d418      	bmi.n	8003e58 <_malloc_r+0x8c>
 8003e26:	2b0b      	cmp	r3, #11
 8003e28:	d90f      	bls.n	8003e4a <_malloc_r+0x7e>
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	50cd      	str	r5, [r1, r3]
 8003e2e:	18cc      	adds	r4, r1, r3
 8003e30:	4630      	mov	r0, r6
 8003e32:	f000 f85c 	bl	8003eee <__malloc_unlock>
 8003e36:	f104 000b 	add.w	r0, r4, #11
 8003e3a:	1d23      	adds	r3, r4, #4
 8003e3c:	f020 0007 	bic.w	r0, r0, #7
 8003e40:	1ac3      	subs	r3, r0, r3
 8003e42:	d0d3      	beq.n	8003dec <_malloc_r+0x20>
 8003e44:	425a      	negs	r2, r3
 8003e46:	50e2      	str	r2, [r4, r3]
 8003e48:	e7d0      	b.n	8003dec <_malloc_r+0x20>
 8003e4a:	428c      	cmp	r4, r1
 8003e4c:	684b      	ldr	r3, [r1, #4]
 8003e4e:	bf16      	itet	ne
 8003e50:	6063      	strne	r3, [r4, #4]
 8003e52:	6013      	streq	r3, [r2, #0]
 8003e54:	460c      	movne	r4, r1
 8003e56:	e7eb      	b.n	8003e30 <_malloc_r+0x64>
 8003e58:	460c      	mov	r4, r1
 8003e5a:	6849      	ldr	r1, [r1, #4]
 8003e5c:	e7cc      	b.n	8003df8 <_malloc_r+0x2c>
 8003e5e:	1cc4      	adds	r4, r0, #3
 8003e60:	f024 0403 	bic.w	r4, r4, #3
 8003e64:	42a0      	cmp	r0, r4
 8003e66:	d005      	beq.n	8003e74 <_malloc_r+0xa8>
 8003e68:	1a21      	subs	r1, r4, r0
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f000 f82e 	bl	8003ecc <_sbrk_r>
 8003e70:	3001      	adds	r0, #1
 8003e72:	d0cf      	beq.n	8003e14 <_malloc_r+0x48>
 8003e74:	6025      	str	r5, [r4, #0]
 8003e76:	e7db      	b.n	8003e30 <_malloc_r+0x64>
 8003e78:	200001fc 	.word	0x200001fc
 8003e7c:	20000200 	.word	0x20000200

08003e80 <_realloc_r>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	4607      	mov	r7, r0
 8003e84:	4614      	mov	r4, r2
 8003e86:	460e      	mov	r6, r1
 8003e88:	b921      	cbnz	r1, 8003e94 <_realloc_r+0x14>
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e90:	f7ff bf9c 	b.w	8003dcc <_malloc_r>
 8003e94:	b922      	cbnz	r2, 8003ea0 <_realloc_r+0x20>
 8003e96:	f7ff ff4b 	bl	8003d30 <_free_r>
 8003e9a:	4625      	mov	r5, r4
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea0:	f000 f826 	bl	8003ef0 <_malloc_usable_size_r>
 8003ea4:	42a0      	cmp	r0, r4
 8003ea6:	d20f      	bcs.n	8003ec8 <_realloc_r+0x48>
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f7ff ff8e 	bl	8003dcc <_malloc_r>
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d0f2      	beq.n	8003e9c <_realloc_r+0x1c>
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	4622      	mov	r2, r4
 8003eba:	f7ff ff14 	bl	8003ce6 <memcpy>
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	f7ff ff35 	bl	8003d30 <_free_r>
 8003ec6:	e7e9      	b.n	8003e9c <_realloc_r+0x1c>
 8003ec8:	4635      	mov	r5, r6
 8003eca:	e7e7      	b.n	8003e9c <_realloc_r+0x1c>

08003ecc <_sbrk_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4c06      	ldr	r4, [pc, #24]	; (8003ee8 <_sbrk_r+0x1c>)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	f7fc fdc4 	bl	8000a64 <_sbrk>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_sbrk_r+0x1a>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_sbrk_r+0x1a>
 8003ee4:	602b      	str	r3, [r5, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000288 	.word	0x20000288

08003eec <__malloc_lock>:
 8003eec:	4770      	bx	lr

08003eee <__malloc_unlock>:
 8003eee:	4770      	bx	lr

08003ef0 <_malloc_usable_size_r>:
 8003ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ef4:	1f18      	subs	r0, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bfbc      	itt	lt
 8003efa:	580b      	ldrlt	r3, [r1, r0]
 8003efc:	18c0      	addlt	r0, r0, r3
 8003efe:	4770      	bx	lr

08003f00 <_init>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	bf00      	nop
 8003f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f06:	bc08      	pop	{r3}
 8003f08:	469e      	mov	lr, r3
 8003f0a:	4770      	bx	lr

08003f0c <_fini>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	bf00      	nop
 8003f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f12:	bc08      	pop	{r3}
 8003f14:	469e      	mov	lr, r3
 8003f16:	4770      	bx	lr
